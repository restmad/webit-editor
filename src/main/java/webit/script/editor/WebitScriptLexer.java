/* The following code was generated by JFlex 1.4.3 on 14-3-30 下午11:53 */

package webit.script.editor;

import java.util.List;
import java.util.LinkedList;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
import jsyntaxpane.lexers.DefaultJFlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-30 下午11:53 from the specification file
 * <tt>webitscript.flex</tt>
 */
public class WebitScriptLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int YYSTATEMENT = 4;
  public static final int CHARLITERAL = 8;
  public static final int YYTEXT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\73"+
    "\1\25\1\60\1\33\1\31\1\76\1\26\1\64\1\65\1\5\1\100"+
    "\1\71\1\24\1\22\1\4\1\10\1\12\1\101\1\17\1\102\1\20"+
    "\1\105\1\103\1\104\1\14\1\75\1\71\1\30\1\72\1\32\1\74"+
    "\1\63\1\16\1\11\1\16\1\21\1\23\1\21\5\6\1\13\13\6"+
    "\1\15\2\6\1\67\1\27\1\70\1\73\1\6\1\0\1\40\1\35"+
    "\1\42\1\51\1\37\1\53\1\6\1\56\1\47\1\6\1\41\1\52"+
    "\1\62\1\45\1\44\1\55\1\6\1\36\1\43\1\46\1\50\1\57"+
    "\1\54\1\15\1\61\1\6\1\34\1\77\1\66\1\71\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6"+
    "\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\10\0\33\6\5\0\3\6\15\0\4\7\7\0\1\6"+
    "\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0"+
    "\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7"+
    "\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0"+
    "\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6"+
    "\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0"+
    "\31\6\3\7\244\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0"+
    "\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6"+
    "\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\12\7\3\0\2\6"+
    "\12\7\6\0\46\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0"+
    "\15\6\3\0\32\6\26\0\15\7\4\0\1\7\3\0\14\7\21\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0"+
    "\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\4\6\3\7\16\0\46\6\12\0\66\6"+
    "\11\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\14\0"+
    "\2\7\1\0\31\6\10\0\120\6\2\7\45\0\11\6\2\0\147\6"+
    "\2\0\4\6\1\0\2\6\16\0\12\6\120\0\10\6\1\7\3\6"+
    "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"+
    "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"+
    "\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0"+
    "\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6"+
    "\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7"+
    "\1\6\1\7\1\6\30\0\3\6\43\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7"+
    "\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6"+
    "\2\0\76\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6"+
    "\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6"+
    "\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6"+
    "\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6"+
    "\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\4\2\1\3\2\4\2\5\1\6\2\7"+
    "\2\5\1\10\1\11\3\5\1\12\14\6\1\13\1\5"+
    "\1\14\1\15\1\16\1\17\1\20\6\5\1\2\1\21"+
    "\1\3\1\2\2\22\1\3\3\0\1\23\1\24\1\25"+
    "\1\0\1\7\1\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\26\1\5\17\6\1\13\7\6\1\0\1\27"+
    "\4\2\1\30\2\25\1\0\5\7\2\0\24\6\1\0"+
    "\3\7\1\0\15\6\1\0\3\7\1\0\11\6\1\0"+
    "\3\7\1\0\3\6\1\31\2\6\1\0\3\7\1\0"+
    "\2\6\1\31\3\7\1\0\1\6\3\7\1\0\1\6"+
    "\3\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\1\0\25\7\37\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u015e\0\u0276\0\u015e\0\u02bc\0\u0302\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u015e\0\u015e\0\u04a6\0\u04ec"+
    "\0\u0532\0\u015e\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6"+
    "\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u015e\0\u08c0"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u0906\0\u094c"+
    "\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u015e\0\u0aaa\0\u0af0\0\u0b36"+
    "\0\u015e\0\u0b7c\0\u01a4\0\u01ea\0\u0230\0\u015e\0\u015e\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u015e\0\u0d20\0\u0d66\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u015e\0\u0f0a\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u0348\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u015e\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u015e\0\u16b2\0\u015e\0\u16f8\0\u173e"+
    "\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u294a\0\u0348\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u015e\0\u2c06\0\u2c4c\0\u2c92"+
    "\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782"+
    "\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2"+
    "\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2"+
    "\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12"+
    "\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042"+
    "\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\106\6\27\7\1\10\1\11\2\7\1\12\52\7\1\13"+
    "\1\14\2\15\1\16\1\17\1\20\1\13\1\21\1\20"+
    "\1\22\1\20\1\22\2\20\2\22\1\20\1\23\1\20"+
    "\1\24\1\25\1\26\1\13\1\27\1\30\1\31\1\20"+
    "\1\32\1\33\1\34\1\35\2\20\1\36\1\37\1\20"+
    "\1\40\1\41\1\42\1\20\1\43\1\20\1\44\1\45"+
    "\2\20\1\46\1\47\2\20\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\17\1\60\1\56\1\61"+
    "\1\62\1\63\5\22\25\64\1\65\1\64\1\66\56\64"+
    "\1\67\1\70\1\71\23\67\1\13\1\72\56\67\135\0"+
    "\1\73\1\74\2\0\1\75\103\0\1\76\110\0\1\77"+
    "\53\0\1\15\107\0\1\100\1\101\64\0\1\56\105\0"+
    "\1\56\21\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\23\20\1\0\2\20\16\0\5\20\10\0\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\0\2\110\1\105\1\111"+
    "\1\112\11\0\1\103\1\0\1\112\11\0\3\105\25\0"+
    "\3\110\1\106\1\110\10\0\1\22\1\0\1\22\1\105"+
    "\1\22\2\0\2\22\1\105\1\111\1\112\13\0\1\112"+
    "\11\0\3\105\25\0\5\22\10\0\1\113\1\0\1\113"+
    "\1\0\1\113\2\0\2\113\1\0\1\56\56\0\5\113"+
    "\24\0\1\56\45\0\1\56\6\0\1\114\34\0\1\17"+
    "\41\0\1\56\45\0\1\115\37\0\1\56\45\0\1\116"+
    "\37\0\1\56\21\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\1\20\1\117\21\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\2\20"+
    "\1\120\20\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\5\20\1\121\7\20"+
    "\1\122\5\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\3\20\1\123\3\20"+
    "\1\124\13\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\11\20\1\125\1\20"+
    "\1\126\3\20\1\127\3\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\2\20"+
    "\1\130\1\131\7\20\1\132\7\20\1\0\2\20\16\0"+
    "\5\20\6\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\1\20\1\133\17\20\1\134\1\20\1\0\2\20\16\0"+
    "\5\20\6\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\10\20\1\135\5\20\1\136\4\20\1\0\1\20\1\137"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\2\20\1\140\4\20\1\136\13\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\3\20\1\141\3\20\1\142\2\20\1\143\1\144"+
    "\7\20\1\0\2\20\16\0\5\20\6\0\14\20\1\0"+
    "\1\20\7\0\1\20\1\0\21\20\1\145\1\20\1\0"+
    "\2\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\3\20\1\142\17\20\1\0\2\20\16\0"+
    "\5\20\47\0\1\146\70\0\1\56\37\0\1\56\110\0"+
    "\1\56\102\0\1\56\3\0\1\56\101\0\1\56\4\0"+
    "\1\56\100\0\1\56\5\0\1\56\5\0\25\64\1\0"+
    "\1\64\1\0\56\64\1\147\1\150\1\7\5\147\1\151"+
    "\1\147\1\151\4\147\1\151\1\152\4\147\3\7\5\147"+
    "\2\7\6\147\2\7\4\147\1\7\25\147\1\151\2\152"+
    "\1\147\1\152\1\153\2\0\23\153\1\154\1\0\56\153"+
    "\2\0\1\71\103\0\2\147\1\0\103\147\1\100\1\155"+
    "\1\156\103\100\5\101\1\157\100\101\10\0\1\102\1\0"+
    "\1\104\1\105\1\106\2\0\2\110\1\105\1\111\1\112"+
    "\13\0\1\112\11\0\3\105\25\0\3\110\1\106\1\110"+
    "\10\0\1\160\1\0\1\160\103\0\1\110\1\0\1\110"+
    "\1\105\1\106\2\0\2\110\1\105\1\111\1\112\13\0"+
    "\1\112\11\0\3\105\25\0\3\110\1\106\1\110\10\0"+
    "\1\106\1\0\1\106\1\0\1\106\2\0\2\106\1\105"+
    "\1\111\1\112\13\0\1\112\11\0\1\105\1\0\1\105"+
    "\25\0\5\106\10\0\1\161\2\162\1\0\1\162\1\0"+
    "\4\162\1\0\1\162\11\0\1\162\1\0\2\162\1\0"+
    "\1\162\6\0\1\162\1\0\1\162\25\0\5\162\10\0"+
    "\1\163\1\0\1\163\1\105\1\106\2\0\2\163\1\105"+
    "\1\111\1\112\13\0\1\112\11\0\3\105\25\0\3\163"+
    "\1\106\1\163\10\0\1\113\1\0\1\113\1\0\1\113"+
    "\2\0\2\113\60\0\5\113\10\0\1\164\1\0\1\164"+
    "\1\0\1\164\2\0\2\164\3\0\1\165\53\0\1\165"+
    "\5\164\10\0\1\113\1\0\1\113\1\0\1\113\2\0"+
    "\2\113\1\105\1\0\1\112\13\0\1\112\11\0\1\105"+
    "\1\0\1\105\25\0\5\113\12\0\1\166\125\0\1\17"+
    "\37\0\1\56\21\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\2\20\1\167\20\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\11\20"+
    "\1\170\11\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\21\20\1\171\1\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\6\20\1\172\14\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\6\20\1\172\2\20\1\173\11\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\10\20\1\174\12\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\3\20"+
    "\1\175\17\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\20\20\1\176\2\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\12\20\1\177\10\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\17\20\1\136\3\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\11\20"+
    "\1\200\11\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\15\20\1\201\5\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\13\20\1\172\7\20\1\0\1\136"+
    "\1\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\1\20\1\202\10\20\1\203\10\20\1\0"+
    "\2\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\5\20\1\204\1\205\14\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\20\20\1\206\2\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\16\20"+
    "\1\207\4\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\15\20\1\122\5\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\1\20\1\136\21\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\10\20\1\210\12\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\10\20"+
    "\1\211\12\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\12\20\1\212\10\20"+
    "\1\0\2\20\16\0\5\20\62\0\1\213\25\0\1\7"+
    "\113\0\1\152\1\0\1\152\4\0\2\152\60\0\3\152"+
    "\1\0\1\152\10\0\1\7\1\0\1\7\4\0\2\7"+
    "\60\0\3\7\1\0\1\7\1\153\2\0\23\153\2\0"+
    "\56\153\2\0\1\156\103\0\4\101\1\156\1\157\100\101"+
    "\10\0\1\214\1\0\1\214\1\105\36\0\1\105\43\0"+
    "\1\161\2\162\1\105\1\162\1\0\4\162\1\0\1\162"+
    "\11\0\1\162\1\0\2\162\1\0\1\162\6\0\1\162"+
    "\1\105\1\162\25\0\5\162\10\0\3\215\1\105\1\215"+
    "\1\0\4\215\1\0\1\215\11\0\1\215\1\0\2\215"+
    "\1\0\1\215\6\0\1\215\1\105\1\215\25\0\5\215"+
    "\10\0\1\216\1\0\1\216\1\105\1\106\2\0\2\216"+
    "\1\105\1\111\1\112\13\0\1\112\11\0\3\105\25\0"+
    "\3\216\1\106\1\216\10\0\1\164\1\0\1\164\1\0"+
    "\1\164\2\0\2\164\1\105\27\0\1\105\1\0\1\105"+
    "\25\0\5\164\10\0\1\164\1\0\1\164\1\0\1\164"+
    "\2\0\2\164\60\0\5\164\102\0\1\217\11\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\3\20\1\220\17\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\13\20\1\221\7\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\7\20\1\136\13\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\2\20"+
    "\1\136\20\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\5\20\1\222\15\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\6\20\1\223\2\20\1\224\11\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\11\20\1\225\11\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\2\20\1\142\20\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\11\20"+
    "\1\173\11\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\12\20\1\226\10\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\15\20\1\136\5\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\7\20\1\130\13\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\6\20"+
    "\1\136\14\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\15\20\1\227\5\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\11\20\1\230\11\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\7\20\1\231\13\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\3\20"+
    "\1\232\17\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\3\20\1\233\17\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\5\20\1\234\15\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\15\20\1\172\5\20\1\0\2\20\16\0\5\20"+
    "\55\0\1\235\40\0\1\236\1\0\1\236\1\105\36\0"+
    "\1\105\43\0\3\237\1\105\1\237\1\0\4\237\1\0"+
    "\1\237\11\0\1\237\1\0\2\237\1\0\1\237\6\0"+
    "\1\237\1\105\1\237\25\0\5\237\10\0\1\240\1\0"+
    "\1\240\1\105\1\106\2\0\2\240\1\105\1\111\1\112"+
    "\13\0\1\112\11\0\3\105\25\0\3\240\1\106\1\240"+
    "\103\0\1\241\10\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\4\20\1\136\16\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\1\20"+
    "\1\242\21\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\21\20\1\136\1\20"+
    "\1\0\2\20\16\0\5\20\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\11\20\1\136\11\20\1\0\2\20"+
    "\16\0\5\20\6\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\12\20\1\243\10\20\1\0\2\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\12\20"+
    "\1\244\10\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\22\20\1\172\1\0"+
    "\2\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\13\20\1\245\7\20\1\0\2\20\16\0"+
    "\5\20\6\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\3\20\1\246\17\20\1\0\2\20\16\0\5\20\6\0"+
    "\14\20\1\0\1\20\7\0\1\20\1\0\1\20\1\247"+
    "\21\20\1\0\2\20\16\0\5\20\6\0\14\20\1\0"+
    "\1\20\7\0\1\20\1\0\13\20\1\250\7\20\1\0"+
    "\2\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\15\20\1\251\5\20\1\0\2\20\16\0"+
    "\5\20\6\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\11\20\1\252\11\20\1\0\2\20\16\0\5\20\44\0"+
    "\1\253\51\0\1\254\1\0\1\254\1\105\36\0\1\105"+
    "\43\0\3\255\1\105\1\255\1\0\4\255\1\0\1\255"+
    "\11\0\1\255\1\0\2\255\1\0\1\255\6\0\1\255"+
    "\1\105\1\255\25\0\5\255\10\0\1\256\1\0\1\256"+
    "\1\105\1\106\2\0\2\256\1\105\1\111\1\112\13\0"+
    "\1\112\11\0\3\105\25\0\3\256\1\106\1\256\102\0"+
    "\1\257\11\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\10\20\1\136\12\20\1\0\2\20\16\0\5\20\6\0"+
    "\14\20\1\0\1\20\7\0\1\20\1\0\10\20\1\260"+
    "\12\20\1\0\2\20\16\0\5\20\6\0\14\20\1\0"+
    "\1\20\7\0\1\20\1\0\5\20\1\136\15\20\1\0"+
    "\2\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\14\20\1\261\6\20\1\0\2\20\16\0"+
    "\5\20\6\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\10\20\1\262\12\20\1\0\2\20\16\0\5\20\6\0"+
    "\14\20\1\0\1\20\7\0\1\20\1\0\11\20\1\263"+
    "\11\20\1\0\2\20\16\0\5\20\6\0\14\20\1\0"+
    "\1\20\7\0\1\20\1\0\15\20\1\223\5\20\1\0"+
    "\2\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\15\20\1\264\5\20\1\0\2\20\16\0"+
    "\5\20\6\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\12\20\1\265\10\20\1\0\2\20\16\0\5\20\36\0"+
    "\1\266\57\0\1\267\1\0\1\267\1\105\36\0\1\105"+
    "\43\0\3\270\1\105\1\270\1\0\4\270\1\0\1\270"+
    "\11\0\1\270\1\0\2\270\1\0\1\270\6\0\1\270"+
    "\1\105\1\270\25\0\5\270\10\0\1\271\1\0\1\271"+
    "\1\105\1\106\2\0\2\271\1\105\1\111\1\112\13\0"+
    "\1\112\11\0\3\105\25\0\3\271\1\106\1\271\104\0"+
    "\1\272\7\0\14\20\1\0\1\20\7\0\1\20\1\0"+
    "\13\20\1\172\7\20\1\0\2\20\16\0\5\20\6\0"+
    "\14\20\1\0\1\20\7\0\1\20\1\0\2\20\1\263"+
    "\20\20\1\0\2\20\16\0\5\20\6\0\14\20\1\0"+
    "\1\20\7\0\1\20\1\0\5\20\1\273\15\20\1\0"+
    "\2\20\16\0\5\20\6\0\14\20\1\0\1\20\7\0"+
    "\1\20\1\0\23\20\1\0\1\136\1\20\16\0\5\20"+
    "\6\0\14\20\1\0\1\20\7\0\1\20\1\0\7\20"+
    "\1\274\13\20\1\0\2\20\16\0\5\20\46\0\1\275"+
    "\47\0\1\276\1\0\1\276\1\105\36\0\1\105\43\0"+
    "\3\277\1\105\1\277\1\0\4\277\1\0\1\277\11\0"+
    "\1\277\1\0\2\277\1\0\1\277\6\0\1\277\1\105"+
    "\1\277\25\0\5\277\10\0\1\300\1\0\1\300\1\105"+
    "\1\106\2\0\2\300\1\105\1\111\1\112\13\0\1\112"+
    "\11\0\3\105\25\0\3\300\1\106\1\300\17\0\1\301"+
    "\74\0\14\20\1\0\1\20\7\0\1\20\1\0\2\20"+
    "\1\302\20\20\1\0\2\20\16\0\5\20\6\0\14\20"+
    "\1\0\1\20\7\0\1\20\1\0\10\20\1\263\12\20"+
    "\1\0\2\20\16\0\5\20\10\0\1\303\1\0\1\303"+
    "\1\105\36\0\1\105\43\0\3\304\1\105\1\304\1\0"+
    "\4\304\1\0\1\304\11\0\1\304\1\0\2\304\1\0"+
    "\1\304\6\0\1\304\1\105\1\304\25\0\5\304\10\0"+
    "\1\305\1\0\1\305\1\105\1\106\2\0\2\305\1\105"+
    "\1\111\1\112\13\0\1\112\11\0\3\105\25\0\3\305"+
    "\1\106\1\305\105\0\1\306\6\0\14\20\1\0\1\20"+
    "\7\0\1\20\1\0\7\20\1\307\13\20\1\0\2\20"+
    "\16\0\5\20\10\0\1\310\1\0\1\310\1\105\36\0"+
    "\1\105\43\0\3\311\1\105\1\311\1\0\4\311\1\0"+
    "\1\311\11\0\1\311\1\0\2\311\1\0\1\311\6\0"+
    "\1\311\1\105\1\311\25\0\5\311\10\0\1\312\1\0"+
    "\1\312\1\105\1\106\2\0\2\312\1\105\1\111\1\112"+
    "\13\0\1\112\11\0\3\105\25\0\3\312\1\106\1\312"+
    "\102\0\1\313\11\0\14\20\1\0\1\20\7\0\1\20"+
    "\1\0\16\20\1\136\4\20\1\0\2\20\16\0\5\20"+
    "\10\0\1\314\1\0\1\314\1\105\36\0\1\105\43\0"+
    "\3\315\1\105\1\315\1\0\4\315\1\0\1\315\11\0"+
    "\1\315\1\0\2\315\1\0\1\315\6\0\1\315\1\105"+
    "\1\315\25\0\5\315\10\0\1\316\1\0\1\316\1\105"+
    "\1\106\2\0\2\316\1\105\1\111\1\112\13\0\1\112"+
    "\11\0\3\105\25\0\3\316\1\106\1\316\104\0\1\105"+
    "\11\0\1\317\1\0\1\317\1\105\36\0\1\105\43\0"+
    "\3\320\1\105\1\320\1\0\4\320\1\0\1\320\11\0"+
    "\1\320\1\0\2\320\1\0\1\320\6\0\1\320\1\105"+
    "\1\320\25\0\5\320\10\0\1\321\1\0\1\321\1\105"+
    "\1\106\2\0\2\321\1\105\1\111\1\112\13\0\1\112"+
    "\11\0\3\105\25\0\3\321\1\106\1\321\10\0\1\322"+
    "\1\0\1\322\1\105\36\0\1\105\43\0\3\323\1\105"+
    "\1\323\1\0\4\323\1\0\1\323\11\0\1\323\1\0"+
    "\2\323\1\0\1\323\6\0\1\323\1\105\1\323\25\0"+
    "\5\323\10\0\1\324\1\0\1\324\1\105\1\106\2\0"+
    "\2\324\1\105\1\111\1\112\13\0\1\112\11\0\3\105"+
    "\25\0\3\324\1\106\1\324\10\0\1\325\1\0\1\325"+
    "\1\105\36\0\1\105\43\0\3\326\1\105\1\326\1\0"+
    "\4\326\1\0\1\326\11\0\1\326\1\0\2\326\1\0"+
    "\1\326\6\0\1\326\1\105\1\326\25\0\5\326\10\0"+
    "\1\327\1\0\1\327\1\105\1\106\2\0\2\327\1\105"+
    "\1\111\1\112\13\0\1\112\11\0\3\105\25\0\3\327"+
    "\1\106\1\327\10\0\1\330\1\0\1\330\1\105\36\0"+
    "\1\105\43\0\3\331\1\105\1\331\1\0\4\331\1\0"+
    "\1\331\11\0\1\331\1\0\2\331\1\0\1\331\6\0"+
    "\1\331\1\105\1\331\25\0\5\331\10\0\1\332\1\0"+
    "\1\332\1\105\1\106\2\0\2\332\1\105\1\111\1\112"+
    "\13\0\1\112\11\0\3\105\25\0\3\332\1\106\1\332"+
    "\10\0\1\333\1\0\1\333\1\105\36\0\1\105\43\0"+
    "\3\334\1\105\1\334\1\0\4\334\1\0\1\334\11\0"+
    "\1\334\1\0\2\334\1\0\1\334\6\0\1\334\1\105"+
    "\1\334\25\0\5\334\10\0\1\335\1\0\1\335\1\105"+
    "\1\106\2\0\2\335\1\105\1\111\1\112\13\0\1\112"+
    "\11\0\3\105\25\0\3\335\1\106\1\335\10\0\1\336"+
    "\1\0\1\336\1\105\36\0\1\105\43\0\3\337\1\105"+
    "\1\337\1\0\4\337\1\0\1\337\11\0\1\337\1\0"+
    "\2\337\1\0\1\337\6\0\1\337\1\105\1\337\25\0"+
    "\5\337\10\0\1\340\1\0\1\340\1\105\1\106\2\0"+
    "\2\340\1\105\1\111\1\112\13\0\1\112\11\0\3\105"+
    "\25\0\3\340\1\106\1\340\10\0\1\341\1\0\1\341"+
    "\1\105\36\0\1\105\43\0\3\342\1\105\1\342\1\0"+
    "\4\342\1\0\1\342\11\0\1\342\1\0\2\342\1\0"+
    "\1\342\6\0\1\342\1\105\1\342\25\0\5\342\10\0"+
    "\1\343\1\0\1\343\1\105\1\106\2\0\2\343\1\105"+
    "\1\111\1\112\13\0\1\112\11\0\3\105\25\0\3\343"+
    "\1\106\1\343\10\0\1\344\1\0\1\344\1\105\36\0"+
    "\1\105\46\0\1\105\36\0\1\105\43\0\1\345\1\0"+
    "\1\345\1\105\1\106\2\0\2\345\1\105\1\111\1\112"+
    "\13\0\1\112\11\0\3\105\25\0\3\345\1\106\1\345"+
    "\10\0\1\346\1\0\1\346\1\105\36\0\1\105\43\0"+
    "\1\347\1\0\1\347\1\105\1\106\2\0\2\347\1\105"+
    "\1\111\1\112\13\0\1\112\11\0\3\105\25\0\3\347"+
    "\1\106\1\347\10\0\1\350\1\0\1\350\1\105\36\0"+
    "\1\105\43\0\1\351\1\0\1\351\1\105\1\106\2\0"+
    "\2\351\1\105\1\111\1\112\13\0\1\112\11\0\3\105"+
    "\25\0\3\351\1\106\1\351\10\0\1\352\1\0\1\352"+
    "\1\105\36\0\1\105\43\0\1\353\1\0\1\353\1\105"+
    "\1\106\2\0\2\353\1\105\1\111\1\112\13\0\1\112"+
    "\11\0\3\105\25\0\3\353\1\106\1\353\10\0\1\354"+
    "\1\0\1\354\1\105\36\0\1\105\43\0\1\106\1\0"+
    "\1\106\1\105\1\106\2\0\2\106\1\105\1\111\1\112"+
    "\13\0\1\112\11\0\3\105\25\0\5\106\10\0\1\355"+
    "\1\0\1\355\1\105\36\0\1\105\43\0\1\356\1\0"+
    "\1\356\1\105\36\0\1\105\43\0\1\357\1\0\1\357"+
    "\1\105\36\0\1\105\43\0\1\360\1\0\1\360\1\105"+
    "\36\0\1\105\43\0\1\361\1\0\1\361\1\105\36\0"+
    "\1\105\43\0\1\362\1\0\1\362\1\105\36\0\1\105"+
    "\43\0\1\363\1\0\1\363\1\105\36\0\1\105\43\0"+
    "\1\364\1\0\1\364\1\105\36\0\1\105\43\0\1\365"+
    "\1\0\1\365\1\105\36\0\1\105\43\0\1\366\1\0"+
    "\1\366\1\105\36\0\1\105\43\0\1\367\1\0\1\367"+
    "\1\105\36\0\1\105\43\0\1\370\1\0\1\370\1\105"+
    "\36\0\1\105\43\0\1\371\1\0\1\371\1\105\36\0"+
    "\1\105\43\0\1\372\1\0\1\372\1\105\36\0\1\105"+
    "\43\0\1\373\1\0\1\373\1\105\36\0\1\105\43\0"+
    "\1\374\1\0\1\374\1\105\36\0\1\105\43\0\1\375"+
    "\1\0\1\375\1\105\36\0\1\105\43\0\1\376\1\0"+
    "\1\376\1\105\36\0\1\105\43\0\1\377\1\0\1\377"+
    "\1\105\36\0\1\105\43\0\1\u0100\1\0\1\u0100\1\105"+
    "\36\0\1\105\43\0\1\u0101\1\0\1\u0101\1\105\36\0"+
    "\1\105\43\0\1\u0102\1\0\1\u0102\1\105\36\0\1\105"+
    "\43\0\1\u0103\1\0\1\u0103\1\105\36\0\1\105\43\0"+
    "\1\u0104\1\0\1\u0104\1\105\36\0\1\105\43\0\1\u0105"+
    "\1\0\1\u0105\1\105\36\0\1\105\43\0\1\u0106\1\0"+
    "\1\u0106\1\105\36\0\1\105\43\0\1\u0107\1\0\1\u0107"+
    "\1\105\36\0\1\105\43\0\1\u0108\1\0\1\u0108\1\105"+
    "\36\0\1\105\43\0\1\u0109\1\0\1\u0109\1\105\36\0"+
    "\1\105\43\0\1\u010a\1\0\1\u010a\1\105\36\0\1\105"+
    "\43\0\1\u010b\1\0\1\u010b\1\105\36\0\1\105\43\0"+
    "\1\u010c\1\0\1\u010c\1\105\36\0\1\105\43\0\1\u010d"+
    "\1\0\1\u010d\1\105\36\0\1\105\43\0\1\u010e\1\0"+
    "\1\u010e\1\105\36\0\1\105\43\0\1\u010f\1\0\1\u010f"+
    "\1\105\36\0\1\105\43\0\1\u0110\1\0\1\u0110\1\105"+
    "\36\0\1\105\43\0\1\u0111\1\0\1\u0111\1\105\36\0"+
    "\1\105\43\0\1\u0112\1\0\1\u0112\1\105\36\0\1\105"+
    "\43\0\1\u0113\1\0\1\u0113\1\105\36\0\1\105\43\0"+
    "\1\u0114\1\0\1\u0114\1\105\36\0\1\105\43\0\1\u0115"+
    "\1\0\1\u0115\1\105\36\0\1\105\43\0\1\u0116\1\0"+
    "\1\u0116\1\105\36\0\1\105\43\0\1\342\1\0\1\342"+
    "\1\105\36\0\1\105\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\3\1\1\11\1\1\1\11\7\1\2\11"+
    "\3\1\1\11\14\1\1\11\1\1\6\11\6\1\1\11"+
    "\3\1\1\11\1\1\3\0\2\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\30\1\1\0\1\11\4\1\1\11\1\1"+
    "\1\11\1\0\5\1\2\0\24\1\1\0\3\1\1\0"+
    "\15\1\1\0\3\1\1\0\11\1\1\0\3\1\1\0"+
    "\6\1\1\0\3\1\1\0\2\1\1\11\3\1\1\0"+
    "\4\1\1\0\4\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\25\1\37\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //================ >> user code
    
    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;
    private static final byte INTERPOLATION = 4;
    private static final byte STATEMENT     = 5;
    
    public WebitScriptLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private LinkedList<Token> caches = new LinkedList<Token>();

    private void addToken(Token token){
        caches.add(token);
    }
    
    private void resetStart(){
        //back the point;
        
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;

        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;

        tokenStart = yychar; tokenLength = 0;
        yybegin(YYTEXT);
    }
    

    public Token yylex() throws java.io.IOException {
        if(caches.isEmpty() == false){
            return caches.pollFirst();
        }
        Token token = _yylex();
        tokenStart = yychar+yylength(); tokenLength = 0;
        if(caches.isEmpty() == false){
            caches.addLast(token);
            return caches.pollFirst();
        }else{
            return token;
        }
    }

    private boolean interpolationFlag = false;
    
    private Token popTextStatementSymbol(boolean interpolationFlag){
        this.interpolationFlag = interpolationFlag;
        yybegin(YYSTATEMENT);
        if(tokenLength!=0){
            addToken(token(TokenType.TEXT_BLOCK, tokenStart, tokenLength));
        }
        return new Token(TokenType.TEXT_DELIMITER,  yychar() + offset + yylength()-2,2,(byte) (interpolationFlag? INTERPOLATION : STATEMENT));
    }

    //================ << user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WebitScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public WebitScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token _yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 26: break;
        case 11: 
          { return token(TokenType.KEYWORD);
          }
        case 27: break;
        case 7: 
          { return token(TokenType.NUMBER);
          }
        case 28: break;
        case 5: 
          { return token(TokenType.OPERATOR);
          }
        case 29: break;
        case 10: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 30: break;
        case 17: 
          { yybegin(YYSTATEMENT); /* length also includes the trailing quote */ return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 31: break;
        case 2: 
          { tokenLength += yylength();
          }
        case 32: break;
        case 19: 
          { int length = yylength()-2; if(length%2 == 0){tokenLength +=length; return popTextStatementSymbol(false);} else {tokenLength += yylength();}
          }
        case 33: break;
        case 18: 
          { yybegin(YYSTATEMENT);
          }
        case 34: break;
        case 9: 
          { yybegin(CHARLITERAL); tokenStart = yychar; tokenLength = 1;
          }
        case 35: break;
        case 16: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 36: break;
        case 12: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 37: break;
        case 25: 
          { return token(TokenType.KEYWORD2);
          }
        case 38: break;
        case 6: 
          { return token(TokenType.IDENTIFIER);
          }
        case 39: break;
        case 24: 
          { yybegin(YYSTATEMENT);
                                     /* length also includes the trailing quote*/
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 40: break;
        case 23: 
          { tokenLength += 2;
          }
        case 41: break;
        case 20: 
          { int length = yylength()-2; if(length%2 == 0){tokenLength +=length; return popTextStatementSymbol(true);} else {tokenLength += yylength();}
          }
        case 42: break;
        case 14: 
          { if(!interpolationFlag){return token(TokenType.OPERATOR, -CURLY);}else{yybegin(YYTEXT); tokenStart = yychar+yylength(); tokenLength=0;return token(TokenType.TEXT_DELIMITER, -INTERPOLATION);}
          }
        case 43: break;
        case 22: 
          { yybegin(YYTEXT); tokenStart = yychar+yylength(); tokenLength=0;  return token(TokenType.TEXT_DELIMITER, -STATEMENT);
          }
        case 44: break;
        case 15: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 45: break;
        case 21: 
          { return token(TokenType.COMMENT);
          }
        case 46: break;
        case 8: 
          { yybegin(STRING); tokenStart = yychar; tokenLength = 1;
          }
        case 47: break;
        case 1: 
          { resetStart();
          }
        case 48: break;
        case 4: 
          { /* ignore */
          }
        case 49: break;
        case 3: 
          { 
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              if(tokenLength!=0){addToken(token(TokenType.STRING, tokenStart, tokenLength));} return null;
            }
            case 279: break;
            case YYINITIAL: {
              return null;
            }
            case 280: break;
            case CHARLITERAL: {
              if(tokenLength!=0){addToken(token(TokenType.STRING, tokenStart, tokenLength));} return null;
            }
            case 281: break;
            case YYTEXT: {
              if(tokenLength!=0){addToken(token(TokenType.TEXT_BLOCK, tokenStart, tokenLength));} return null;
            }
            case 282: break;
            default:
              {
                return null;
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
