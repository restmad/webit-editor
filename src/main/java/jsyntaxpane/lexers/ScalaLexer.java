/* The following code was generated by JFlex 1.4.3 on 14-3-27 ÏÂÎç10:25 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;

import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-27 ÏÂÎç10:25 from the specification file
 * <tt>F:/Workspace/r095/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/scala.flex</tt>
 */
public final class ScalaLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int JDOC_TAG = 8;
  public static final int JDOC = 6;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\110"+
    "\1\24\1\0\1\6\1\110\1\112\1\25\1\76\1\77\1\5\1\114"+
    "\1\104\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\111"+
    "\1\104\1\107\1\105\1\106\1\104\1\115\1\56\1\61\1\62\1\14"+
    "\1\22\1\20\1\75\1\116\1\63\2\116\1\12\1\116\1\66\1\64"+
    "\1\67\1\116\1\73\1\55\1\71\1\116\1\65\1\74\1\13\2\116"+
    "\1\102\1\26\1\103\1\110\1\6\1\0\1\40\1\51\1\41\1\27"+
    "\1\30\1\31\1\43\1\44\1\32\1\60\1\42\1\46\1\33\1\45"+
    "\1\35\1\34\1\70\1\36\1\47\1\37\1\52\1\54\1\50\1\57"+
    "\1\53\1\72\1\100\1\113\1\101\1\104\41\7\2\0\4\6\4\0"+
    "\1\116\2\0\1\7\7\0\1\116\4\0\1\116\5\0\27\116\1\0"+
    "\37\116\1\0\u01ca\116\4\0\14\116\16\0\5\116\7\0\1\116\1\0"+
    "\1\116\21\0\160\7\5\116\1\0\2\116\2\0\4\116\10\0\1\116"+
    "\1\0\3\116\1\0\1\116\1\0\24\116\1\0\123\116\1\0\213\116"+
    "\1\0\5\7\2\0\236\116\11\0\46\116\2\0\1\116\7\0\47\116"+
    "\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7"+
    "\10\0\33\116\5\0\3\116\15\0\4\7\7\0\1\6\4\0\13\7"+
    "\5\0\53\116\37\7\4\0\2\116\1\7\143\116\1\0\1\116\10\7"+
    "\1\0\6\7\2\116\2\7\1\0\4\7\2\116\12\7\3\116\2\0"+
    "\1\116\17\0\1\7\1\116\1\7\36\116\33\7\2\0\131\116\13\7"+
    "\1\116\16\0\12\7\41\116\11\7\2\116\4\0\1\116\5\0\26\116"+
    "\4\7\1\116\11\7\1\116\3\7\1\116\5\7\22\0\31\116\3\7"+
    "\244\0\4\7\66\116\3\7\1\116\22\7\1\116\7\7\12\116\2\7"+
    "\2\0\12\7\1\0\7\116\1\0\7\116\1\0\3\7\1\0\10\116"+
    "\2\0\2\116\2\0\26\116\1\0\7\116\1\0\1\116\3\0\4\116"+
    "\2\0\1\7\1\116\7\7\2\0\2\7\2\0\3\7\1\116\10\0"+
    "\1\7\4\0\2\116\1\0\3\116\2\7\2\0\12\7\2\116\2\6"+
    "\7\0\1\6\5\0\3\7\1\0\6\116\4\0\2\116\2\0\26\116"+
    "\1\0\7\116\1\0\2\116\1\0\2\116\1\0\2\116\2\0\1\7"+
    "\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\116"+
    "\1\0\1\116\7\0\14\7\3\116\1\7\13\0\3\7\1\0\11\116"+
    "\1\0\3\116\1\0\26\116\1\0\7\116\1\0\2\116\1\0\5\116"+
    "\2\0\1\7\1\116\10\7\1\0\3\7\1\0\3\7\2\0\1\116"+
    "\17\0\2\116\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\116\2\0\2\116\2\0\26\116\1\0\7\116\1\0\2\116\1\0"+
    "\5\116\2\0\1\7\1\116\7\7\2\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\116\1\0\3\116\2\7\2\0\12\7\1\0\1\116"+
    "\20\0\1\7\1\116\1\0\6\116\3\0\3\116\1\0\4\116\3\0"+
    "\2\116\1\0\1\116\1\0\2\116\3\0\2\116\3\0\3\116\3\0"+
    "\14\116\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\116\6\0"+
    "\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\116\1\0"+
    "\3\116\1\0\27\116\1\0\12\116\1\0\5\116\3\0\1\116\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\116\6\0\2\116"+
    "\2\7\2\0\12\7\22\0\2\7\1\0\10\116\1\0\3\116\1\0"+
    "\27\116\1\0\12\116\1\0\5\116\2\0\1\7\1\116\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\116\1\0\2\116\2\7"+
    "\2\0\12\7\1\0\2\116\17\0\2\7\1\0\10\116\1\0\3\116"+
    "\1\0\51\116\2\0\1\116\7\7\1\0\3\7\1\0\4\7\1\116"+
    "\10\0\1\7\10\0\2\116\2\7\2\0\12\7\12\0\6\116\2\0"+
    "\2\7\1\0\22\116\3\0\30\116\1\0\11\116\1\0\1\116\2\0"+
    "\7\116\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0"+
    "\2\7\15\0\60\116\1\7\2\116\7\7\4\0\1\6\7\116\10\7"+
    "\1\0\12\7\47\0\2\116\1\0\1\116\2\0\2\116\1\0\1\116"+
    "\2\0\1\116\6\0\4\116\1\0\7\116\1\0\3\116\1\0\1\116"+
    "\1\0\1\116\2\0\2\116\1\0\4\116\1\7\2\116\6\7\1\0"+
    "\2\7\1\116\2\0\5\116\1\0\1\116\1\0\6\7\2\0\12\7"+
    "\2\0\2\116\42\0\1\116\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\116\1\0\44\116\4\0"+
    "\24\7\1\0\2\7\5\116\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\116\24\7\1\116\12\7\6\0\6\116\4\7\4\116\3\7\1\116"+
    "\3\7\2\116\7\7\3\116\4\7\15\116\14\7\1\116\17\7\2\0"+
    "\46\116\12\0\53\116\1\0\1\116\3\0\u0149\116\1\0\4\116\2\0"+
    "\7\116\1\0\1\116\1\0\4\116\2\0\51\116\1\0\4\116\2\0"+
    "\41\116\1\0\4\116\2\0\7\116\1\0\1\116\1\0\4\116\2\0"+
    "\17\116\1\0\71\116\1\0\4\116\2\0\103\116\2\0\3\7\40\0"+
    "\20\116\20\0\125\116\14\0\u026c\116\2\0\21\116\1\0\32\116\5\0"+
    "\113\116\3\0\3\6\17\0\15\116\1\0\4\116\3\7\13\0\22\116"+
    "\3\7\13\0\22\116\2\7\14\0\15\116\1\0\3\116\1\0\2\7"+
    "\14\0\64\116\40\7\3\0\1\116\3\0\1\6\1\116\1\7\2\0"+
    "\12\7\41\0\3\7\2\0\12\7\6\0\130\116\10\0\51\116\1\7"+
    "\1\116\5\0\106\116\12\0\35\116\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\116\2\0\5\116\13\0\54\116\4\0\21\7\7\116\2\7"+
    "\6\0\12\7\46\0\27\116\5\7\4\0\65\116\12\7\1\0\35\7"+
    "\2\0\13\7\6\0\12\7\15\0\1\116\130\0\5\7\57\116\21\7"+
    "\7\116\4\0\12\7\21\0\11\7\14\0\3\7\36\116\12\7\3\0"+
    "\2\116\12\7\6\0\46\116\16\7\14\0\44\116\24\7\10\0\12\7"+
    "\3\0\3\116\12\7\44\116\122\0\3\7\1\0\25\7\4\116\1\7"+
    "\4\116\1\7\15\0\300\116\47\7\25\0\4\7\u0116\116\2\0\6\116"+
    "\2\0\46\116\2\0\6\116\2\0\10\116\1\0\1\116\1\0\1\116"+
    "\1\0\1\116\1\0\37\116\2\0\65\116\1\0\7\116\1\0\1\116"+
    "\3\0\3\116\1\0\7\116\3\0\4\116\2\0\6\116\4\0\15\116"+
    "\5\0\3\116\1\0\7\116\16\0\5\7\32\0\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\116\15\0\1\116"+
    "\20\0\15\116\3\0\32\6\26\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\116\4\0\1\116\2\0\12\116\1\0\1\116\3\0\5\116"+
    "\6\0\1\116\1\0\1\116\1\0\1\116\1\0\4\116\1\0\13\116"+
    "\2\0\4\116\5\0\5\116\4\0\1\116\21\0\43\6\2\116\4\6"+
    "\u0a77\0\57\116\1\0\57\116\1\0\205\116\6\0\4\116\3\7\16\0"+
    "\46\116\12\0\66\116\11\0\1\116\17\0\1\7\27\116\11\0\7\116"+
    "\1\0\7\116\1\0\7\116\1\0\7\116\1\0\7\116\1\0\7\116"+
    "\1\0\7\116\1\0\7\116\1\0\40\7\57\0\1\116\u01d5\0\2\116"+
    "\1\6\31\0\11\6\6\7\1\0\5\116\2\0\3\6\2\116\4\0"+
    "\126\116\2\0\2\7\2\0\3\116\1\0\132\116\1\0\4\116\5\0"+
    "\51\116\3\0\136\116\21\0\33\116\65\0\20\116\u0200\0\u19b6\116\112\0"+
    "\u51cc\116\64\0\u048d\116\103\0\56\116\2\0\u010d\116\3\0\20\116\12\7"+
    "\2\116\24\0\57\116\1\7\14\0\2\7\1\0\31\116\10\0\106\116"+
    "\12\6\2\7\45\0\11\116\2\0\147\116\2\0\4\116\1\0\2\116"+
    "\16\0\12\116\120\0\10\116\1\7\3\116\1\7\4\116\1\7\27\116"+
    "\5\7\20\0\1\6\7\0\64\116\14\0\2\7\62\116\21\7\13\0"+
    "\12\7\6\0\22\7\6\116\3\0\1\116\4\0\12\7\34\116\10\7"+
    "\2\0\27\116\15\7\14\0\35\116\3\0\4\7\57\116\16\7\16\0"+
    "\1\116\12\7\46\0\51\116\16\7\11\0\3\116\1\7\10\116\2\7"+
    "\2\0\12\7\6\0\27\116\3\0\1\116\1\7\4\0\60\116\1\7"+
    "\1\116\3\7\2\116\2\7\5\116\2\7\1\116\1\7\1\116\30\0"+
    "\3\116\43\0\6\116\2\0\6\116\2\0\6\116\11\0\7\116\1\0"+
    "\7\116\221\0\43\116\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\116"+
    "\14\0\27\116\4\0\61\116\u2104\0\u012e\116\2\0\76\116\2\0\152\116"+
    "\46\0\7\116\14\0\5\116\5\0\1\116\1\7\12\116\1\0\15\116"+
    "\1\0\5\116\1\0\1\116\1\0\2\116\1\0\2\116\1\0\154\116"+
    "\41\0\u016b\116\22\0\100\116\2\0\66\116\50\0\14\116\1\6\3\0"+
    "\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\116\1\0\207\116\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\116\4\0\1\6\1\0\32\116\13\0\131\116\3\0\6\116\2\0"+
    "\6\116\2\0\6\116\2\0\3\116\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\3\1\2\2\1\3\2\4\2\3\1\2\1\3"+
    "\1\2\1\5\1\6\36\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\6\2\1\15\2\16\1\17\1\1\1\15"+
    "\1\1\2\20\1\21\2\22\1\15\1\23\1\0\3\4"+
    "\1\0\3\4\1\0\4\3\1\24\6\3\1\24\51\3"+
    "\1\2\1\25\2\15\1\26\1\15\2\23\1\0\1\27"+
    "\4\4\1\0\55\3\2\0\2\4\25\3\1\30\13\3"+
    "\2\4\1\31\1\3\1\24\17\3\2\4\5\3\1\24"+
    "\4\3\2\4\1\32\3\3\1\33\2\4\2\3\2\4"+
    "\3\3\2\4\2\3\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u018b\0\u018b\0\u058e\0\u05dd\0\u062c\0\u067b"+
    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3"+
    "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b"+
    "\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3"+
    "\0\u0e32\0\u0e81\0\u018b\0\u018b\0\u018b\0\u018b\0\u018b\0\u018b"+
    "\0\u018b\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c\0\u105b\0\u10aa"+
    "\0\u018b\0\u018b\0\u10f9\0\u1148\0\u1197\0\u018b\0\u11e6\0\u018b"+
    "\0\u018b\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u018b"+
    "\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9"+
    "\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861"+
    "\0\u0316\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a"+
    "\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02"+
    "\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a"+
    "\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2"+
    "\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc\0\u241b\0\u246a"+
    "\0\u24b9\0\u2508\0\u2557\0\u018b\0\u25a6\0\u25f5\0\u018b\0\u018b"+
    "\0\u2644\0\u018b\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e"+
    "\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u2a96"+
    "\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e"+
    "\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86"+
    "\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe"+
    "\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427\0\u3476"+
    "\0\u34c5\0\u3514\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f\0\u26e2"+
    "\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917"+
    "\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f"+
    "\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u0316"+
    "\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030"+
    "\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u0316\0\u420a\0\u4259"+
    "\0\u42a8\0\u42f7\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1"+
    "\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749"+
    "\0\u4798\0\u47e7\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1"+
    "\0\u4a10\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c\0\u0316\0\u4b9b\0\u4bea"+
    "\0\u4c39\0\u0316\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13"+
    "\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed\0\u503c\0\u508b"+
    "\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265\0\u52b4\0\u5303"+
    "\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c\0\u557b"+
    "\0\u55ca\0\u5619\0\u5668";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\13\1\6"+
    "\1\14\1\15\2\13\1\16\3\15\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\6\1\25\1\26\1\27\1\30"+
    "\1\13\1\31\1\32\1\33\1\34\1\35\1\36\3\13"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\2\13\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\13\1\60\1\13\1\61\1\62\1\13"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\12"+
    "\1\72\1\73\1\12\1\71\1\74\1\75\1\76\1\6"+
    "\1\13\1\77\1\100\1\101\21\77\1\102\1\77\1\103"+
    "\70\77\1\104\1\100\1\101\22\104\1\102\1\105\70\104"+
    "\5\106\1\107\107\106\1\110\1\106\5\111\1\112\4\111"+
    "\3\113\3\111\1\113\1\111\1\113\4\111\47\113\20\111"+
    "\1\113\121\0\1\6\117\0\1\10\117\0\1\114\1\115"+
    "\77\0\1\71\116\0\1\71\17\0\13\13\1\0\1\13"+
    "\4\0\47\13\20\0\1\13\10\0\1\116\1\117\1\120"+
    "\1\121\1\120\1\122\1\123\1\122\1\120\1\124\1\125"+
    "\4\0\1\120\1\125\1\120\14\0\1\120\10\0\1\121"+
    "\47\0\2\15\1\120\1\0\1\120\3\15\1\120\1\124"+
    "\1\125\4\0\1\120\1\125\1\120\14\0\1\120\56\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\126\40\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\17\13\1\127"+
    "\27\13\20\0\1\13\10\0\2\124\3\0\3\124\105\0"+
    "\13\13\1\0\1\13\4\0\44\13\1\130\2\13\20\0"+
    "\1\13\23\0\1\71\61\0\1\71\17\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\131\4\13\1\132\40\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\17\13\1\133"+
    "\10\13\1\134\16\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\3\13\1\135\2\13\1\136\2\13\1\137"+
    "\5\13\1\140\27\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\2\13\1\141\1\13\1\142\11\13\1\143"+
    "\30\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\144\1\13\1\145\35\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\22\13\1\146\2\13\1\147"+
    "\21\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\1\13\1\150\45\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\7\13\1\151\5\13\1\152\6\13\1\153"+
    "\22\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\22\13\1\154\24\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\11\13\1\155\3\13\1\156\31\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\23\13\1\157"+
    "\23\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\6\13\1\160\40\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\161\13\13\1\162\5\13\1\163"+
    "\23\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\3\13\1\164\11\13\1\165\31\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\166\15\13\1\167"+
    "\22\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\16\13\1\170\30\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\3\13\1\171\43\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\11\13\1\172\35\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\1\13\1\173"+
    "\6\13\1\174\4\13\1\175\31\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\7\13\1\176\37\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\6\13\1\177"+
    "\15\13\1\200\22\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\201\6\13\1\202\1\13\1\203"+
    "\27\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\16\13\1\204\30\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\22\13\1\146\24\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\205\40\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\23\13\1\206"+
    "\23\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\11\13\1\207\35\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\15\13\1\210\31\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\23\13\1\211\23\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\27\13\1\212"+
    "\17\13\20\0\1\13\105\0\1\71\1\213\115\0\1\71"+
    "\1\0\1\12\114\0\1\71\4\0\1\71\111\0\1\71"+
    "\5\0\1\71\110\0\1\71\6\0\1\71\2\0\1\77"+
    "\2\0\21\77\1\0\1\77\1\0\70\77\2\0\1\101"+
    "\114\0\2\214\1\0\5\214\1\215\4\214\2\215\1\216"+
    "\77\214\1\104\2\0\22\104\2\0\70\104\2\214\1\0"+
    "\114\214\4\0\1\217\124\0\3\113\3\0\1\113\1\0"+
    "\1\113\4\0\47\113\13\0\1\220\4\0\1\113\1\114"+
    "\1\221\1\222\114\114\5\223\1\224\111\223\10\0\1\116"+
    "\1\117\1\120\1\0\1\120\1\122\1\123\1\122\1\120"+
    "\1\124\1\125\4\0\1\120\1\125\1\120\14\0\1\120"+
    "\60\0\2\117\2\0\1\120\3\117\1\120\1\124\1\125"+
    "\4\0\1\120\1\125\1\120\75\0\1\225\1\226\2\0"+
    "\5\226\1\0\1\226\4\0\3\226\6\0\2\226\7\0"+
    "\1\226\4\0\1\226\2\0\2\226\44\0\1\227\1\117"+
    "\1\120\1\0\1\120\3\227\1\120\1\124\1\125\4\0"+
    "\1\120\1\125\1\120\14\0\1\120\60\0\1\122\1\117"+
    "\1\120\1\0\1\120\3\122\1\120\1\124\1\125\4\0"+
    "\1\120\1\125\1\120\14\0\1\120\60\0\2\124\2\0"+
    "\1\120\3\124\1\120\1\0\1\125\4\0\1\120\1\125"+
    "\1\120\75\0\2\230\3\0\3\230\3\0\1\231\70\0"+
    "\1\231\10\0\13\13\1\0\1\13\4\0\23\13\1\232"+
    "\23\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\6\13\1\233\40\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\44\13\1\234\2\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\2\13\1\141\44\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\23\13\1\235"+
    "\23\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\20\13\1\236\26\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\10\13\1\237\36\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\16\13\1\240\30\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\7\13\1\141"+
    "\37\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\17\13\1\133\27\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\241\40\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\5\13\1\162\41\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\10\13\1\141"+
    "\36\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\3\13\1\242\2\13\1\243\40\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\12\13\1\244\34\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\31\13\1\245"+
    "\15\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\1\13\1\246\45\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\10\13\1\247\36\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\23\13\1\236\1\141\22\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\1\13"+
    "\1\250\1\13\1\251\3\13\1\252\37\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\5\13\1\236\41\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\20\13"+
    "\1\253\26\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\10\13\1\254\36\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\11\13\1\136\35\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\17\13\1\255\27\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\16\13"+
    "\1\256\30\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\11\13\1\257\35\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\6\13\1\260\40\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\5\13\1\261\41\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\10\13"+
    "\1\262\36\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\3\13\1\263\43\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\6\13\1\264\40\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\10\13\1\236\36\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\3\13"+
    "\1\143\43\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\1\13\1\265\45\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\7\13\1\141\7\13\1\141\27\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\7\13"+
    "\1\266\37\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\7\13\1\267\37\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\6\13\1\270\40\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\7\13\1\271\37\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\6\13"+
    "\1\272\40\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\10\13\1\273\36\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\4\13\1\274\42\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\275\35\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\6\13"+
    "\1\276\2\13\1\277\35\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\10\13\1\300\36\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\3\13\1\301\43\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\4\13"+
    "\1\302\42\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\12\13\1\303\34\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\7\13\1\304\37\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\16\13\1\305\30\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\44\13"+
    "\1\306\2\13\20\0\1\13\105\0\1\71\1\12\20\0"+
    "\1\216\4\0\3\216\107\0\1\220\4\0\3\220\101\0"+
    "\1\222\114\0\5\223\1\307\111\223\4\0\1\222\1\310"+
    "\121\0\1\225\1\226\1\120\1\0\5\226\1\0\1\226"+
    "\4\0\3\226\6\0\2\226\4\0\1\120\2\0\1\226"+
    "\4\0\1\226\2\0\2\226\44\0\2\311\1\120\1\0"+
    "\5\311\1\0\1\311\4\0\3\311\6\0\2\311\4\0"+
    "\1\120\2\0\1\311\4\0\1\311\2\0\2\311\44\0"+
    "\1\312\1\117\1\120\1\0\1\120\3\312\1\120\1\124"+
    "\1\125\4\0\1\120\1\125\1\120\14\0\1\120\60\0"+
    "\2\230\2\0\1\120\3\230\1\120\6\0\1\120\1\0"+
    "\1\120\75\0\2\230\3\0\3\230\105\0\13\13\1\0"+
    "\1\13\4\0\22\13\1\313\24\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\11\13\1\314\35\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\35\13\1\315"+
    "\11\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\22\13\1\263\24\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\141\45\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\13\1\316\45\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\11\13\1\317"+
    "\35\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\11\13\1\143\35\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\16\13\1\320\6\13\1\321\21\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\10\13\1\322"+
    "\36\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\13\13\1\323\33\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\324\45\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\7\13\1\325\37\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\23\13\1\326"+
    "\23\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\16\13\1\141\30\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\20\13\1\141\26\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\327\40\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\10\13\1\330"+
    "\36\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\12\13\1\262\34\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\17\13\1\141\27\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\14\13\1\141\32\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\17\13\1\331"+
    "\27\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\143\37\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\136\45\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\15\13\1\141\31\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\17\13\1\236"+
    "\27\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\17\13\1\332\27\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\17\13\1\333\27\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\3\13\1\334\43\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\3\13\1\335"+
    "\43\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\314\37\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\11\13\1\336\35\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\17\13\1\337\27\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\1\13\1\340"+
    "\45\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\5\13\1\341\41\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\7\13\1\342\37\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\16\13\1\343\30\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\20\13\1\344"+
    "\26\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\1\13\1\345\45\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\340\46\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\22\13\1\346\24\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\13\13\1\347\33\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\1\13"+
    "\1\350\4\13\1\351\40\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\16\13\1\352\30\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\37\13\1\353\7\13"+
    "\20\0\1\13\4\223\1\222\1\307\111\223\10\0\2\354"+
    "\1\120\1\0\5\354\1\0\1\354\4\0\3\354\6\0"+
    "\2\354\4\0\1\120\2\0\1\354\4\0\1\354\2\0"+
    "\2\354\44\0\1\355\1\117\1\120\1\0\1\120\3\355"+
    "\1\120\1\124\1\125\4\0\1\120\1\125\1\120\14\0"+
    "\1\120\56\0\13\13\1\0\1\13\4\0\17\13\1\273"+
    "\27\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\10\13\1\340\36\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\44\13\1\356\2\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\16\13\1\357\30\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\17\13\1\360"+
    "\27\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\10\13\1\361\36\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\11\13\1\167\35\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\13\1\362\45\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\11\13\1\363"+
    "\35\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\12\13\1\314\34\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\7\13\1\364\37\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\7\13\1\250\37\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\21\13\1\141"+
    "\25\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\365\37\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\333\45\13\20\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\13\1\366\45\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\1\141\46\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\367\35\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\16\13\1\370\30\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\24\13\1\141\22\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\1\13\1\371\45\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\372\35\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\11\13\1\373\14\13\1\374\20\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\1\13\1\352\45\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\20\13"+
    "\1\340\26\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\14\13\1\346\32\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\1\13\1\375\45\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\376\35\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\301\35\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\21\13\1\352\25\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\11\13\1\232\35\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\34\13\1\377\12\13"+
    "\20\0\1\13\10\0\2\u0100\1\120\1\0\5\u0100\1\0"+
    "\1\u0100\4\0\3\u0100\6\0\2\u0100\4\0\1\120\2\0"+
    "\1\u0100\4\0\1\u0100\2\0\2\u0100\44\0\1\u0101\1\117"+
    "\1\120\1\0\1\120\3\u0101\1\120\1\124\1\125\4\0"+
    "\1\120\1\125\1\120\14\0\1\120\56\0\13\13\1\0"+
    "\1\13\4\0\1\251\46\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\17\13\1\336\27\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\17\13\1\u0102\27\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\12\13"+
    "\1\u0103\34\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\14\13\1\236\32\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\3\13\1\u0104\43\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\u0105\35\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\250\35\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\17\13\1\u0106\27\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\14\13\1\u0107\32\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\u0108\35\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\7\13"+
    "\1\352\37\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\12\13\1\u0109\34\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\1\13\1\u010a\45\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\7\13\1\340\37\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\14\13"+
    "\1\273\32\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\37\13\1\u010b\7\13\20\0\1\13\10\0\2\u010c"+
    "\1\120\1\0\5\u010c\1\0\1\u010c\4\0\3\u010c\6\0"+
    "\2\u010c\4\0\1\120\2\0\1\u010c\4\0\1\u010c\2\0"+
    "\2\u010c\44\0\1\u010d\1\117\1\120\1\0\1\120\3\u010d"+
    "\1\120\1\124\1\125\4\0\1\120\1\125\1\120\14\0"+
    "\1\120\56\0\13\13\1\0\1\13\4\0\16\13\1\u010e"+
    "\30\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\10\13\1\331\36\13\20\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\236\46\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\12\13\1\143\34\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\3\13\1\u010f\43\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\32\13"+
    "\1\u0110\14\13\20\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\16\13\1\340\30\13\20\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\10\13\1\346\36\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\41\13\1\u0111\5\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\46\13"+
    "\1\u0112\20\0\1\13\10\0\2\u0113\1\120\1\0\5\u0113"+
    "\1\0\1\u0113\4\0\3\u0113\6\0\2\u0113\4\0\1\120"+
    "\2\0\1\u0113\4\0\1\u0113\2\0\2\u0113\44\0\1\u0114"+
    "\1\117\1\120\1\0\1\120\3\u0114\1\120\1\124\1\125"+
    "\4\0\1\120\1\125\1\120\14\0\1\120\56\0\13\13"+
    "\1\0\1\13\4\0\43\13\1\352\3\13\20\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\23\13\1\u0115\23\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\23\13"+
    "\1\u0116\23\13\20\0\1\13\10\0\2\u0117\1\120\1\0"+
    "\5\u0117\1\0\1\u0117\4\0\3\u0117\6\0\2\u0117\4\0"+
    "\1\120\2\0\1\u0117\4\0\1\u0117\2\0\2\u0117\44\0"+
    "\1\u0118\1\117\1\120\1\0\1\120\3\u0118\1\120\1\124"+
    "\1\125\4\0\1\120\1\125\1\120\14\0\1\120\56\0"+
    "\13\13\1\0\1\13\4\0\2\13\1\u0119\1\u011a\43\13"+
    "\20\0\1\13\6\0\13\13\1\0\1\13\4\0\1\13"+
    "\1\u011b\45\13\20\0\1\13\10\0\2\u011c\1\120\1\0"+
    "\5\u011c\1\0\1\u011c\4\0\3\u011c\6\0\2\u011c\4\0"+
    "\1\120\2\0\1\u011c\4\0\1\u011c\2\0\2\u011c\44\0"+
    "\1\u011d\1\117\1\120\1\0\1\120\3\u011d\1\120\1\124"+
    "\1\125\4\0\1\120\1\125\1\120\14\0\1\120\56\0"+
    "\13\13\1\0\1\13\4\0\2\13\1\346\44\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\17\13\1\u011e"+
    "\27\13\20\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\16\13\1\u011f\30\13\20\0\1\13\10\0\2\u0120\1\120"+
    "\1\0\5\u0120\1\0\1\u0120\4\0\3\u0120\6\0\2\u0120"+
    "\4\0\1\120\2\0\1\u0120\4\0\1\u0120\2\0\2\u0120"+
    "\44\0\1\u0121\1\117\1\120\1\0\1\120\3\u0121\1\120"+
    "\1\124\1\125\4\0\1\120\1\125\1\120\14\0\1\120"+
    "\56\0\13\13\1\0\1\13\4\0\1\346\46\13\20\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\12\13\1\273"+
    "\34\13\20\0\1\13\10\0\2\u0122\1\120\1\0\5\u0122"+
    "\1\0\1\u0122\4\0\3\u0122\6\0\2\u0122\4\0\1\120"+
    "\2\0\1\u0122\4\0\1\u0122\2\0\2\u0122\44\0\1\u0123"+
    "\1\117\1\120\1\0\1\120\3\u0123\1\120\1\124\1\125"+
    "\4\0\1\120\1\125\1\120\14\0\1\120\60\0\2\u0124"+
    "\1\120\1\0\5\u0124\1\0\1\u0124\4\0\3\u0124\6\0"+
    "\2\u0124\4\0\1\120\2\0\1\u0124\4\0\1\u0124\2\0"+
    "\2\u0124\44\0\1\u0125\1\117\1\120\1\0\1\120\3\u0125"+
    "\1\120\1\124\1\125\4\0\1\120\1\125\1\120\14\0"+
    "\1\120\60\0\2\u0126\1\120\1\0\5\u0126\1\0\1\u0126"+
    "\4\0\3\u0126\6\0\2\u0126\4\0\1\120\2\0\1\u0126"+
    "\4\0\1\u0126\2\0\2\u0126\44\0\1\u0127\1\117\1\120"+
    "\1\0\1\120\3\u0127\1\120\1\124\1\125\4\0\1\120"+
    "\1\125\1\120\14\0\1\120\60\0\2\u0128\1\120\1\0"+
    "\5\u0128\1\0\1\u0128\4\0\3\u0128\6\0\2\u0128\4\0"+
    "\1\120\2\0\1\u0128\4\0\1\u0128\2\0\2\u0128\44\0"+
    "\1\u0129\1\117\1\120\1\0\1\120\3\u0129\1\120\1\124"+
    "\1\125\4\0\1\120\1\125\1\120\14\0\1\120\60\0"+
    "\2\u012a\1\120\1\0\5\u012a\1\0\1\u012a\4\0\3\u012a"+
    "\6\0\2\u012a\4\0\1\120\2\0\1\u012a\4\0\1\u012a"+
    "\2\0\2\u012a\44\0\1\u012b\1\117\1\120\1\0\1\120"+
    "\3\u012b\1\120\1\124\1\125\4\0\1\120\1\125\1\120"+
    "\14\0\1\120\60\0\2\u012c\1\120\1\0\5\u012c\1\0"+
    "\1\u012c\4\0\3\u012c\6\0\2\u012c\4\0\1\120\2\0"+
    "\1\u012c\4\0\1\u012c\2\0\2\u012c\44\0\1\u012d\1\117"+
    "\1\120\1\0\1\120\3\u012d\1\120\1\124\1\125\4\0"+
    "\1\120\1\125\1\120\14\0\1\120\60\0\2\u012e\1\120"+
    "\1\0\5\u012e\1\0\1\u012e\4\0\3\u012e\6\0\2\u012e"+
    "\4\0\1\120\2\0\1\u012e\4\0\1\u012e\2\0\2\u012e"+
    "\44\0\1\u012f\1\117\1\120\1\0\1\120\3\u012f\1\120"+
    "\1\124\1\125\4\0\1\120\1\125\1\120\14\0\1\120"+
    "\62\0\1\120\33\0\1\120\60\0\1\u0130\1\117\1\120"+
    "\1\0\1\120\3\u0130\1\120\1\124\1\125\4\0\1\120"+
    "\1\125\1\120\14\0\1\120\60\0\1\u0131\1\117\1\120"+
    "\1\0\1\120\3\u0131\1\120\1\124\1\125\4\0\1\120"+
    "\1\125\1\120\14\0\1\120\60\0\1\u0132\1\117\1\120"+
    "\1\0\1\120\3\u0132\1\120\1\124\1\125\4\0\1\120"+
    "\1\125\1\120\14\0\1\120\60\0\1\u0133\1\117\1\120"+
    "\1\0\1\120\3\u0133\1\120\1\124\1\125\4\0\1\120"+
    "\1\125\1\120\14\0\1\120\60\0\2\117\1\120\1\0"+
    "\1\120\3\117\1\120\1\124\1\125\4\0\1\120\1\125"+
    "\1\120\14\0\1\120\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22199];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\14\1\2\11\36\1\7\11\7\1\2\11"+
    "\3\1\1\11\1\1\2\11\3\1\1\0\2\1\1\11"+
    "\1\0\3\1\1\0\66\1\1\11\2\1\2\11\1\1"+
    "\1\11\1\0\5\1\1\0\55\1\2\0\127\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public ScalaLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2284) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 28: break;
        case 20: 
          { return token(TokenType.KEYWORD);
          }
        case 29: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 30: break;
        case 18: 
          { yybegin(JDOC); 
                                     // length also includes the trailing quote
                                     int start = tokenStart;
                                     tokenStart = yychar;
                                     int len = tokenLength;
                                     tokenLength = 1;
                                     return token(TokenType.COMMENT2, start, len);
          }
        case 31: break;
        case 22: 
          { yybegin(YYINITIAL); 
                                     return token(TokenType.COMMENT, tokenStart, tokenLength + 2);
          }
        case 32: break;
        case 2: 
          { return token(TokenType.OPERATOR);
          }
        case 33: break;
        case 9: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 34: break;
        case 10: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 35: break;
        case 17: 
          { yybegin(JDOC_TAG); 
                                     int start = tokenStart;
                                     tokenStart = yychar;
                                     int len = tokenLength;
                                     tokenLength = 1;
                                     return token(TokenType.COMMENT, start, len);
          }
        case 36: break;
        case 13: 
          { tokenLength += yylength();
          }
        case 37: break;
        case 14: 
          { yybegin(YYINITIAL);
          }
        case 38: break;
        case 6: 
          { yybegin(CHARLITERAL); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 39: break;
        case 23: 
          { yybegin(JDOC); 
                                    tokenStart = yychar; 
                                    tokenLength = 3;
          }
        case 40: break;
        case 15: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 41: break;
        case 24: 
          { return token(TokenType.TYPE);
          }
        case 42: break;
        case 27: 
          { return token(TokenType.WARNING);
          }
        case 43: break;
        case 12: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 44: break;
        case 7: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 45: break;
        case 26: 
          { return token(TokenType.KEYWORD2);
          }
        case 46: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 47: break;
        case 21: 
          { tokenLength += 2;
          }
        case 48: break;
        case 25: 
          { return token(TokenType.ERROR);
          }
        case 49: break;
        case 16: 
          { tokenLength ++;
          }
        case 50: break;
        case 11: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 51: break;
        case 19: 
          { return token(TokenType.COMMENT);
          }
        case 52: break;
        case 5: 
          { yybegin(STRING); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 53: break;
        case 1: 
          { 
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
