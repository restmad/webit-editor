/* The following code was generated by JFlex 1.4.3 on 14-3-27 ÏÂÎç10:25 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This flex file originally donated to the project by HeyChinaski 
 *
 */

package jsyntaxpane.lexers;

import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-27 ÏÂÎç10:25 from the specification file
 * <tt>F:/Workspace/r095/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/xpath.flex</tt>
 */
public final class XPathLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_SINGLE = 4;
  public static final int YYINITIAL = 0;
  public static final int STRING_DOUBLE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\13\2\0\1\12\22\0\1\55\1\37\1\64\1\0"+
    "\1\11\2\0\1\65\1\56\1\57\1\10\1\35\1\35\1\5\1\6"+
    "\1\34\12\1\1\7\1\0\1\40\1\36\1\40\1\0\1\35\15\2"+
    "\1\54\2\2\1\53\2\2\1\52\6\2\1\62\1\0\1\63\1\0"+
    "\1\2\1\0\1\32\1\43\1\14\1\31\1\17\1\41\1\27\1\44"+
    "\1\26\1\46\1\51\1\42\1\16\1\20\1\15\1\23\1\45\1\24"+
    "\1\25\1\21\1\30\1\33\1\50\1\22\1\3\1\47\1\60\1\35"+
    "\1\61\71\0\1\4\10\0\27\2\1\0\37\2\1\0\10\2\62\2"+
    "\2\4\13\2\2\4\10\2\1\4\65\2\1\4\104\2\11\4\44\2"+
    "\3\4\2\2\4\4\36\2\70\4\131\2\22\4\7\2\76\4\160\4"+
    "\16\4\1\0\7\4\1\2\1\4\3\2\1\4\1\2\1\4\24\2"+
    "\1\4\54\2\1\4\7\2\3\4\1\2\1\4\1\2\1\4\1\2"+
    "\1\4\1\2\1\4\22\2\15\4\14\2\1\4\102\2\1\4\14\2"+
    "\1\4\44\2\16\4\65\2\2\4\2\2\2\4\2\2\3\4\34\2"+
    "\2\4\10\2\2\4\2\2\67\4\46\2\2\4\1\2\7\4\46\2"+
    "\111\4\33\2\5\4\3\2\56\4\32\2\6\4\12\2\46\4\107\2"+
    "\2\4\5\2\1\4\17\2\1\4\4\2\1\4\1\2\17\4\2\2"+
    "\u021e\4\65\2\3\4\1\2\32\4\12\2\43\4\10\2\2\4\2\2"+
    "\2\4\26\2\1\4\7\2\1\4\1\2\3\4\4\2\42\4\2\2"+
    "\1\4\3\2\16\4\2\2\23\4\6\2\4\4\2\2\2\4\26\2"+
    "\1\4\7\2\1\4\2\2\1\4\2\2\1\4\2\2\37\4\4\2"+
    "\1\4\1\2\23\4\3\2\20\4\7\2\1\4\1\2\1\4\3\2"+
    "\1\4\26\2\1\4\7\2\1\4\2\2\1\4\5\2\3\4\1\2"+
    "\42\4\1\2\44\4\10\2\2\4\2\2\2\4\26\2\1\4\7\2"+
    "\1\4\2\2\2\4\4\2\3\4\1\2\36\4\2\2\1\4\3\2"+
    "\43\4\6\2\3\4\3\2\1\4\4\2\3\4\2\2\1\4\1\2"+
    "\1\4\2\2\3\4\2\2\3\4\3\2\3\4\10\2\1\4\3\2"+
    "\113\4\10\2\1\4\3\2\1\4\27\2\1\4\12\2\1\4\5\2"+
    "\46\4\2\2\43\4\10\2\1\4\3\2\1\4\27\2\1\4\12\2"+
    "\1\4\5\2\44\4\1\2\1\4\2\2\43\4\10\2\1\4\3\2"+
    "\1\4\27\2\1\4\20\2\46\4\2\2\237\4\56\2\1\4\1\2"+
    "\1\4\2\2\14\4\6\2\73\4\2\2\1\4\1\2\2\4\2\2"+
    "\1\4\1\2\2\4\1\2\6\4\4\2\1\4\7\2\1\4\3\2"+
    "\1\4\1\2\1\4\1\2\2\4\2\2\1\4\2\2\1\4\1\2"+
    "\1\4\2\2\11\4\1\2\2\4\5\2\173\4\10\2\1\4\41\2"+
    "\u0136\4\46\2\12\4\47\2\11\4\1\2\1\4\2\2\1\4\3\2"+
    "\1\4\1\2\1\4\2\2\1\4\5\2\51\4\1\2\1\4\1\2"+
    "\1\4\1\2\13\4\1\2\1\4\1\2\1\4\1\2\3\4\2\2"+
    "\3\4\1\2\5\4\3\2\1\4\1\2\1\4\1\2\1\4\1\2"+
    "\1\4\1\2\3\4\2\2\3\4\2\2\1\4\1\2\50\4\1\2"+
    "\11\4\1\2\2\4\1\2\2\4\2\2\7\4\2\2\1\4\1\2"+
    "\1\4\7\2\50\4\1\2\4\4\1\2\10\4\1\2\u0c06\4\234\2"+
    "\4\4\132\2\6\4\26\2\2\4\6\2\2\4\46\2\2\4\6\2"+
    "\2\4\10\2\1\4\1\2\1\4\1\2\1\4\1\2\1\4\37\2"+
    "\2\4\65\2\1\4\7\2\1\4\1\2\3\4\3\2\1\4\7\2"+
    "\3\4\4\2\2\4\6\2\4\4\15\2\5\4\3\2\1\4\7\2"+
    "\3\4\14\0\2\4\61\0\2\4\57\0\266\4\1\2\3\4\2\2"+
    "\2\4\1\2\121\4\3\2\15\4\u0a70\0\u03f0\4\21\0\6\4\1\2"+
    "\31\4\11\2\27\4\124\2\14\4\132\2\12\4\50\2\u1cd3\4\u51a6\2"+
    "\u0c5a\4\u2ba4\2\134\4\u2100\0\u04d0\4\40\0\u020e\4\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\2\4\1\5\1\1\2\5"+
    "\15\3\1\4\1\1\1\4\6\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\0"+
    "\7\3\1\4\32\3\1\20\25\3\1\2\3\3\1\0"+
    "\12\3\1\20\1\3\1\20\46\3\1\20\45\3\1\21"+
    "\2\3\1\20\1\3\1\21\14\3\1\22\64\3\1\20"+
    "\57\3\1\20\62\3\1\20\45\3\1\22\11\3\1\22"+
    "\2\3\1\22\4\3\1\20\43\3\1\20\30\3\1\20"+
    "\23\3\1\20\61\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\242"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\242\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u010e\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u06c0"+
    "\0\u12c6\0\242\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u010e\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44"+
    "\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\u010e\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u010e"+
    "\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018"+
    "\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8"+
    "\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528"+
    "\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8"+
    "\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888"+
    "\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38"+
    "\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8"+
    "\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98"+
    "\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48"+
    "\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8"+
    "\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8"+
    "\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458"+
    "\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608"+
    "\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8"+
    "\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968"+
    "\0\u499e\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18"+
    "\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8"+
    "\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78"+
    "\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028"+
    "\0\u505e\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8"+
    "\0\u520e\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388"+
    "\0\u53be\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u5538"+
    "\0\u556e\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8"+
    "\0\u571e\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898"+
    "\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48"+
    "\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2\0\u5bf8"+
    "\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c\0\u5d72\0\u5da8"+
    "\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec\0\u5f22\0\u5f58"+
    "\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u609c\0\u60d2\0\u6108"+
    "\0\u613e\0\u6174\0\u61aa\0\u61e0\0\u2d90\0\u6216\0\u624c\0\u6282"+
    "\0\u62b8\0\u62ee\0\u6324\0\u635a\0\u6390\0\u63c6\0\u63fc\0\u6432"+
    "\0\u6468\0\u649e\0\u64d4\0\u650a\0\u6540\0\u6576\0\u65ac\0\u65e2"+
    "\0\u6618\0\u664e\0\u6684\0\u66ba\0\u66f0\0\u6726\0\u675c\0\u6792"+
    "\0\u67c8\0\u67fe\0\u6834\0\u686a\0\u68a0\0\u68d6\0\u690c\0\u6942"+
    "\0\u6978\0\u69ae\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u6abc\0\u6af2"+
    "\0\u6b28\0\u6b5e\0\u6b94\0\u6bca\0\u6c00\0\u6c36\0\u6c6c\0\u6ca2"+
    "\0\u6cd8\0\u6d0e\0\u6d44\0\u6d7a\0\u6db0\0\u6de6\0\u6e1c\0\u6e52"+
    "\0\u6e88\0\u6ebe\0\u6ef4\0\u6f2a\0\u6f60\0\u6f96\0\u6fcc\0\u7002"+
    "\0\u7038\0\u706e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\1\12"+
    "\1\10\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\6\1\24\1\25\1\26\1\27\1\6"+
    "\1\30\1\31\1\32\1\6\1\33\2\10\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\6\1\42\3\6\1\43"+
    "\1\6\1\15\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\64\54\1\55\66\54\1\55\67\0\1\5"+
    "\4\0\1\56\60\0\6\6\1\57\4\0\20\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\60\14\6"+
    "\5\0\14\6\17\0\1\10\66\0\1\10\60\0\2\61"+
    "\10\0\20\61\5\0\14\61\24\0\1\4\53\0\6\6"+
    "\1\57\4\0\1\6\1\62\1\6\1\63\10\6\1\64"+
    "\3\6\5\0\3\6\1\65\10\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\66\3\6\1\67\7\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\70\10\6\1\71"+
    "\3\6\1\72\1\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\2\6\1\73\1\6\1\74\1\6\1\75\1\6"+
    "\1\76\1\77\6\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\6\1\100\10\6\1\101\1\6\1\102\1\6"+
    "\1\103\1\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\104\1\6\1\105\4\6\1\106\1\6\1\107"+
    "\5\6\5\0\14\6\12\0\6\6\1\57\4\0\1\6"+
    "\1\110\6\6\1\111\5\6\1\112\1\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\113\1\6\1\114"+
    "\14\6\5\0\14\6\12\0\6\6\1\57\4\0\3\6"+
    "\1\115\1\6\1\116\6\6\1\117\3\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\2\6\1\120\1\6\1\121"+
    "\10\6\1\122\2\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\123\2\6\1\124\10\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\125\1\6\1\126"+
    "\6\6\1\127\3\6\1\130\1\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\4\6\1\131\1\132\7\6\1\133"+
    "\1\6\1\134\5\0\2\6\1\135\11\6\45\0\1\10"+
    "\67\0\1\10\30\0\6\6\1\57\4\0\1\6\1\136"+
    "\14\6\1\137\1\6\5\0\1\6\1\140\12\6\12\0"+
    "\6\6\1\57\4\0\1\6\1\141\14\6\1\142\1\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\6\1\143"+
    "\14\6\1\144\1\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\6\1\145\16\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\146\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\20\6\5\0\13\6\1\147\12\0"+
    "\1\150\66\0\2\151\4\0\1\152\3\0\20\151\5\0"+
    "\14\151\12\0\6\6\1\57\4\0\16\6\1\153\1\6"+
    "\5\0\14\6\12\0\6\61\1\154\4\0\20\61\5\0"+
    "\14\61\12\0\6\6\1\57\4\0\2\6\1\155\1\6"+
    "\1\156\7\6\1\157\1\160\2\6\5\0\1\6\1\161"+
    "\12\6\12\0\6\6\1\57\4\0\12\6\1\162\5\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\10\6\1\163"+
    "\7\6\5\0\14\6\12\0\6\6\1\57\4\0\12\6"+
    "\1\164\5\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\3\6\1\165\14\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\166\10\6\1\67\2\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\4\6\1\167\13\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\170\1\171"+
    "\11\6\5\0\14\6\12\0\6\6\1\57\4\0\7\6"+
    "\1\172\10\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\15\6\1\173\2\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\12\6\1\174\3\6\1\175\1\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\10\6\1\176\7\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\1\177\17\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\171\2\6"+
    "\1\200\4\6\1\201\2\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\6\1\202\12\6\12\0"+
    "\6\6\1\57\4\0\2\6\1\203\15\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\2\6\1\204\15\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\10\6"+
    "\1\205\3\6\12\0\6\6\1\57\4\0\6\6\1\206"+
    "\11\6\5\0\14\6\12\0\6\6\1\57\4\0\14\6"+
    "\1\207\1\6\1\210\1\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\2\6\1\211\15\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\11\6\1\212\6\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\213\1\6\1\214"+
    "\14\6\5\0\14\6\12\0\6\6\1\57\4\0\10\6"+
    "\1\215\7\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\216\12\6\1\217\3\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\2\6\1\220\4\6\1\221\1\6"+
    "\1\222\5\6\1\223\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\224\17\6\5\0\1\6\1\225\12\6\12\0"+
    "\6\6\1\57\4\0\10\6\1\226\5\6\1\227\1\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\2\6\1\171"+
    "\15\6\5\0\2\6\1\230\11\6\12\0\6\6\1\57"+
    "\4\0\7\6\1\231\10\6\5\0\14\6\12\0\4\6"+
    "\1\232\1\6\1\57\4\0\11\6\1\233\3\6\1\234"+
    "\2\6\5\0\14\6\12\0\6\6\1\57\4\0\10\6"+
    "\1\235\7\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\236\16\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\7\6\1\237\10\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\1\240\17\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\241\5\6\1\242\6\6\5\0"+
    "\1\243\13\6\12\0\6\6\1\57\4\0\11\6\1\244"+
    "\5\6\1\67\5\0\14\6\12\0\2\6\1\245\3\6"+
    "\1\57\4\0\5\6\1\246\12\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\1\247\14\6\1\67\2\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\250\12\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\20\6\5\0"+
    "\5\6\1\251\6\6\12\0\6\6\1\57\4\0\13\6"+
    "\1\171\4\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\11\6\1\171\6\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\1\6\1\252\12\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\6\1\253\12\6\12\0"+
    "\6\6\1\57\4\0\1\6\1\176\16\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\254\17\6\5\0\7\6"+
    "\1\237\4\6\12\0\6\6\1\57\4\0\4\6\1\134"+
    "\4\6\1\216\6\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\6\1\255\16\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\11\6\1\256\6\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\14\6\1\257\3\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\10\6\1\260\7\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\16\6\1\261\1\6"+
    "\5\0\14\6\12\0\6\151\5\0\20\151\5\0\14\151"+
    "\12\0\6\6\1\57\4\0\10\6\1\245\7\6\5\0"+
    "\14\6\13\0\2\151\10\0\20\151\5\0\14\151\12\0"+
    "\6\6\1\57\4\0\2\6\1\262\4\6\1\263\10\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\264\4\6"+
    "\1\265\12\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\4\6\1\216\13\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\266\14\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\6\1\267\12\6\12\0"+
    "\6\6\1\57\4\0\20\6\5\0\1\6\1\270\12\6"+
    "\12\0\6\6\1\57\4\0\10\6\1\271\7\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\1\6"+
    "\1\272\12\6\12\0\4\6\1\273\1\6\1\57\4\0"+
    "\20\6\5\0\14\6\12\0\6\6\1\57\4\0\5\6"+
    "\1\274\12\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\14\6\1\275\3\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\276\17\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\5\6\1\277\12\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\11\6\1\300\6\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\11\6\1\301\6\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\302\17\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\303\16\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\16\6\1\304\1\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\2\6\1\305"+
    "\15\6\5\0\14\6\12\0\6\6\1\57\4\0\3\6"+
    "\1\306\14\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\6\1\307\12\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\2\6\1\310\11\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\311\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\3\6\1\312\14\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\313\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\171\14\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\207\3\6"+
    "\1\314\13\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\3\6\1\315\14\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\12\6\1\316\5\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\1\317\17\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\1\320\17\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\321\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\5\6\1\171\12\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\4\6\1\322\13\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\1\6\1\323\16\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\20\6\5\0"+
    "\1\6\1\324\12\6\12\0\6\6\1\57\4\0\1\6"+
    "\1\325\16\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\3\6\1\326\14\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\6\1\327\16\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\330\13\6\12\0\6\6"+
    "\1\57\4\0\12\6\1\331\5\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\5\6\1\332\2\6\1\333\7\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\11\6\1\334"+
    "\6\6\5\0\14\6\12\0\6\6\1\57\4\0\20\6"+
    "\5\0\1\6\1\335\12\6\12\0\6\6\1\57\4\0"+
    "\11\6\1\336\6\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\337\14\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\340\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\3\6\1\341\14\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\10\6\1\342\7\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\343\14\6"+
    "\5\0\14\6\12\0\4\6\1\344\1\6\1\57\4\0"+
    "\14\6\1\345\3\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\7\6\1\346\10\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\1\347\17\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\16\6\1\350\1\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\5\6\1\351\12\6\5\0\14\6"+
    "\12\0\4\6\1\352\1\6\1\57\4\0\11\6\1\353"+
    "\6\6\5\0\14\6\12\0\6\6\1\57\4\0\3\6"+
    "\1\354\12\6\1\171\1\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\355\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\10\6\1\356\7\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\14\6\1\357\3\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\1\6"+
    "\1\360\12\6\12\0\6\6\1\57\4\0\11\6\1\207"+
    "\6\6\5\0\14\6\12\0\6\6\1\57\4\0\16\6"+
    "\1\361\1\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\6\1\362\12\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\363\14\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\10\6\1\364\7\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\1\6\1\365\16\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\2\6\1\207\15\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\366\14\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\16\6\1\367"+
    "\1\6\5\0\14\6\12\0\6\6\1\57\4\0\16\6"+
    "\1\216\1\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\16\6\1\370\1\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\7\6\1\371\10\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\372\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\12\6\1\373\5\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\374\14\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\15\6\1\330\2\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\6\1\375"+
    "\16\6\5\0\14\6\12\0\6\6\1\57\4\0\20\6"+
    "\5\0\3\6\1\245\10\6\12\0\6\6\1\57\4\0"+
    "\5\6\1\376\12\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\3\6\1\377\10\6\12\0\2\6"+
    "\1\171\3\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\4\6\1\u0100\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\135\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\u0101\12\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\10\6\1\171"+
    "\7\6\5\0\14\6\12\0\6\6\1\57\4\0\7\6"+
    "\1\256\10\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\16\6\1\u0102\1\6\5\0\14\6\12\0\4\6\1\u0103"+
    "\1\6\1\57\4\0\20\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\u0104\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\3\6\1\303\14\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\11\6\1\u0105\6\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\4\6\1\u0106\13\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\11\6\1\u0107"+
    "\6\6\5\0\14\6\12\0\6\6\1\57\4\0\20\6"+
    "\5\0\6\6\1\u0108\5\6\12\0\6\6\1\57\4\0"+
    "\5\6\1\u0109\12\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\u010a\14\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\u010b\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\4\6\1\u010c\13\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\15\6\1\u010d\2\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\17\6\1\207\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\16\6\1\u010e\1\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\20\6\5\0"+
    "\1\6\1\u010f\12\6\12\0\6\6\1\57\4\0\10\6"+
    "\1\253\7\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\4\6\1\u0110\13\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\u0111\13\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\12\6\1\u0112\5\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\5\6\1\173\12\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\u0113\1\6\1\u0114"+
    "\12\6\5\0\14\6\12\0\6\6\1\57\4\0\12\6"+
    "\1\u0115\5\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\u0116\17\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\10\6\1\u0117\7\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\6\6\1\u0118\11\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\171\13\6\12\0\6\6"+
    "\1\57\4\0\15\6\1\u0119\2\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\10\6\1\u011a\7\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\16\6\1\u011b\1\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\2\6\1\u011c\15\6"+
    "\5\0\14\6\12\0\4\6\1\u011d\1\6\1\57\4\0"+
    "\20\6\5\0\14\6\12\0\6\6\1\57\4\0\3\6"+
    "\1\u011e\14\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\14\6\1\u011f\3\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\12\6\1\u0120\5\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\u0121\13\6\12\0\4\6"+
    "\1\u0122\1\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\20\6\5\0\11\6\1\u0123\2\6"+
    "\12\0\6\6\1\57\4\0\11\6\1\u0124\6\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\12\6\1\u0125\5\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\11\6\1\u0126"+
    "\6\6\5\0\14\6\12\0\6\6\1\57\4\0\1\6"+
    "\1\u0127\16\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\6\1\u0128\12\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\u0129\14\6\5\0\14\6\12\0\4\6"+
    "\1\u012a\1\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\11\6\1\u012b\6\6\5\0\14\6"+
    "\12\0\4\6\1\u012c\1\6\1\57\4\0\20\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\4\6\1\206\13\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\10\6\1\207"+
    "\7\6\5\0\14\6\12\0\6\6\1\57\4\0\12\6"+
    "\1\u012d\5\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\u012e\16\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\316\17\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\134\13\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\4\6\1\u012f\13\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\10\6\1\u0130\7\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\364\14\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\135\14\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\20\6\5\0"+
    "\7\6\1\u0131\4\6\12\0\6\6\1\57\4\0\20\6"+
    "\5\0\1\6\1\u0132\12\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\6\1\u0133\12\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\147\13\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\15\6\1\171\2\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\7\6\1\u0134\10\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\12\6\1\u0135\5\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\1\6"+
    "\1\u0136\12\6\12\0\6\6\1\57\4\0\1\6\1\u0137"+
    "\16\6\5\0\14\6\12\0\6\6\1\57\4\0\12\6"+
    "\1\u0138\5\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\11\6\1\u0139\6\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\15\6\1\u013a\2\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\5\6\1\330\12\6\5\0\14\6\12\0"+
    "\4\6\1\u013b\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\207\17\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\17\6\1\u013c\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\15\6\1\364\2\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\13\6\1\u013d\4\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\u013e\17\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\20\6\5\0"+
    "\4\6\1\u013f\7\6\12\0\6\6\1\57\4\0\10\6"+
    "\1\u0140\7\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\u0141\17\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\u0142\16\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\5\6\1\u0143\12\6\5\0\14\6\12\0\4\6"+
    "\1\u0144\1\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\3\6\1\u0145\14\6\5\0\14\6"+
    "\12\0\4\6\1\u0146\1\6\1\57\4\0\20\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\17\6\1\u0147\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\u0148\14\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\3\6\1\u0149"+
    "\14\6\5\0\14\6\12\0\6\6\1\57\4\0\4\6"+
    "\1\u014a\13\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\6\1\u014b\12\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\u014c\13\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\10\6\1\u014d\7\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\20\6\5\0\1\u014e\13\6\12\0"+
    "\6\6\1\57\4\0\12\6\1\261\5\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\u014f\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\2\6"+
    "\1\u0150\11\6\12\0\6\6\1\57\4\0\5\6\1\u0151"+
    "\12\6\5\0\14\6\12\0\6\6\1\57\4\0\20\6"+
    "\5\0\7\6\1\u013a\4\6\12\0\4\6\1\u0152\1\6"+
    "\1\57\4\0\20\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\16\6\1\u0153\1\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\14\6\1\u0154\3\6\5\0\14\6\12\0"+
    "\4\6\1\u0155\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\u0156\16\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\4\6\1\135\13\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\12\6\1\u0157"+
    "\5\6\5\0\14\6\12\0\6\6\1\57\4\0\5\6"+
    "\1\u0158\12\6\5\0\14\6\12\0\4\6\1\u0159\1\6"+
    "\1\57\4\0\20\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\12\6\1\u015a\5\6\5\0\14\6\12\0\2\6"+
    "\1\u015b\3\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\12\6\1\u015c\5\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\16\6\1\u015d\1\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\6\6"+
    "\1\207\5\6\12\0\6\6\1\57\4\0\16\6\1\u015e"+
    "\1\6\5\0\14\6\12\0\6\6\1\57\4\0\4\6"+
    "\1\u015f\13\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\u0153\16\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\11\6\1\u0160\6\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\12\6\1\u0161\5\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\20\6\5\0\3\6\1\u0162\10\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\u0163\14\6\5\0"+
    "\14\6\12\0\4\6\1\u0164\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\4\6\1\u0165\1\6\1\57\4\0"+
    "\20\6\5\0\14\6\12\0\6\6\1\57\4\0\14\6"+
    "\1\u0166\3\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\12\6\1\u0167\5\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\12\6\1\u0168\5\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\7\6\1\u0169\10\6\5\0\14\6\12\0"+
    "\4\6\1\u016a\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\341\16\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\10\6\1\307\7\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\u016b\17\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\16\6\1\u016c"+
    "\1\6\5\0\14\6\12\0\6\6\1\57\4\0\4\6"+
    "\1\u016d\13\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\4\6\1\u016e\7\6\12\0\6\6\1\57"+
    "\4\0\15\6\1\u016f\2\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\5\6\1\u0170\12\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\1\u0171\17\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\1\6\1\u0172\16\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\10\6\1\u0173\7\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\1\6\1\u0174\16\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\14\6\1\u0175"+
    "\3\6\5\0\14\6\12\0\4\6\1\u0176\1\6\1\57"+
    "\4\0\20\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\4\6\1\u0177\13\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\4\6\1\171\13\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\10\6\1\u0178\7\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\20\6\5\0\1\u0179\13\6\12\0"+
    "\6\6\1\57\4\0\10\6\1\u015b\7\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\4\6\1\u017a\13\6\5\0"+
    "\14\6\12\0\4\6\1\u017b\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\2\6\1\u017c"+
    "\15\6\5\0\14\6\12\0\6\6\1\57\4\0\5\6"+
    "\1\u017d\12\6\5\0\14\6\12\0\4\6\1\u017e\1\6"+
    "\1\57\4\0\20\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\6\6\1\u017f\5\6\12\0\6\6"+
    "\1\57\4\0\1\u0180\17\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\5\6\1\207\12\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\3\6\1\u0181\14\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\12\6\1\u0182\5\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\4\6\1\u0183\13\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\16\6\1\u0184"+
    "\1\6\5\0\14\6\12\0\4\6\1\u0185\1\6\1\57"+
    "\4\0\20\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\5\6\1\u0186\12\6\5\0\1\6\1\u0187\3\6\1\u0188"+
    "\6\6\12\0\6\6\1\57\4\0\20\6\5\0\2\6"+
    "\1\u0189\11\6\12\0\6\6\1\57\4\0\3\6\1\u018a"+
    "\14\6\5\0\14\6\12\0\6\6\1\57\4\0\4\6"+
    "\1\u018b\13\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\5\6\1\u018c\12\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\u018d\14\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\2\6\1\u018e\11\6\12\0"+
    "\6\6\1\57\4\0\16\6\1\253\1\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\12\6\1\u018f\5\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\363\12\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\14\6\1\u0190"+
    "\3\6\5\0\14\6\12\0\6\6\1\57\4\0\16\6"+
    "\1\u0191\1\6\5\0\14\6\12\0\4\6\1\u0192\1\6"+
    "\1\57\4\0\20\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\5\6\1\u0193\12\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\2\6\1\u0194\15\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\1\6\1\u0195\16\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\10\6\1\u0196\7\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\u0197\12\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\5\6\1\u0198"+
    "\7\6\1\u0199\2\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\16\6\1\u019a\1\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\12\6\1\171\5\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\10\6\1\u019b\7\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\u019c\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\u0123\7\6"+
    "\1\u019d\2\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\367\16\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\3\6\1\171\10\6\12\0\6\6"+
    "\1\57\4\0\1\6\1\u019e\16\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\3\6\1\u019f\14\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\u01a0\14\6\5\0"+
    "\14\6\12\0\4\6\1\u01a1\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\4\6\1\u01a2"+
    "\13\6\5\0\14\6\12\0\6\6\1\57\4\0\13\6"+
    "\1\u01a3\4\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\6\1\u01a4\12\6\12\0\6\6\1\57"+
    "\4\0\14\6\1\u0154\3\6\5\0\12\6\1\43\1\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\u01a5\16\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\u01a6\14\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\6\1\u01a7"+
    "\16\6\5\0\14\6\12\0\6\6\1\57\4\0\16\6"+
    "\1\144\1\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\4\6\1\u010e\13\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\13\6\1\u01a8\4\6\5\0\14\6\12\0\4\6"+
    "\1\u01a9\1\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\4\6\1\u01aa\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\u01ab\14\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\1\6"+
    "\1\u01ac\12\6\12\0\6\6\1\57\4\0\16\6\1\u01ad"+
    "\1\6\5\0\14\6\12\0\6\6\1\57\4\0\4\6"+
    "\1\u01ae\13\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\u01af\17\6\5\0\14\6\12\0\4\6\1\u01b0\1\6"+
    "\1\57\4\0\20\6\5\0\14\6\12\0\4\6\1\u01b1"+
    "\1\6\1\57\4\0\20\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\2\6\1\u01b2\15\6\5\0\14\6\12\0"+
    "\4\6\1\u01b3\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\330\14\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\12\6\1\u01b4\5\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\16\6\1\u01b5"+
    "\1\6\5\0\14\6\12\0\6\6\1\57\4\0\2\6"+
    "\1\u01b6\15\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\u01b7\16\6\5\0\14\6\12\0\4\6\1\u011d"+
    "\1\6\1\57\4\0\11\6\1\u01b8\6\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\16\6\1\u01b9\1\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\4\6\1\207\13\6"+
    "\5\0\14\6\12\0\4\6\1\u01ba\1\6\1\57\4\0"+
    "\20\6\5\0\14\6\12\0\4\6\1\u01bb\1\6\1\57"+
    "\4\0\20\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\u01bc\13\6\12\0\6\6\1\57\4\0"+
    "\13\6\1\u01bd\4\6\5\0\14\6\12\0\4\6\1\u01be"+
    "\1\6\1\57\4\0\20\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\u01bf\13\6\12\0\4\6"+
    "\1\u01c0\1\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\4\6\1\u01c1\13\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\12\6\1\u0153\5\6\5\0"+
    "\14\6\12\0\4\6\1\u01c2\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\5\6\1\u01c3"+
    "\12\6\5\0\14\6\12\0\6\6\1\57\4\0\7\6"+
    "\1\u01c4\10\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\u017c\13\6\12\0\6\6\1\57\4\0"+
    "\16\6\1\u01c5\1\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\1\6\1\171\12\6\12\0\6\6"+
    "\1\57\4\0\5\6\1\u0196\12\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\1\6\1\u01c6\16\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\17\6\1\u01c7\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\15\6\1\u019d\2\6\5\0"+
    "\14\6\12\0\4\6\1\u01c8\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\6\1\u01c9"+
    "\16\6\5\0\14\6\12\0\6\6\1\57\4\0\2\6"+
    "\1\u01ca\15\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\5\6\1\u01cb\12\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\u01cc\14\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\2\6\1\u01cd\15\6\5\0\14\6\12\0"+
    "\4\6\1\u01ce\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\u01cf\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\11\6\1\u01d0\2\6"+
    "\1\u01d1\3\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\14\6\1\u01d2\3\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\10\6\1\u01d3\7\6\5\0\14\6\12\0\4\6"+
    "\1\u01d4\1\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\11\6\1\u01d5\6\6\5\0\14\6"+
    "\12\0\4\6\1\u01d6\1\6\1\57\4\0\20\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\1\u01d7\17\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\13\6\1\u015a\4\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\16\6\1\u01d8"+
    "\1\6\5\0\2\6\1\u018e\11\6\12\0\6\6\1\57"+
    "\4\0\12\6\1\u01d9\5\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\10\6\1\u01da\7\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\20\6\5\0\2\6\1\u01db\11\6"+
    "\12\0\6\6\1\57\4\0\20\6\5\0\1\6\1\u01dc"+
    "\12\6\12\0\6\6\1\57\4\0\16\6\1\u01dd\1\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\15\6\1\u01de"+
    "\2\6\5\0\14\6\12\0\6\6\1\57\4\0\10\6"+
    "\1\u01df\7\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\3\6\1\u01e0\14\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\3\6\1\u01e1\14\6\5\0\14\6\12\0\4\6"+
    "\1\u01e2\1\6\1\57\4\0\20\6\5\0\14\6\12\0"+
    "\4\6\1\u01e3\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\u01e4\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\u01e5\14\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\7\6\1\324"+
    "\10\6\5\0\14\6\12\0\6\6\1\57\4\0\4\6"+
    "\1\u01e6\13\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\10\6\1\u01e7\7\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\6\1\u01e8\16\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\12\6\1\u01e9\5\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\12\6\1\u01ea\5\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\u01eb\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\1\6\1\u01ec\16\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\20\6\5\0"+
    "\1\u01ed\13\6\12\0\6\6\1\57\4\0\2\6\1\u01ee"+
    "\15\6\5\0\14\6\12\0\6\6\1\57\4\0\3\6"+
    "\1\u01ef\14\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\20\6\5\0\1\6\1\207\12\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\1\6\1\u01f0\12\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\6\1\u01f1\12\6\12\0"+
    "\6\6\1\57\4\0\14\6\1\u01f2\3\6\5\0\14\6"+
    "\12\0\4\6\1\u01f3\1\6\1\57\4\0\20\6\5\0"+
    "\14\6\12\0\4\6\1\u01f4\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\4\6\1\u01f4\1\6\1\57\4\0"+
    "\20\6\5\0\11\6\1\u0198\2\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\1\u01f5\13\6\12\0\6\6\1\57"+
    "\4\0\5\6\1\u0123\7\6\1\u01f6\2\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\u01f7\16\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\12\6\1\u01f8\5\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\12\6\1\u01f9"+
    "\5\6\5\0\14\6\12\0\6\6\1\57\4\0\2\6"+
    "\1\u0158\15\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\4\6\1\u01fa\13\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\20\6\5\0\2\6\1\u01fb\11\6\12\0\6\6"+
    "\1\57\4\0\1\6\1\u01fc\16\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\15\6\1\u01fd\2\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\5\6\1\310\12\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\3\6\1\u01fe\14\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\20\6\5\0"+
    "\1\u01ff\13\6\12\0\6\6\1\57\4\0\16\6\1\316"+
    "\1\6\5\0\14\6\12\0\6\6\1\57\4\0\14\6"+
    "\1\377\3\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\10\6\1\u01f0\7\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\11\6\1\u0200\6\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\5\6\1\u0201\12\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\10\6\1\u0202\7\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\14\6\1\u01f2\1\6\1\u0203"+
    "\1\6\5\0\14\6\12\0\4\6\1\u0204\1\6\1\57"+
    "\4\0\20\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\u0205\17\6\5\0\14\6\12\0\4\6\1\u0206\1\6"+
    "\1\57\4\0\20\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\11\6\1\u0207\6\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\6\1\u0208\12\6\12\0"+
    "\4\6\1\u0209\1\6\1\57\4\0\20\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\u020a\14\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\6\6"+
    "\1\u017e\5\6\12\0\6\6\1\57\4\0\12\6\1\u020b"+
    "\5\6\5\0\14\6\12\0\6\6\1\57\4\0\3\6"+
    "\1\u020c\14\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\1\6\1\u018c\16\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\1\6\1\u020d\16\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\5\6\1\u020e\12\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\11\6\1\u020f\6\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\u0210\16\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\1\u0211"+
    "\13\6\12\0\6\6\1\57\4\0\5\6\1\u0212\12\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\12\6\1\u0213"+
    "\5\6\5\0\14\6\12\0\6\6\1\57\4\0\3\6"+
    "\1\u0214\14\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\7\6\1\u0215\10\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\6\6\1\377\11\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\20\6\5\0\1\6\1\225\12\6\12\0"+
    "\6\6\1\57\4\0\2\6\1\u0216\15\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\3\6\1\354\14\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\5\6\1\u0217\12\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\15\6\1\207"+
    "\2\6\5\0\14\6\12\0\6\6\1\57\4\0\1\6"+
    "\1\u0218\6\6\1\u0202\7\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\10\6\1\u0219\7\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\4\6\1\u021a\13\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\17\6\1\u021b\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\u021c\16\6\5\0"+
    "\14\6\12\0\4\6\1\u021d\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\10\6\1\270"+
    "\7\6\5\0\14\6\12\0\6\6\1\57\4\0\10\6"+
    "\1\u021e\7\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\14\6\1\u021f\3\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\13\6\1\330\4\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\3\6\1\u0153\14\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\12\6\1\u0220\5\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\20\6\5\0\12\6\1\43"+
    "\1\6\12\0\4\6\1\u0221\1\6\1\57\4\0\20\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\1\u0222\17\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\4\6\1\301"+
    "\13\6\5\0\14\6\12\0\6\6\1\57\4\0\7\6"+
    "\1\u0223\10\6\5\0\14\6\12\0\6\6\1\57\4\0"+
    "\5\6\1\u0224\12\6\5\0\14\6\12\0\6\6\1\57"+
    "\4\0\10\6\1\u0225\7\6\5\0\14\6\12\0\6\6"+
    "\1\57\4\0\12\6\1\u0226\5\6\5\0\14\6\12\0"+
    "\6\6\1\57\4\0\3\6\1\u0227\14\6\5\0\14\6"+
    "\12\0\6\6\1\57\4\0\1\6\1\u0228\16\6\5\0"+
    "\14\6\12\0\6\6\1\57\4\0\20\6\5\0\1\u0229"+
    "\13\6\12\0\6\6\1\57\4\0\4\6\1\313\13\6"+
    "\5\0\14\6\12\0\6\6\1\57\4\0\12\6\1\u022a"+
    "\5\6\5\0\14\6\12\0\6\6\1\57\4\0\6\6"+
    "\1\171\11\6\5\0\14\6\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28836];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\4\1\1\11\26\1\12\11"+
    "\2\0\72\1\1\11\1\1\1\0\u01be\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public XPathLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XPathLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public XPathLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 996) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 19: break;
        case 17: 
          { return token(TokenType.KEYWORD);
          }
        case 20: break;
        case 2: 
          { return token(TokenType.NUMBER);
          }
        case 21: break;
        case 15: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 22: break;
        case 4: 
          { return token(TokenType.OPERATOR);
          }
        case 23: break;
        case 8: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 24: break;
        case 9: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 25: break;
        case 14: 
          { tokenLength += yylength();
          }
        case 26: break;
        case 13: 
          { yybegin(STRING_SINGLE);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 27: break;
        case 18: 
          { return token(TokenType.TYPE);
          }
        case 28: break;
        case 1: 
          { /* skip */
          }
        case 29: break;
        case 11: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 30: break;
        case 12: 
          { yybegin(STRING_DOUBLE);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 31: break;
        case 6: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 32: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 33: break;
        case 16: 
          { return token(TokenType.KEYWORD2);
          }
        case 34: break;
        case 10: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 35: break;
        case 5: 
          { 
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
