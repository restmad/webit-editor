/* The following code was generated by JFlex 1.4.3 on 14-3-27 ÏÂÎç10:25 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-27 ÏÂÎç10:25 from the specification file
 * <tt>F:/Workspace/r095/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/ruby.flex</tt>
 */
public final class RubyLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ML_STRING = 4;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\74\1\75"+
    "\1\4\1\0\1\67\1\67\1\0\1\57\1\60\1\65\1\22\1\72"+
    "\1\22\1\20\1\66\1\7\1\15\2\14\4\16\2\10\1\72\1\72"+
    "\1\70\1\73\1\71\1\77\1\72\1\13\1\24\1\13\1\44\1\25"+
    "\1\17\1\26\1\5\1\27\1\76\1\5\1\11\1\5\1\30\11\5"+
    "\1\12\2\5\1\63\1\23\1\64\1\67\1\6\1\72\1\35\1\52"+
    "\1\51\1\47\1\21\1\41\1\56\1\43\1\37\1\76\1\53\1\40"+
    "\1\54\1\31\1\45\1\46\1\5\1\34\1\32\1\36\1\33\1\5"+
    "\1\42\1\55\1\50\1\5\1\61\1\67\1\62\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\1\2\1\3\1\1\2\4\1\5\1\3"+
    "\1\5\21\3\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\5\5\1\1\1\14\1\15\2\16\1\1\1\17\2\20"+
    "\1\1\2\2\1\21\1\0\3\4\1\0\4\4\1\0"+
    "\20\3\1\22\1\23\12\3\1\0\1\24\2\15\3\0"+
    "\4\4\1\0\1\3\1\25\20\3\1\23\6\3\1\26"+
    "\1\15\1\27\2\0\2\4\15\3\1\0\2\4\1\3"+
    "\1\0\2\4\1\0\2\4\1\30\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\300\0\u0340\0\u08c0\0\u0900\0\u0940\0\300\0\u0980"+
    "\0\300\0\u09c0\0\300\0\u0a00\0\u0a40\0\300\0\300\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\300\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40"+
    "\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040"+
    "\0\u1080\0\u01c0\0\u01c0\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\300\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u01c0\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\300\0\300\0\300\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\300\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u28c0\0\u2900";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\3\10\3\13\1\10\1\14\1\15\1\16\1\4"+
    "\1\17\1\20\3\10\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\10\1\30\1\31\2\10\1\32\1\10"+
    "\1\33\1\34\1\35\1\36\1\10\1\37\2\10\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\16"+
    "\1\50\1\51\1\52\1\16\1\53\1\54\1\10\1\4"+
    "\1\55\1\56\1\57\20\55\1\60\51\55\1\61\3\55"+
    "\1\62\1\63\20\55\1\60\51\55\1\64\2\55\102\0"+
    "\1\4\100\0\1\6\74\0\1\7\1\65\1\66\75\7"+
    "\5\0\13\10\1\0\1\10\2\0\33\10\17\0\1\10"+
    "\1\67\6\0\1\70\100\0\1\71\1\72\1\73\1\74"+
    "\1\0\1\75\1\76\1\75\1\77\1\100\1\101\3\0"+
    "\1\101\12\0\1\73\1\77\13\0\1\74\31\0\2\13"+
    "\1\73\2\0\3\13\1\77\1\100\1\101\3\0\1\101"+
    "\12\0\1\73\1\77\45\0\2\100\3\0\3\100\1\0"+
    "\1\52\64\0\13\10\1\0\1\10\2\0\5\10\1\102"+
    "\6\10\1\103\16\10\17\0\1\10\1\67\73\0\1\52"+
    "\11\0\13\10\1\0\1\10\2\0\1\10\1\104\31\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\4\10\1\105\26\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\106\2\0\13\10\1\107\5\10\1\110\11\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\111\2\0"+
    "\7\10\1\112\23\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\10\2\0\5\10\1\113\25\10\17\0\1\10"+
    "\1\67\5\0\13\10\1\0\1\114\2\0\33\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\5\10"+
    "\1\115\1\116\5\10\1\117\16\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\10\10\1\120\6\10"+
    "\1\121\13\10\17\0\1\10\1\67\5\0\13\10\1\0"+
    "\1\10\2\0\5\10\1\122\7\10\1\123\15\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\11\10"+
    "\1\124\7\10\1\125\11\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\17\10\1\126\13\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\10\10"+
    "\1\122\22\10\17\0\1\10\1\67\5\0\13\10\1\0"+
    "\1\127\2\0\21\10\1\123\11\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\13\10\1\130\17\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\11\10\1\131\2\10\1\132\16\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\133\2\0\10\10\1\134\22\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\21\10\1\135\11\10\17\0\1\10\1\67\65\0\1\16"+
    "\5\0\1\52\72\0\1\16\4\0\1\52\74\0\1\16"+
    "\1\52\1\0\1\52\75\0\1\16\1\0\1\52\101\0"+
    "\1\136\2\0\1\55\2\0\20\55\1\0\51\55\1\0"+
    "\2\55\2\0\1\57\75\0\2\137\1\0\4\137\1\140"+
    "\4\137\2\140\1\141\61\137\2\0\1\63\172\0\1\142"+
    "\4\0\1\66\106\0\1\143\5\0\1\144\67\0\1\71"+
    "\1\72\1\73\2\0\1\75\1\76\1\75\1\77\1\100"+
    "\1\101\3\0\1\101\12\0\1\73\1\77\45\0\2\72"+
    "\3\0\3\72\1\77\1\100\1\101\3\0\1\101\13\0"+
    "\1\77\45\0\1\145\1\146\2\0\5\146\1\0\1\146"+
    "\2\0\2\146\7\0\1\146\3\0\1\146\2\0\1\146"+
    "\2\0\1\146\1\0\2\146\34\0\1\147\1\72\1\73"+
    "\2\0\3\147\1\77\1\100\1\101\3\0\1\101\12\0"+
    "\1\73\1\77\45\0\1\75\1\72\1\73\2\0\3\75"+
    "\1\77\1\100\1\101\3\0\1\101\12\0\1\73\1\77"+
    "\134\0\1\73\10\0\2\100\3\0\3\100\1\77\1\0"+
    "\1\101\3\0\1\101\13\0\1\77\45\0\2\150\3\0"+
    "\3\150\3\0\1\151\62\0\13\10\1\0\1\10\2\0"+
    "\6\10\1\152\14\10\1\153\7\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\6\10\1\154\24\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\2\10\1\155\30\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\10\2\0\20\10\1\122\12\10\17\0\1\10"+
    "\1\67\5\0\13\10\1\0\1\10\2\0\31\10\1\110"+
    "\1\10\17\0\1\10\1\67\5\0\13\10\1\0\1\10"+
    "\2\0\14\10\1\122\16\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\12\10\1\122\20\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\14\10"+
    "\1\156\16\10\17\0\1\10\1\67\5\0\13\10\1\0"+
    "\1\10\2\0\22\10\1\157\10\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\12\10\1\160\1\10"+
    "\1\161\6\10\1\162\7\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\6\10\1\163\3\10\1\164"+
    "\10\10\1\165\7\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\10\2\0\23\10\1\122\7\10\17\0\1\10"+
    "\1\67\5\0\13\10\1\0\1\10\2\0\6\10\1\166"+
    "\24\10\17\0\1\10\1\67\5\0\13\10\1\0\1\10"+
    "\2\0\13\10\1\167\17\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\7\10\1\170\23\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\171\2\0\33\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\14\10\1\172\16\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\10\2\0\10\10\1\123\22\10\17\0\1\10"+
    "\1\67\5\0\13\10\1\0\1\171\2\0\13\10\1\173"+
    "\17\10\17\0\1\10\1\67\5\0\13\10\1\0\1\10"+
    "\2\0\15\10\1\174\15\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\175\2\0\33\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\6\10\1\176\24\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\11\10\1\177\21\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\10\2\0\32\10\1\200\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\201\2\0\33\10\17\0\1\10"+
    "\1\67\5\0\13\10\1\0\1\10\2\0\23\10\1\202"+
    "\7\10\17\0\1\10\1\67\75\0\1\203\11\0\1\141"+
    "\4\0\3\141\70\0\1\204\4\0\3\204\156\0\1\205"+
    "\31\0\1\206\77\0\1\207\57\0\1\145\1\146\1\73"+
    "\1\0\5\146\1\0\1\146\2\0\2\146\7\0\1\146"+
    "\2\0\1\73\1\146\2\0\1\146\2\0\1\146\1\0"+
    "\2\146\34\0\2\210\1\73\1\0\5\210\1\0\1\210"+
    "\2\0\2\210\7\0\1\210\2\0\1\73\1\210\2\0"+
    "\1\210\2\0\1\210\1\0\2\210\34\0\1\211\1\72"+
    "\1\73\2\0\3\211\1\77\1\100\1\101\3\0\1\101"+
    "\12\0\1\73\1\77\45\0\2\150\3\0\3\150\1\77"+
    "\21\0\1\77\45\0\2\150\3\0\3\150\66\0\13\10"+
    "\1\0\1\10\2\0\7\10\1\212\23\10\17\0\1\10"+
    "\1\67\5\0\13\10\1\0\1\122\2\0\13\10\1\156"+
    "\17\10\17\0\1\10\1\67\5\0\13\10\1\0\1\10"+
    "\2\0\3\10\1\213\27\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\15\10\1\122\15\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\32\2\0\33\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\13\10\1\214\17\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\215\2\0\33\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\156\2\0\33\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\25\10\1\120\5\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\7\10\1\216\1\217\22\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\21\10\1\122\11\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\220\2\0\33\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\11\10\1\221\21\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\122\2\0\33\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\5\10\1\122\25\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\6\10"+
    "\1\170\24\10\17\0\1\10\1\67\5\0\13\10\1\0"+
    "\1\10\2\0\14\10\1\176\16\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\13\10\1\222\17\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\14\10\1\115\16\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\123\2\0\33\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\6\10\1\223\24\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\13\10"+
    "\1\224\17\10\17\0\1\10\1\67\5\0\13\10\1\0"+
    "\1\10\2\0\11\10\1\225\21\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\7\10\1\226\23\10"+
    "\17\0\1\10\1\67\30\0\1\227\60\0\1\227\75\0"+
    "\2\230\1\73\1\0\5\230\1\0\1\230\2\0\2\230"+
    "\7\0\1\230\2\0\1\73\1\230\2\0\1\230\2\0"+
    "\1\230\1\0\2\230\34\0\1\231\1\72\1\73\2\0"+
    "\3\231\1\77\1\100\1\101\3\0\1\101\12\0\1\73"+
    "\1\77\43\0\13\10\1\0\1\10\2\0\10\10\1\170"+
    "\22\10\17\0\1\10\1\67\5\0\13\10\1\0\1\10"+
    "\2\0\4\10\1\122\26\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\14\10\1\123\16\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\6\10"+
    "\1\221\24\10\17\0\1\10\1\67\5\0\13\10\1\0"+
    "\1\10\2\0\10\10\1\171\22\10\17\0\1\10\1\67"+
    "\5\0\13\10\1\0\1\10\2\0\24\10\1\122\6\10"+
    "\17\0\1\10\1\67\5\0\13\10\1\0\1\10\2\0"+
    "\10\10\1\110\22\10\17\0\1\10\1\67\5\0\13\10"+
    "\1\0\1\10\2\0\6\10\1\122\24\10\17\0\1\10"+
    "\1\67\5\0\13\10\1\0\1\10\2\0\5\10\1\232"+
    "\25\10\17\0\1\10\1\67\5\0\13\10\1\0\1\10"+
    "\2\0\6\10\1\123\24\10\17\0\1\10\1\67\5\0"+
    "\13\10\1\0\1\10\2\0\5\10\1\123\25\10\17\0"+
    "\1\10\1\67\5\0\13\10\1\0\1\10\2\0\27\10"+
    "\1\122\3\10\17\0\1\10\1\67\5\0\13\10\1\0"+
    "\1\10\2\0\14\10\1\170\16\10\17\0\1\10\1\67"+
    "\25\0\1\233\61\0\2\234\1\73\1\0\5\234\1\0"+
    "\1\234\2\0\2\234\7\0\1\234\2\0\1\73\1\234"+
    "\2\0\1\234\2\0\1\234\1\0\2\234\34\0\1\235"+
    "\1\72\1\73\2\0\3\235\1\77\1\100\1\101\3\0"+
    "\1\101\12\0\1\73\1\77\43\0\13\10\1\0\1\115"+
    "\2\0\33\10\17\0\1\10\1\67\6\0\1\236\100\0"+
    "\2\237\1\73\1\0\5\237\1\0\1\237\2\0\2\237"+
    "\7\0\1\237\2\0\1\73\1\237\2\0\1\237\2\0"+
    "\1\237\1\0\2\237\34\0\1\240\1\72\1\73\2\0"+
    "\3\240\1\77\1\100\1\101\3\0\1\101\12\0\1\73"+
    "\1\77\44\0\1\241\100\0\2\242\1\73\1\0\5\242"+
    "\1\0\1\242\2\0\2\242\7\0\1\242\2\0\1\73"+
    "\1\242\2\0\1\242\2\0\1\242\1\0\2\242\34\0"+
    "\1\243\1\72\1\73\2\0\3\243\1\77\1\100\1\101"+
    "\3\0\1\101\12\0\1\73\1\77\45\0\2\244\1\73"+
    "\1\0\5\244\1\0\1\244\2\0\2\244\7\0\1\244"+
    "\2\0\1\73\1\244\2\0\1\244\2\0\1\244\1\0"+
    "\2\244\34\0\1\245\1\72\1\73\2\0\3\245\1\77"+
    "\1\100\1\101\3\0\1\101\12\0\1\73\1\77\45\0"+
    "\2\246\1\73\1\0\5\246\1\0\1\246\2\0\2\246"+
    "\7\0\1\246\2\0\1\73\1\246\2\0\1\246\2\0"+
    "\1\246\1\0\2\246\34\0\1\247\1\72\1\73\2\0"+
    "\3\247\1\77\1\100\1\101\3\0\1\101\12\0\1\73"+
    "\1\77\45\0\2\250\1\73\1\0\5\250\1\0\1\250"+
    "\2\0\2\250\7\0\1\250\2\0\1\73\1\250\2\0"+
    "\1\250\2\0\1\250\1\0\2\250\34\0\1\251\1\72"+
    "\1\73\2\0\3\251\1\77\1\100\1\101\3\0\1\101"+
    "\12\0\1\73\1\77\45\0\2\252\1\73\1\0\5\252"+
    "\1\0\1\252\2\0\2\252\7\0\1\252\2\0\1\73"+
    "\1\252\2\0\1\252\2\0\1\252\1\0\2\252\34\0"+
    "\1\253\1\72\1\73\2\0\3\253\1\77\1\100\1\101"+
    "\3\0\1\101\12\0\1\73\1\77\45\0\2\254\1\73"+
    "\1\0\5\254\1\0\1\254\2\0\2\254\7\0\1\254"+
    "\2\0\1\73\1\254\2\0\1\254\2\0\1\254\1\0"+
    "\2\254\34\0\1\255\1\72\1\73\2\0\3\255\1\77"+
    "\1\100\1\101\3\0\1\101\12\0\1\73\1\77\45\0"+
    "\2\256\1\73\1\0\5\256\1\0\1\256\2\0\2\256"+
    "\7\0\1\256\2\0\1\73\1\256\2\0\1\256\2\0"+
    "\1\256\1\0\2\256\34\0\1\257\1\72\1\73\2\0"+
    "\3\257\1\77\1\100\1\101\3\0\1\101\12\0\1\73"+
    "\1\77\45\0\2\260\1\73\1\0\5\260\1\0\1\260"+
    "\2\0\2\260\7\0\1\260\2\0\1\73\1\260\2\0"+
    "\1\260\2\0\1\260\1\0\2\260\34\0\1\261\1\72"+
    "\1\73\2\0\3\261\1\77\1\100\1\101\3\0\1\101"+
    "\12\0\1\73\1\77\45\0\2\262\1\73\1\0\5\262"+
    "\1\0\1\262\2\0\2\262\7\0\1\262\2\0\1\73"+
    "\1\262\2\0\1\262\2\0\1\262\1\0\2\262\34\0"+
    "\1\263\1\72\1\73\2\0\3\263\1\77\1\100\1\101"+
    "\3\0\1\101\12\0\1\73\1\77\45\0\2\264\1\73"+
    "\1\0\5\264\1\0\1\264\2\0\2\264\7\0\1\264"+
    "\2\0\1\73\1\264\2\0\1\264\2\0\1\264\1\0"+
    "\2\264\34\0\1\265\1\72\1\73\2\0\3\265\1\77"+
    "\1\100\1\101\3\0\1\101\12\0\1\73\1\77\45\0"+
    "\2\266\1\73\1\0\5\266\1\0\1\266\2\0\2\266"+
    "\7\0\1\266\2\0\1\73\1\266\2\0\1\266\2\0"+
    "\1\266\1\0\2\266\34\0\1\267\1\72\1\73\2\0"+
    "\3\267\1\77\1\100\1\101\3\0\1\101\12\0\1\73"+
    "\1\77\47\0\1\73\26\0\1\73\46\0\1\270\1\72"+
    "\1\73\2\0\3\270\1\77\1\100\1\101\3\0\1\101"+
    "\12\0\1\73\1\77\45\0\1\271\1\72\1\73\2\0"+
    "\3\271\1\77\1\100\1\101\3\0\1\101\12\0\1\73"+
    "\1\77\45\0\1\272\1\72\1\73\2\0\3\272\1\77"+
    "\1\100\1\101\3\0\1\101\12\0\1\73\1\77\45\0"+
    "\1\273\1\72\1\73\2\0\3\273\1\77\1\100\1\101"+
    "\3\0\1\101\12\0\1\73\1\77\45\0\2\72\1\73"+
    "\2\0\3\72\1\77\1\100\1\101\3\0\1\101\12\0"+
    "\1\73\1\77\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\33\1\6\11\4\1\1\11\4\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\1\0\2\1"+
    "\1\11\1\0\4\1\1\0\34\1\1\0\1\11\2\1"+
    "\3\0\4\1\1\0\31\1\3\11\2\0\17\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\11\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public RubyLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;
    private static final byte WORD      = 4;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RubyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public RubyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 25: break;
        case 18: 
          { return token(TokenType.KEYWORD);
          }
        case 26: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 27: break;
        case 5: 
          { return token(TokenType.OPERATOR);
          }
        case 28: break;
        case 8: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 29: break;
        case 9: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 30: break;
        case 23: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 3);
          }
        case 31: break;
        case 21: 
          { return token(TokenType.KEYWORD, -WORD);
          }
        case 32: break;
        case 22: 
          { yybegin(ML_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 3;
          }
        case 33: break;
        case 13: 
          { tokenLength += yylength();
          }
        case 34: break;
        case 14: 
          { yybegin(YYINITIAL);
          }
        case 35: break;
        case 12: 
          { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 36: break;
        case 15: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 37: break;
        case 24: 
          { return token(TokenType.TYPE);
          }
        case 38: break;
        case 11: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 39: break;
        case 19: 
          { return token(TokenType.KEYWORD,  WORD);
          }
        case 40: break;
        case 6: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 41: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 42: break;
        case 20: 
          { tokenLength += 2;
          }
        case 43: break;
        case 17: 
          { return token(TokenType.TYPE2);
          }
        case 44: break;
        case 16: 
          { tokenLength ++;
          }
        case 45: break;
        case 10: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 46: break;
        case 2: 
          { return token(TokenType.COMMENT);
          }
        case 47: break;
        case 1: 
          { 
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
