/* The following code was generated by JFlex 1.4.3 on 14-3-27 ÏÂÎç10:25 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-27 ÏÂÎç10:25 from the specification file
 * <tt>F:/Workspace/r095/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/jflex.flex</tt>
 */
public final class JFlexLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int JDOC_TAG = 8;
  public static final int JDOC = 6;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\103"+
    "\1\24\1\0\1\6\1\70\1\104\1\25\1\101\1\101\1\5\1\106"+
    "\1\101\1\23\1\21\1\4\1\10\1\16\2\15\2\17\1\74\1\72"+
    "\1\73\1\11\1\63\1\101\1\57\1\102\1\61\1\101\1\107\1\14"+
    "\1\75\1\14\1\76\1\22\1\20\2\66\1\77\2\66\1\12\2\66"+
    "\1\60\3\66\1\100\4\66\1\13\2\66\1\62\1\26\1\65\1\103"+
    "\1\67\1\0\1\27\1\30\1\34\1\46\1\37\1\51\1\53\1\43"+
    "\1\44\1\64\1\41\1\36\1\47\1\40\1\35\1\52\1\66\1\33"+
    "\1\31\1\32\1\45\1\54\1\55\1\50\1\42\1\56\1\71\1\105"+
    "\1\71\1\101\41\7\2\0\4\6\4\0\1\110\2\0\1\7\7\0"+
    "\1\110\4\0\1\110\5\0\27\110\1\0\37\110\1\0\u01ca\110\4\0"+
    "\14\110\16\0\5\110\7\0\1\110\1\0\1\110\21\0\160\7\5\110"+
    "\1\0\2\110\2\0\4\110\10\0\1\110\1\0\3\110\1\0\1\110"+
    "\1\0\24\110\1\0\123\110\1\0\213\110\1\0\5\7\2\0\236\110"+
    "\11\0\46\110\2\0\1\110\7\0\47\110\11\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\110\5\0\3\110"+
    "\15\0\4\7\7\0\1\6\4\0\13\7\5\0\53\110\37\7\4\0"+
    "\2\110\1\7\143\110\1\0\1\110\10\7\1\0\6\7\2\110\2\7"+
    "\1\0\4\7\2\110\12\7\3\110\2\0\1\110\17\0\1\7\1\110"+
    "\1\7\36\110\33\7\2\0\131\110\13\7\1\110\16\0\12\7\41\110"+
    "\11\7\2\110\4\0\1\110\5\0\26\110\4\7\1\110\11\7\1\110"+
    "\3\7\1\110\5\7\22\0\31\110\3\7\244\0\4\7\66\110\3\7"+
    "\1\110\22\7\1\110\7\7\12\110\2\7\2\0\12\7\1\0\7\110"+
    "\1\0\7\110\1\0\3\7\1\0\10\110\2\0\2\110\2\0\26\110"+
    "\1\0\7\110\1\0\1\110\3\0\4\110\2\0\1\7\1\110\7\7"+
    "\2\0\2\7\2\0\3\7\1\110\10\0\1\7\4\0\2\110\1\0"+
    "\3\110\2\7\2\0\12\7\2\110\2\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\110\4\0\2\110\2\0\26\110\1\0\7\110\1\0\2\110"+
    "\1\0\2\110\1\0\2\110\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\110\1\0\1\110\7\0\14\7"+
    "\3\110\1\7\13\0\3\7\1\0\11\110\1\0\3\110\1\0\26\110"+
    "\1\0\7\110\1\0\2\110\1\0\5\110\2\0\1\7\1\110\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\110\17\0\2\110\2\7\2\0"+
    "\12\7\1\0\1\6\17\0\3\7\1\0\10\110\2\0\2\110\2\0"+
    "\26\110\1\0\7\110\1\0\2\110\1\0\5\110\2\0\1\7\1\110"+
    "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\110\1\0"+
    "\3\110\2\7\2\0\12\7\1\0\1\110\20\0\1\7\1\110\1\0"+
    "\6\110\3\0\3\110\1\0\4\110\3\0\2\110\1\0\1\110\1\0"+
    "\2\110\3\0\2\110\3\0\3\110\3\0\14\110\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\110\6\0\1\7\16\0\12\7\11\0"+
    "\1\6\7\0\3\7\1\0\10\110\1\0\3\110\1\0\27\110\1\0"+
    "\12\110\1\0\5\110\3\0\1\110\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\110\6\0\2\110\2\7\2\0\12\7\22\0"+
    "\2\7\1\0\10\110\1\0\3\110\1\0\27\110\1\0\12\110\1\0"+
    "\5\110\2\0\1\7\1\110\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\110\1\0\2\110\2\7\2\0\12\7\1\0\2\110"+
    "\17\0\2\7\1\0\10\110\1\0\3\110\1\0\51\110\2\0\1\110"+
    "\7\7\1\0\3\7\1\0\4\7\1\110\10\0\1\7\10\0\2\110"+
    "\2\7\2\0\12\7\12\0\6\110\2\0\2\7\1\0\22\110\3\0"+
    "\30\110\1\0\11\110\1\0\1\110\2\0\7\110\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\110\1\7"+
    "\2\110\7\7\4\0\1\6\7\110\10\7\1\0\12\7\47\0\2\110"+
    "\1\0\1\110\2\0\2\110\1\0\1\110\2\0\1\110\6\0\4\110"+
    "\1\0\7\110\1\0\3\110\1\0\1\110\1\0\1\110\2\0\2\110"+
    "\1\0\4\110\1\7\2\110\6\7\1\0\2\7\1\110\2\0\5\110"+
    "\1\0\1\110\1\0\6\7\2\0\12\7\2\0\2\110\42\0\1\110"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\110\1\0\44\110\4\0\24\7\1\0\2\7\5\110"+
    "\13\7\1\0\44\7\11\0\1\7\71\0\53\110\24\7\1\110\12\7"+
    "\6\0\6\110\4\7\4\110\3\7\1\110\3\7\2\110\7\7\3\110"+
    "\4\7\15\110\14\7\1\110\17\7\2\0\46\110\12\0\53\110\1\0"+
    "\1\110\3\0\u0149\110\1\0\4\110\2\0\7\110\1\0\1\110\1\0"+
    "\4\110\2\0\51\110\1\0\4\110\2\0\41\110\1\0\4\110\2\0"+
    "\7\110\1\0\1\110\1\0\4\110\2\0\17\110\1\0\71\110\1\0"+
    "\4\110\2\0\103\110\2\0\3\7\40\0\20\110\20\0\125\110\14\0"+
    "\u026c\110\2\0\21\110\1\0\32\110\5\0\113\110\3\0\3\6\17\0"+
    "\15\110\1\0\4\110\3\7\13\0\22\110\3\7\13\0\22\110\2\7"+
    "\14\0\15\110\1\0\3\110\1\0\2\7\14\0\64\110\40\7\3\0"+
    "\1\110\3\0\1\6\1\110\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\110\10\0\51\110\1\7\1\110\5\0\106\110\12\0"+
    "\35\110\3\0\14\7\4\0\14\7\12\0\12\7\36\110\2\0\5\110"+
    "\13\0\54\110\4\0\21\7\7\110\2\7\6\0\12\7\46\0\27\110"+
    "\5\7\4\0\65\110\12\7\1\0\35\7\2\0\13\7\6\0\12\7"+
    "\15\0\1\110\130\0\5\7\57\110\21\7\7\110\4\0\12\7\21\0"+
    "\11\7\14\0\3\7\36\110\12\7\3\0\2\110\12\7\6\0\46\110"+
    "\16\7\14\0\44\110\24\7\10\0\12\7\3\0\3\110\12\7\44\110"+
    "\122\0\3\7\1\0\25\7\4\110\1\7\4\110\1\7\15\0\300\110"+
    "\47\7\25\0\4\7\u0116\110\2\0\6\110\2\0\46\110\2\0\6\110"+
    "\2\0\10\110\1\0\1\110\1\0\1\110\1\0\1\110\1\0\37\110"+
    "\2\0\65\110\1\0\7\110\1\0\1\110\3\0\3\110\1\0\7\110"+
    "\3\0\4\110\2\0\6\110\4\0\15\110\5\0\3\110\1\0\7\110"+
    "\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7"+
    "\5\0\6\7\1\0\1\110\15\0\1\110\20\0\15\110\3\0\32\6"+
    "\26\0\15\7\4\0\1\7\3\0\14\7\21\0\1\110\4\0\1\110"+
    "\2\0\12\110\1\0\1\110\3\0\5\110\6\0\1\110\1\0\1\110"+
    "\1\0\1\110\1\0\4\110\1\0\13\110\2\0\4\110\5\0\5\110"+
    "\4\0\1\110\21\0\43\6\2\110\4\6\u0a77\0\57\110\1\0\57\110"+
    "\1\0\205\110\6\0\4\110\3\7\16\0\46\110\12\0\66\110\11\0"+
    "\1\110\17\0\1\7\27\110\11\0\7\110\1\0\7\110\1\0\7\110"+
    "\1\0\7\110\1\0\7\110\1\0\7\110\1\0\7\110\1\0\7\110"+
    "\1\0\40\7\57\0\1\110\u01d5\0\2\110\1\6\31\0\11\6\6\7"+
    "\1\0\5\110\2\0\3\6\2\110\4\0\126\110\2\0\2\7\2\0"+
    "\3\110\1\0\132\110\1\0\4\110\5\0\51\110\3\0\136\110\21\0"+
    "\33\110\65\0\20\110\u0200\0\u19b6\110\112\0\u51cc\110\64\0\u048d\110\103\0"+
    "\56\110\2\0\u010d\110\3\0\20\110\12\7\2\110\24\0\57\110\1\7"+
    "\14\0\2\7\1\0\31\110\10\0\106\110\12\6\2\7\45\0\11\110"+
    "\2\0\147\110\2\0\4\110\1\0\2\110\16\0\12\110\120\0\10\110"+
    "\1\7\3\110\1\7\4\110\1\7\27\110\5\7\20\0\1\6\7\0"+
    "\64\110\14\0\2\7\62\110\21\7\13\0\12\7\6\0\22\7\6\110"+
    "\3\0\1\110\4\0\12\7\34\110\10\7\2\0\27\110\15\7\14\0"+
    "\35\110\3\0\4\7\57\110\16\7\16\0\1\110\12\7\46\0\51\110"+
    "\16\7\11\0\3\110\1\7\10\110\2\7\2\0\12\7\6\0\27\110"+
    "\3\0\1\110\1\7\4\0\60\110\1\7\1\110\3\7\2\110\2\7"+
    "\5\110\2\7\1\110\1\7\1\110\30\0\3\110\43\0\6\110\2\0"+
    "\6\110\2\0\6\110\11\0\7\110\1\0\7\110\221\0\43\110\10\7"+
    "\1\0\2\7\2\0\12\7\6\0\u2ba4\110\14\0\27\110\4\0\61\110"+
    "\u2104\0\u012e\110\2\0\76\110\2\0\152\110\46\0\7\110\14\0\5\110"+
    "\5\0\1\110\1\7\12\110\1\0\15\110\1\0\5\110\1\0\1\110"+
    "\1\0\2\110\1\0\2\110\1\0\154\110\41\0\u016b\110\22\0\100\110"+
    "\2\0\66\110\50\0\14\110\1\6\3\0\20\7\20\0\7\7\14\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\110\1\0\207\110\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\110\4\0\1\6\1\0"+
    "\32\110\13\0\131\110\3\0\6\110\2\0\6\110\2\0\6\110\2\0"+
    "\3\110\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\3\1\2\2\1\3\2\4\1\3\2\2\1\5"+
    "\1\6\20\3\1\2\1\3\4\2\4\3\3\2\1\7"+
    "\2\10\1\11\1\1\1\7\1\1\2\12\1\13\2\14"+
    "\1\7\1\15\1\0\3\4\1\0\3\4\1\0\32\3"+
    "\2\16\13\3\1\0\1\2\1\3\1\2\4\0\1\17"+
    "\11\0\1\17\2\0\1\17\1\0\6\3\1\20\2\7"+
    "\1\21\1\7\2\15\1\0\1\22\4\4\1\0\30\3"+
    "\1\16\15\3\1\23\1\0\1\3\43\0\6\3\2\0"+
    "\2\4\30\3\1\0\1\3\23\0\1\17\5\0\1\17"+
    "\15\0\1\3\1\24\3\3\2\4\6\3\1\16\7\3"+
    "\1\16\2\3\43\0\3\3\2\4\12\3\31\0\2\3"+
    "\2\4\7\3\20\0\2\4\3\3\10\0\2\4\2\3"+
    "\2\0\1\17\1\0\2\4\2\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u016d\0\u016d\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u016d\0\u0a44"+
    "\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c"+
    "\0\u0cd5\0\u016d\0\u016d\0\u0d1e\0\u0d67\0\u0db0\0\u016d\0\u0df9"+
    "\0\u016d\0\u016d\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66"+
    "\0\u016d\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5"+
    "\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d"+
    "\0\u02da\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c"+
    "\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc"+
    "\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114"+
    "\0\u215d\0\u21a6\0\u016d\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313"+
    "\0\u235c\0\u23a5\0\u016d\0\u23ee\0\u2437\0\u016d\0\u016d\0\u2480"+
    "\0\u016d\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f"+
    "\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7"+
    "\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f"+
    "\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57"+
    "\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u016d\0\u319e"+
    "\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6"+
    "\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e"+
    "\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876"+
    "\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe"+
    "\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06"+
    "\0\u3d4f\0\u3d98\0\u3de1\0\u2512\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05"+
    "\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d"+
    "\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba\0\u4303\0\u434c\0\u4395"+
    "\0\u43de\0\u4427\0\u4470\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd"+
    "\0\u4626\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825"+
    "\0\u486e\0\u48b7\0\u4900\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d"+
    "\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\u4cb5"+
    "\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd"+
    "\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3\0\u50fc\0\u5145"+
    "\0\u02da\0\u518e\0\u51d7\0\u5220\0\u5269\0\u52b2\0\u52fb\0\u5344"+
    "\0\u538d\0\u53d6\0\u541f\0\u5468\0\u2a7d\0\u54b1\0\u54fa\0\u5543"+
    "\0\u558c\0\u55d5\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b"+
    "\0\u57d4\0\u581d\0\u5866\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3"+
    "\0\u5a1c\0\u5a65\0\u5aae\0\u5af7\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b"+
    "\0\u5c64\0\u5cad\0\u5cf6\0\u5d3f\0\u5d88\0\u5dd1\0\u5e1a\0\u5e63"+
    "\0\u5eac\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0\0\u6019\0\u6062\0\u60ab"+
    "\0\u60f4\0\u613d\0\u6186\0\u61cf\0\u6218\0\u6261\0\u62aa\0\u62f3"+
    "\0\u633c\0\u6385\0\u63ce\0\u6417\0\u6460\0\u64a9\0\u64f2\0\u653b"+
    "\0\u6584\0\u65cd\0\u6616\0\u665f\0\u66a8\0\u66f1\0\u673a\0\u6783"+
    "\0\u67cc\0\u6815\0\u685e\0\u68a7\0\u68f0\0\u6939\0\u6982\0\u69cb"+
    "\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38\0\u6b81\0\u6bca\0\u6c13"+
    "\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b"+
    "\0\u6ea4\0\u6eed\0\u6f36\0\u6f7f\0\u6fc8\0\u7011\0\u705a\0\u70a3"+
    "\0\u70ec\0\u7135\0\u717e\0\u71c7\0\u7210\0\u7259\0\u72a2\0\u72eb"+
    "\0\u7334\0\u737d\0\u73c6\0\u740f\0\u7458\0\u74a1\0\u74ea\0\u7533"+
    "\0\u757c\0\u75c5\0\u760e\0\u7657\0\u76a0\0\u76e9\0\u7732\0\u777b"+
    "\0\u77c4\0\u780d\0\u7856\0\u789f\0\u78e8\0\u7931\0\u797a\0\u79c3"+
    "\0\u72eb\0\u7a0c\0\u7a55\0\u7a9e\0\u7ae7\0\u7b30\0\u7b79\0\u7bc2"+
    "\0\u7c0b\0\u7c54\0\u7c9d\0\u7ce6\0\u7d2f\0\u7d78\0\u7dc1\0\u7e0a"+
    "\0\u7e53\0\u7e9c\0\u7ee5\0\u7f2e\0\u7f77\0\u7fc0\0\u8009\0\u8052"+
    "\0\u809b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\13\1\6"+
    "\1\14\1\15\3\13\3\15\1\16\1\17\1\13\1\20"+
    "\1\21\1\22\1\6\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\13\1\31\1\32\1\33\3\13\1\34\1\13"+
    "\1\35\2\13\1\36\1\37\1\40\1\41\1\42\1\13"+
    "\1\43\1\44\1\45\1\46\1\47\1\13\1\47\2\13"+
    "\1\50\1\47\3\15\1\51\1\52\1\53\1\54\1\47"+
    "\2\12\1\55\1\56\1\57\1\6\1\13\1\60\1\61"+
    "\1\62\21\60\1\63\1\60\1\64\62\60\1\65\1\61"+
    "\1\62\22\65\1\63\1\66\62\65\5\67\1\70\101\67"+
    "\1\71\1\67\5\72\1\73\4\72\3\74\3\72\1\74"+
    "\1\72\1\74\4\72\30\74\1\72\1\74\3\72\1\74"+
    "\1\72\1\74\6\72\4\74\7\72\1\74\113\0\1\6"+
    "\111\0\1\10\111\0\1\75\1\76\74\0\1\47\110\0"+
    "\1\47\14\0\13\13\1\0\1\13\4\0\30\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\10\0\1\77\1\100\1\101\1\102\1\0\1\103"+
    "\1\104\1\103\1\101\1\105\1\106\13\0\1\101\1\106"+
    "\6\0\1\101\1\0\1\102\1\101\20\0\1\103\1\100"+
    "\1\103\1\0\1\101\22\0\2\15\1\101\2\0\3\15"+
    "\1\101\1\105\1\106\13\0\1\101\1\106\6\0\1\101"+
    "\2\0\1\101\20\0\3\15\1\0\1\101\20\0\13\13"+
    "\1\0\1\13\4\0\7\13\1\107\20\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\10\0\2\105\3\0\3\105\52\0\3\105\37\0\1\47"+
    "\56\0\1\47\14\0\13\13\1\0\1\13\4\0\1\13"+
    "\1\110\26\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\4\13\1\111\1\13\1\112\4\13\1\113\14\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\3\13"+
    "\1\114\7\13\1\115\1\116\1\13\1\117\7\13\1\120"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\4\13\1\121\7\13\1\122\13\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\10\13\1\123\17\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\1\124\5\13"+
    "\1\125\1\126\4\13\1\127\13\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\130\21\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\7\13\1\131"+
    "\1\13\1\132\7\13\1\133\6\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\134\7\13\1\135\5\13"+
    "\1\136\11\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\11\13\1\137\6\13\1\140\1\13\1\141\5\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\6\13"+
    "\1\142\1\13\1\143\17\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\1\144\5\13\1\145\1\146\5\13"+
    "\1\147\12\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\1\150\3\13\1\151\11\13\1\152\11\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\6\13\1\153"+
    "\21\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\6\13\1\154\21\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\14\13\1\155\13\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\12\0"+
    "\3\156\3\0\1\156\1\0\1\156\4\0\30\156\1\157"+
    "\1\156\3\0\1\156\1\0\1\156\6\0\4\156\1\0"+
    "\1\47\14\0\13\13\1\0\1\13\4\0\1\13\1\160"+
    "\26\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\61\0\1\161\20\0\1\47\71\0"+
    "\1\162\43\0\1\163\10\0\1\164\1\165\1\166\1\167"+
    "\1\0\1\170\1\0\1\171\1\172\1\173\1\0\1\174"+
    "\1\0\1\175\1\176\1\177\1\0\1\200\1\201\1\202"+
    "\15\0\2\203\2\204\6\0\1\47\14\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\205\4\13\1\206\14\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\6\13\1\207"+
    "\21\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\11\13\1\210\16\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\3\13\1\211\10\13\1\212\13\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\102\0\1\47\1\0\1\47\106\0\1\47\2\0"+
    "\1\47\105\0\1\47\3\0\1\47\2\0\1\60\2\0"+
    "\21\60\1\0\1\60\1\0\62\60\2\0\1\62\106\0"+
    "\2\213\1\0\5\213\1\214\4\213\2\214\1\215\52\213"+
    "\1\215\1\213\1\215\14\213\1\65\2\0\22\65\2\0"+
    "\62\65\2\213\1\0\106\213\4\0\1\216\116\0\3\74"+
    "\3\0\1\74\1\0\1\74\4\0\30\74\1\0\1\74"+
    "\2\0\1\217\1\74\1\0\1\74\6\0\4\74\7\0"+
    "\1\74\1\75\1\220\1\221\106\75\5\222\1\223\103\222"+
    "\10\0\1\77\1\100\1\101\2\0\1\103\1\104\1\103"+
    "\1\101\1\105\1\106\13\0\1\101\1\106\6\0\1\101"+
    "\2\0\1\101\20\0\1\103\1\100\1\103\1\0\1\101"+
    "\22\0\2\100\3\0\3\100\1\101\1\105\1\106\14\0"+
    "\1\106\6\0\1\101\2\0\1\101\20\0\3\100\1\0"+
    "\1\101\22\0\1\224\1\225\2\0\5\225\1\0\1\225"+
    "\4\0\2\225\3\0\1\225\2\0\1\225\6\0\1\225"+
    "\2\0\1\225\20\0\5\225\22\0\1\226\1\100\1\101"+
    "\2\0\3\226\1\101\1\105\1\106\13\0\1\101\1\106"+
    "\6\0\1\101\2\0\1\101\20\0\1\226\1\100\1\226"+
    "\1\0\1\101\22\0\1\103\1\100\1\101\2\0\3\103"+
    "\1\101\1\105\1\106\13\0\1\101\1\106\6\0\1\101"+
    "\2\0\1\101\20\0\1\103\1\100\1\103\1\0\1\101"+
    "\22\0\2\105\3\0\3\105\1\101\1\0\1\106\14\0"+
    "\1\106\6\0\1\101\2\0\1\101\20\0\3\105\1\0"+
    "\1\101\22\0\2\227\3\0\3\227\3\0\1\230\46\0"+
    "\3\227\11\0\1\230\10\0\13\13\1\0\1\13\4\0"+
    "\6\13\1\231\21\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\2\13\1\232\25\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\10\13\1\233\17\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\6\13\1\234"+
    "\21\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\3\13\1\235\24\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\1\236\3\13\1\237\23\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\240\16\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\6\13"+
    "\1\241\21\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\23\13\1\242\4\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\15\13\1\243\12\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\1\244\12\13\1\141"+
    "\2\13\1\235\11\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\4\13\1\245\10\13\1\246\12\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\3\13\1\247"+
    "\24\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\2\13\1\235\1\250\24\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\11\13\1\251\16\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\1\252\27\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\1\145\27\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\253\16\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\2\13\1\235\25\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\16\13\1\254\11\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\3\13\1\255\24\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\3\13"+
    "\1\256\24\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\26\13\1\141\1\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\7\13\1\257\20\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\2\13\1\260\1\261"+
    "\24\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\23\13\1\262\4\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\16\13\1\263\11\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\22\13\1\264\5\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\7\13\1\131"+
    "\20\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\4\13\1\141\23\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\265\21\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\11\13\1\266\16\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\5\13\1\267"+
    "\22\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\6\13\1\270\6\13\1\271\12\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\13\1\272\26\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\3\13\1\273"+
    "\24\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\274\5\13\1\275\12\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\15\13\1\276\12\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\10\0\11\156\1\0\1\156\4\0\30\156\1\0"+
    "\1\156\1\277\2\0\1\156\1\0\2\156\2\0\7\156"+
    "\32\0\1\300\57\0\1\47\14\0\13\13\1\0\1\13"+
    "\4\0\30\13\1\0\1\13\3\0\1\301\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\61\0\1\12\20\0\1\47"+
    "\44\0\1\302\6\0\1\303\1\304\15\0\1\305\120\0"+
    "\1\204\44\0\1\306\21\0\1\307\100\0\1\310\2\0"+
    "\1\311\75\0\1\312\1\0\1\313\20\0\1\314\62\0"+
    "\1\315\12\0\1\316\75\0\1\317\2\0\1\320\2\0"+
    "\1\321\1\322\4\0\1\323\1\0\1\324\107\0\1\325"+
    "\101\0\1\326\12\0\1\327\75\0\1\330\115\0\1\331"+
    "\106\0\1\332\6\0\1\333\3\0\1\334\75\0\1\335"+
    "\107\0\1\336\102\0\1\337\123\0\1\340\1\341\72\0"+
    "\1\342\15\0\1\343\73\0\1\344\66\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\345\21\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\3\13\1\346\24\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\16\13\1\347"+
    "\11\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\3\13\1\350\24\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\4\13\1\351\23\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\352\21\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\10\0\1\215\4\0\3\215\52\0\1\215\1\0"+
    "\1\215\24\0\1\217\4\0\3\217\52\0\1\217\1\0"+
    "\1\217\16\0\1\221\106\0\5\222\1\353\103\222\4\0"+
    "\1\221\1\354\113\0\1\224\1\225\1\101\1\0\5\225"+
    "\1\0\1\225\4\0\2\225\3\0\1\225\1\0\1\101"+
    "\1\225\6\0\1\225\2\0\1\225\20\0\5\225\22\0"+
    "\2\355\1\101\1\0\5\355\1\0\1\355\4\0\2\355"+
    "\3\0\1\355\1\0\1\101\1\355\6\0\1\355\2\0"+
    "\1\355\20\0\5\355\22\0\1\356\1\100\1\101\2\0"+
    "\3\356\1\101\1\105\1\106\13\0\1\101\1\106\6\0"+
    "\1\101\2\0\1\101\20\0\1\356\1\100\1\356\1\0"+
    "\1\101\22\0\2\227\3\0\3\227\1\101\25\0\1\101"+
    "\2\0\1\101\20\0\3\227\1\0\1\101\22\0\2\227"+
    "\3\0\3\227\52\0\3\227\22\0\13\13\1\0\1\13"+
    "\4\0\1\357\27\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\3\13\1\360\24\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\361\27\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\7\13\1\362\20\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\10\13"+
    "\1\141\17\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\3\13\1\363\24\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\15\13\1\364\12\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\5\13\1\365\22\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\4\13"+
    "\1\366\23\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\10\13\1\145\17\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\3\13\1\250\24\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\367\16\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\6\13"+
    "\1\370\21\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\2\13\1\141\25\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\16\13\1\371\11\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\5\13\1\372\22\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\2\13"+
    "\1\366\1\373\24\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\2\13\1\246\25\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\24\13\1\141\3\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\20\13\1\141"+
    "\7\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\10\13\1\374\17\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\15\13\1\375\12\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\7\13\1\141\20\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\3\13\1\376"+
    "\24\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\10\13\1\377\17\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\241\1\u0100\20\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\1\13\1\276\26\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\1\u0101"+
    "\27\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\1\366\27\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\1\u0102\27\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\12\13\1\u0103\15\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\3\13\1\u0104\24\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\25\13\1\u0105"+
    "\2\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\363\20\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\141\21\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\u0106\27\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\17\13\1\141\10\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\7\13"+
    "\1\235\20\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\60\0\1\u0107\36\0\13\13"+
    "\1\0\1\13\4\0\10\13\1\u0108\17\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\35\0\1\u0109\1\0\1\u010a\123\0\1\u010b\102\0\1\u010c"+
    "\102\0\1\u010d\103\0\1\u010e\123\0\1\u010f\73\0\1\u0110"+
    "\132\0\1\u0111\66\0\1\u0112\110\0\1\u0113\125\0\1\u0114"+
    "\74\0\1\u0115\132\0\1\u0116\67\0\1\u0117\114\0\1\u0118"+
    "\111\0\1\u0119\101\0\1\u011a\110\0\1\u011b\133\0\1\u011c"+
    "\76\0\1\u0116\121\0\1\u011d\71\0\1\u011e\110\0\1\u011f"+
    "\114\0\1\u0120\1\u0121\103\0\1\u0122\1\0\1\u0123\7\0"+
    "\1\u0124\116\0\1\u0125\76\0\1\u0126\114\0\1\u0127\74\0"+
    "\1\u0128\112\0\1\u0129\116\0\1\u012a\106\0\1\u012b\1\0"+
    "\1\u012c\104\0\1\u012d\104\0\1\u012e\124\0\1\u012f\52\0"+
    "\13\13\1\0\1\13\4\0\7\13\1\u0130\20\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\10\13\1\u0131"+
    "\17\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\1\13\1\u0132\26\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\10\13\1\u0133\17\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\15\13\1\u0134\12\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\4\13\1\357"+
    "\23\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\4\222\1\221\1\353\103\222\10\0"+
    "\2\u0135\1\101\1\0\5\u0135\1\0\1\u0135\4\0\2\u0135"+
    "\3\0\1\u0135\1\0\1\101\1\u0135\6\0\1\u0135\2\0"+
    "\1\u0135\20\0\5\u0135\22\0\1\u0136\1\100\1\101\2\0"+
    "\3\u0136\1\101\1\105\1\106\13\0\1\101\1\106\6\0"+
    "\1\101\2\0\1\101\20\0\1\u0136\1\100\1\u0136\1\0"+
    "\1\101\20\0\13\13\1\0\1\13\4\0\3\13\1\u0131"+
    "\24\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\4\13\1\u0137\23\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\12\13\1\141\15\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\10\13\1\u0138\17\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\15\13\1\u0139"+
    "\12\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\5\13\1\u013a\22\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\14\13\1\u013b\13\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\3\13\1\141\24\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\2\13\1\u013c"+
    "\25\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\26\13\1\u013d\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\4\13\1\u013e\23\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\14\13\1\141\13\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\15\13\1\u013f"+
    "\12\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\11\13\1\u0140\16\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\25\13\1\235\2\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\u0141\27\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\4\13\1\u0142\23\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\10\13"+
    "\1\u0143\17\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\16\13\1\u0144\11\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\7\13\1\u0145\20\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\1\u0146\27\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\10\13\1\u0147"+
    "\17\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\1\113\27\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\3\13\1\155\24\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\20\0\1\u0148"+
    "\76\0\13\13\1\0\1\13\4\0\5\13\1\357\22\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\55\0\1\u0149\65\0\1\u014a\130\0\1\u0149"+
    "\111\0\1\u014b\74\0\1\u014c\103\0\1\u014d\130\0\1\u014e"+
    "\72\0\1\u014f\125\0\1\u0150\71\0\1\u0116\5\0\1\u0151"+
    "\110\0\1\u0152\102\0\1\u0153\114\0\1\u0116\111\0\1\203"+
    "\110\0\1\u0154\104\0\1\u0155\122\0\1\u0156\74\0\1\u0157"+
    "\112\0\1\203\106\0\1\u0158\14\0\1\177\74\0\1\u0159"+
    "\1\0\1\u015a\17\0\1\u015b\14\0\1\203\56\0\1\u015c"+
    "\116\0\1\u015d\102\0\1\u015e\106\0\1\u015f\112\0\1\u0160"+
    "\15\0\1\u0161\71\0\1\u0162\104\0\1\u0163\114\0\1\u0164"+
    "\107\0\1\u0165\107\0\1\u0166\121\0\1\u0167\72\0\1\u0168"+
    "\110\0\1\u012b\117\0\1\203\106\0\1\u0169\115\0\1\203"+
    "\105\0\1\u016a\104\0\1\203\64\0\13\13\1\0\1\13"+
    "\4\0\10\13\1\u016b\17\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\7\13\1\346\20\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\24\13\1\u016c\3\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\u016d\16\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\10\0\2\u016e\1\101\1\0"+
    "\5\u016e\1\0\1\u016e\4\0\2\u016e\3\0\1\u016e\1\0"+
    "\1\101\1\u016e\6\0\1\u016e\2\0\1\u016e\20\0\5\u016e"+
    "\22\0\1\u016f\1\100\1\101\2\0\3\u016f\1\101\1\105"+
    "\1\106\13\0\1\101\1\106\6\0\1\101\2\0\1\101"+
    "\20\0\1\u016f\1\100\1\u016f\1\0\1\101\20\0\13\13"+
    "\1\0\1\13\4\0\1\u0170\27\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\u013e\27\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\5\13\1\141\22\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\3\13"+
    "\1\u0171\24\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\4\13\1\u0172\23\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\15\13\1\u0173\12\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\141\16\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\u0174\16\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\17\13\1\246\10\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\11\13\1\u0175\16\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\22\13\1\u0176\5\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\20\13"+
    "\1\u0177\7\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\7\13\1\366\20\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\7\13\1\u0178\20\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\24\13\1\235\3\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\5\13"+
    "\1\u0179\22\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\61\0\1\u017a\66\0\1\u017b"+
    "\103\0\1\u017c\122\0\1\u017d\76\0\1\u017e\111\0\1\u017f"+
    "\110\0\1\u0180\111\0\1\203\113\0\1\u011b\117\0\1\u0181"+
    "\101\0\1\u0182\105\0\1\u0183\112\0\1\u0184\101\0\1\u0185"+
    "\130\0\1\u0186\72\0\1\203\121\0\1\u0187\111\0\1\u0188"+
    "\103\0\1\u0189\101\0\1\u018a\121\0\1\u018b\110\0\1\u018c"+
    "\120\0\1\u018d\111\0\1\203\112\0\1\u0150\70\0\1\u018e"+
    "\122\0\1\u018f\75\0\1\u0159\36\0\1\203\56\0\1\u0190"+
    "\104\0\1\u0191\112\0\1\u018f\126\0\1\203\67\0\1\u0116"+
    "\110\0\1\u0192\122\0\1\u014f\52\0\13\13\1\0\1\13"+
    "\4\0\1\u0193\27\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\10\13\1\u0194\17\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\24\13\1\u0131\3\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\10\0\2\u0195\1\101\1\0\5\u0195\1\0\1\u0195"+
    "\4\0\2\u0195\3\0\1\u0195\1\0\1\101\1\u0195\6\0"+
    "\1\u0195\2\0\1\u0195\20\0\5\u0195\22\0\1\u0196\1\100"+
    "\1\101\2\0\3\u0196\1\101\1\105\1\106\13\0\1\101"+
    "\1\106\6\0\1\101\2\0\1\101\20\0\1\u0196\1\100"+
    "\1\u0196\1\0\1\101\20\0\13\13\1\0\1\13\4\0"+
    "\5\13\1\366\22\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\22\13\1\u0197\5\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\u0198\21\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\6\0\13\13\1\0\1\13\4\0\10\13\1\u0199"+
    "\17\13\1\0\1\13\3\0\1\13\1\0\2\13\2\0"+
    "\7\13\7\0\1\13\6\0\13\13\1\0\1\13\4\0"+
    "\16\13\1\235\11\13\1\0\1\13\3\0\1\13\1\0"+
    "\2\13\2\0\7\13\7\0\1\13\6\0\13\13\1\0"+
    "\1\13\4\0\5\13\1\u019a\22\13\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\1\u019b\27\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\10\13\1\u019c\17\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\13\13"+
    "\1\141\14\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\3\13\1\u019d\24\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\61\0\1\277"+
    "\62\0\1\u019e\114\0\1\u019f\103\0\1\u01a0\110\0\1\u01a1"+
    "\105\0\1\u01a2\125\0\1\u01a3\73\0\1\u01a4\114\0\1\u01a5"+
    "\120\0\1\203\104\0\1\u011a\104\0\1\u0167\115\0\1\203"+
    "\117\0\1\203\74\0\1\u01a6\112\0\1\u01a7\111\0\1\u01a8"+
    "\120\0\1\u0157\106\0\1\u01a9\76\0\1\u0159\105\0\1\u01aa"+
    "\127\0\1\u0116\111\0\1\u01ab\100\0\1\u01ac\115\0\1\u01ad"+
    "\52\0\13\13\1\0\1\13\4\0\11\13\1\u0131\16\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\4\13"+
    "\1\u0131\23\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\10\0\2\u01ae\1\101\1\0"+
    "\5\u01ae\1\0\1\u01ae\4\0\2\u01ae\3\0\1\u01ae\1\0"+
    "\1\101\1\u01ae\6\0\1\u01ae\2\0\1\u01ae\20\0\5\u01ae"+
    "\22\0\1\u01af\1\100\1\101\2\0\3\u01af\1\101\1\105"+
    "\1\106\13\0\1\101\1\106\6\0\1\101\2\0\1\101"+
    "\20\0\1\u01af\1\100\1\u01af\1\0\1\101\20\0\13\13"+
    "\1\0\1\13\4\0\23\13\1\141\4\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\u01b0\16\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\11\13"+
    "\1\366\16\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\6\0\13\13\1\0\1\13"+
    "\4\0\10\13\1\u01b1\17\13\1\0\1\13\3\0\1\13"+
    "\1\0\2\13\2\0\7\13\7\0\1\13\6\0\13\13"+
    "\1\0\1\13\4\0\5\13\1\235\22\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\11\13\1\u01b2\16\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\10\13"+
    "\1\275\17\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\34\0\1\u01b3\107\0\1\u01a0"+
    "\140\0\1\u01b4\64\0\1\u01b5\105\0\1\u012f\130\0\1\u0129"+
    "\72\0\1\u01b6\105\0\1\u01b7\112\0\1\u01b8\104\0\1\u0116"+
    "\150\0\1\203\67\0\1\203\112\0\1\203\75\0\1\u01b9"+
    "\105\0\1\u01ba\111\0\1\u0186\63\0\2\u01bb\1\101\1\0"+
    "\5\u01bb\1\0\1\u01bb\4\0\2\u01bb\3\0\1\u01bb\1\0"+
    "\1\101\1\u01bb\6\0\1\u01bb\2\0\1\u01bb\20\0\5\u01bb"+
    "\22\0\1\u01bc\1\100\1\101\2\0\3\u01bc\1\101\1\105"+
    "\1\106\13\0\1\101\1\106\6\0\1\101\2\0\1\101"+
    "\20\0\1\u01bc\1\100\1\u01bc\1\0\1\101\20\0\13\13"+
    "\1\0\1\13\4\0\15\13\1\u01bd\12\13\1\0\1\13"+
    "\3\0\1\13\1\0\2\13\2\0\7\13\7\0\1\13"+
    "\6\0\13\13\1\0\1\13\4\0\6\13\1\u01be\21\13"+
    "\1\0\1\13\3\0\1\13\1\0\2\13\2\0\7\13"+
    "\7\0\1\13\6\0\13\13\1\0\1\13\4\0\3\13"+
    "\1\246\24\13\1\0\1\13\3\0\1\13\1\0\2\13"+
    "\2\0\7\13\7\0\1\13\27\0\1\u01bf\146\0\1\277"+
    "\56\0\1\u01c0\112\0\1\325\110\0\1\u011b\130\0\1\u01c1"+
    "\73\0\1\u01c2\77\0\1\u01a7\71\0\2\u01c3\1\101\1\0"+
    "\5\u01c3\1\0\1\u01c3\4\0\2\u01c3\3\0\1\u01c3\1\0"+
    "\1\101\1\u01c3\6\0\1\u01c3\2\0\1\u01c3\20\0\5\u01c3"+
    "\22\0\1\u01c4\1\100\1\101\2\0\3\u01c4\1\101\1\105"+
    "\1\106\13\0\1\101\1\106\6\0\1\101\2\0\1\101"+
    "\20\0\1\u01c4\1\100\1\u01c4\1\0\1\101\20\0\13\13"+
    "\1\0\1\13\4\0\27\13\1\u019d\1\0\1\13\3\0"+
    "\1\13\1\0\2\13\2\0\7\13\7\0\1\13\6\0"+
    "\13\13\1\0\1\13\4\0\22\13\1\141\5\13\1\0"+
    "\1\13\3\0\1\13\1\0\2\13\2\0\7\13\7\0"+
    "\1\13\31\0\1\u01c5\125\0\1\304\14\0\1\u01b4\57\0"+
    "\1\u0157\66\0\2\u01c6\1\101\1\0\5\u01c6\1\0\1\u01c6"+
    "\4\0\2\u01c6\3\0\1\u01c6\1\0\1\101\1\u01c6\6\0"+
    "\1\u01c6\2\0\1\u01c6\20\0\5\u01c6\22\0\1\u01c7\1\100"+
    "\1\101\2\0\3\u01c7\1\101\1\105\1\106\13\0\1\101"+
    "\1\106\6\0\1\101\2\0\1\101\20\0\1\u01c7\1\100"+
    "\1\u01c7\1\0\1\101\51\0\1\u01a0\61\0\2\u01c8\1\101"+
    "\1\0\5\u01c8\1\0\1\u01c8\4\0\2\u01c8\3\0\1\u01c8"+
    "\1\0\1\101\1\u01c8\6\0\1\u01c8\2\0\1\u01c8\20\0"+
    "\5\u01c8\22\0\1\u01c9\1\100\1\101\2\0\3\u01c9\1\101"+
    "\1\105\1\106\13\0\1\101\1\106\6\0\1\101\2\0"+
    "\1\101\20\0\1\u01c9\1\100\1\u01c9\1\0\1\101\22\0"+
    "\2\u01ca\1\101\1\0\5\u01ca\1\0\1\u01ca\4\0\2\u01ca"+
    "\3\0\1\u01ca\1\0\1\101\1\u01ca\6\0\1\u01ca\2\0"+
    "\1\u01ca\20\0\5\u01ca\22\0\1\u01cb\1\100\1\101\2\0"+
    "\3\u01cb\1\101\1\105\1\106\13\0\1\101\1\106\6\0"+
    "\1\101\2\0\1\101\20\0\1\u01cb\1\100\1\u01cb\1\0"+
    "\1\101\22\0\2\u01cc\1\101\1\0\5\u01cc\1\0\1\u01cc"+
    "\4\0\2\u01cc\3\0\1\u01cc\1\0\1\101\1\u01cc\6\0"+
    "\1\u01cc\2\0\1\u01cc\20\0\5\u01cc\22\0\1\u01cd\1\100"+
    "\1\101\2\0\3\u01cd\1\101\1\105\1\106\13\0\1\101"+
    "\1\106\6\0\1\101\2\0\1\101\20\0\1\u01cd\1\100"+
    "\1\u01cd\1\0\1\101\22\0\2\u01ce\1\101\1\0\5\u01ce"+
    "\1\0\1\u01ce\4\0\2\u01ce\3\0\1\u01ce\1\0\1\101"+
    "\1\u01ce\6\0\1\u01ce\2\0\1\u01ce\20\0\5\u01ce\22\0"+
    "\1\u01cf\1\100\1\101\2\0\3\u01cf\1\101\1\105\1\106"+
    "\13\0\1\101\1\106\6\0\1\101\2\0\1\101\20\0"+
    "\1\u01cf\1\100\1\u01cf\1\0\1\101\22\0\2\u01d0\1\101"+
    "\1\0\5\u01d0\1\0\1\u01d0\4\0\2\u01d0\3\0\1\u01d0"+
    "\1\0\1\101\1\u01d0\6\0\1\u01d0\2\0\1\u01d0\20\0"+
    "\5\u01d0\22\0\1\u01d1\1\100\1\101\2\0\3\u01d1\1\101"+
    "\1\105\1\106\13\0\1\101\1\106\6\0\1\101\2\0"+
    "\1\101\20\0\1\u01d1\1\100\1\u01d1\1\0\1\101\22\0"+
    "\2\u01d2\1\101\1\0\5\u01d2\1\0\1\u01d2\4\0\2\u01d2"+
    "\3\0\1\u01d2\1\0\1\101\1\u01d2\6\0\1\u01d2\2\0"+
    "\1\u01d2\20\0\5\u01d2\22\0\1\u01d3\1\100\1\101\2\0"+
    "\3\u01d3\1\101\1\105\1\106\13\0\1\101\1\106\6\0"+
    "\1\101\2\0\1\101\20\0\1\u01d3\1\100\1\u01d3\1\0"+
    "\1\101\22\0\2\u01d4\1\101\1\0\5\u01d4\1\0\1\u01d4"+
    "\4\0\2\u01d4\3\0\1\u01d4\1\0\1\101\1\u01d4\6\0"+
    "\1\u01d4\2\0\1\u01d4\20\0\5\u01d4\22\0\1\u01d5\1\100"+
    "\1\101\2\0\3\u01d5\1\101\1\105\1\106\13\0\1\101"+
    "\1\106\6\0\1\101\2\0\1\101\20\0\1\u01d5\1\100"+
    "\1\u01d5\1\0\1\101\24\0\1\101\23\0\1\101\62\0"+
    "\1\u01d6\1\100\1\101\2\0\3\u01d6\1\101\1\105\1\106"+
    "\13\0\1\101\1\106\6\0\1\101\2\0\1\101\20\0"+
    "\1\u01d6\1\100\1\u01d6\1\0\1\101\22\0\1\u01d7\1\100"+
    "\1\101\2\0\3\u01d7\1\101\1\105\1\106\13\0\1\101"+
    "\1\106\6\0\1\101\2\0\1\101\20\0\1\u01d7\1\100"+
    "\1\u01d7\1\0\1\101\22\0\1\u01d8\1\100\1\101\2\0"+
    "\3\u01d8\1\101\1\105\1\106\13\0\1\101\1\106\6\0"+
    "\1\101\2\0\1\101\20\0\1\u01d8\1\100\1\u01d8\1\0"+
    "\1\101\22\0\1\u01d9\1\100\1\101\2\0\3\u01d9\1\101"+
    "\1\105\1\106\13\0\1\101\1\106\6\0\1\101\2\0"+
    "\1\101\20\0\1\u01d9\1\100\1\u01d9\1\0\1\101\22\0"+
    "\2\100\1\101\2\0\3\100\1\101\1\105\1\106\13\0"+
    "\1\101\1\106\6\0\1\101\2\0\1\101\20\0\3\100"+
    "\1\0\1\101\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32996];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\12\1\2\11\24\1\1\11\12\1\2\11"+
    "\3\1\1\11\1\1\2\11\3\1\1\0\2\1\1\11"+
    "\1\0\3\1\1\0\47\1\1\0\3\1\4\0\1\1"+
    "\11\0\1\1\2\0\1\11\1\0\6\1\1\11\2\1"+
    "\2\11\1\1\1\11\1\0\5\1\1\0\46\1\1\11"+
    "\1\0\1\1\43\0\6\1\2\0\32\1\1\0\1\1"+
    "\23\0\1\1\5\0\1\1\15\0\30\1\43\0\17\1"+
    "\31\0\13\1\20\0\5\1\10\0\4\1\2\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public JFlexLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2276) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return token(TokenType.KEYWORD);
          }
        case 21: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 22: break;
        case 12: 
          { yybegin(JDOC); 
                                     // length also includes the trailing quote
                                     int start = tokenStart;
                                     tokenStart = yychar;
                                     int len = tokenLength;
                                     tokenLength = 1;
                                     return token(TokenType.COMMENT2, start, len);
          }
        case 23: break;
        case 2: 
          { return token(TokenType.OPERATOR);
          }
        case 24: break;
        case 17: 
          { yybegin(YYINITIAL); 
                                     return token(TokenType.COMMENT, tokenStart, tokenLength + 2);
          }
        case 25: break;
        case 11: 
          { yybegin(JDOC_TAG); 
                                     int start = tokenStart;
                                     tokenStart = yychar;
                                     int len = tokenLength;
                                     tokenLength = 1;
                                     return token(TokenType.COMMENT, start, len);
          }
        case 26: break;
        case 7: 
          { tokenLength += yylength();
          }
        case 27: break;
        case 8: 
          { yybegin(YYINITIAL);
          }
        case 28: break;
        case 6: 
          { yybegin(CHARLITERAL); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 29: break;
        case 18: 
          { yybegin(JDOC); 
                                    tokenStart = yychar; 
                                    tokenLength = 3;
          }
        case 30: break;
        case 9: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 31: break;
        case 20: 
          { return token(TokenType.TYPE);
          }
        case 32: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 33: break;
        case 15: 
          { return token(TokenType.KEYWORD2);
          }
        case 34: break;
        case 16: 
          { tokenLength += 2;
          }
        case 35: break;
        case 19: 
          { return token(TokenType.TYPE2);
          }
        case 36: break;
        case 10: 
          { tokenLength ++;
          }
        case 37: break;
        case 13: 
          { return token(TokenType.COMMENT);
          }
        case 38: break;
        case 5: 
          { yybegin(STRING); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 39: break;
        case 1: 
          { 
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
