/* The following code was generated by JFlex 1.4.3 on 14-3-27 ÏÂÎç10:25 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-27 ÏÂÎç10:25 from the specification file
 * <tt>F:/Workspace/r095/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/sql.flex</tt>
 */
public final class SqlLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DQ_STRING = 2;
  public static final int SQ_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\27\1\56"+
    "\1\17\1\0\1\7\2\0\1\20\1\56\1\56\1\5\1\16\1\56"+
    "\1\6\1\14\1\4\1\11\1\12\1\55\1\12\1\51\3\12\1\51"+
    "\1\12\1\56\1\56\1\56\1\56\1\56\1\56\1\56\1\22\1\43"+
    "\1\33\1\23\1\15\1\13\1\44\1\45\1\42\1\52\1\47\1\24"+
    "\1\41\1\34\1\25\1\46\1\54\1\30\1\32\1\35\1\40\1\31"+
    "\1\26\1\50\1\36\1\37\1\56\1\21\1\56\1\0\1\53\1\0"+
    "\1\22\1\43\1\33\1\23\1\15\1\13\1\44\1\45\1\42\1\52"+
    "\1\47\1\24\1\41\1\34\1\25\1\46\1\54\1\30\1\32\1\35"+
    "\1\40\1\31\1\26\1\50\1\36\1\37\1\56\1\0\1\56\1\56"+
    "\41\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0"+
    "\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0\2\7"+
    "\2\0\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7"+
    "\1\0\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0\46\7"+
    "\2\0\1\7\7\0\47\7\11\0\55\10\1\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\1\10\10\0\33\7\5\0\3\7\15\0\4\10"+
    "\7\0\1\7\4\0\13\10\5\0\53\7\37\10\4\0\2\7\1\10"+
    "\143\7\1\0\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10"+
    "\2\7\12\10\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7"+
    "\33\10\2\0\131\7\13\10\1\7\16\0\12\10\41\7\11\10\2\7"+
    "\4\0\1\7\5\0\26\7\4\10\1\7\11\10\1\7\3\10\1\7"+
    "\5\10\22\0\31\7\3\10\244\0\4\10\66\7\3\10\1\7\22\10"+
    "\1\7\7\10\12\7\2\10\2\0\12\10\1\0\7\7\1\0\7\7"+
    "\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10"+
    "\2\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\4\7\7\0\1\7\5\0\3\10\1\0\6\7\4\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0"+
    "\1\10\7\0\4\7\1\0\1\7\7\0\14\10\3\7\1\10\13\0"+
    "\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10\1\0"+
    "\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\10\1\0\1\7"+
    "\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10"+
    "\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10\2\0"+
    "\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7"+
    "\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10"+
    "\2\0\1\7\6\0\1\10\16\0\12\10\11\0\1\7\7\0\3\10"+
    "\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\3\0\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0"+
    "\2\7\6\0\2\7\2\10\2\0\12\10\22\0\2\10\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7"+
    "\1\0\2\7\2\10\2\0\12\10\1\0\2\7\17\0\2\10\1\0"+
    "\10\7\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0\3\10"+
    "\1\0\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0\12\10"+
    "\12\0\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0\11\7"+
    "\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0\1\10"+
    "\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10\4\0"+
    "\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0\2\7"+
    "\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10\2\7"+
    "\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10"+
    "\2\0\12\10\2\0\2\7\42\0\1\7\27\0\2\10\6\0\12\10"+
    "\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0"+
    "\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0"+
    "\1\10\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10\4\7"+
    "\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7"+
    "\17\10\2\0\46\7\12\0\53\7\1\0\1\7\3\0\u0149\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7\1\0"+
    "\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7\2\0"+
    "\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7\1\0"+
    "\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10"+
    "\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7"+
    "\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10"+
    "\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7"+
    "\1\10\1\7\5\0\106\7\12\0\35\7\3\0\14\10\4\0\14\10"+
    "\12\0\12\10\36\7\2\0\5\7\13\0\54\7\4\0\21\10\7\7"+
    "\2\10\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10\1\0"+
    "\35\10\2\0\13\10\6\0\12\10\15\0\1\7\130\0\5\10\57\7"+
    "\21\10\7\7\4\0\12\10\21\0\11\10\14\0\3\10\36\7\12\10"+
    "\3\0\2\7\12\10\6\0\46\7\16\10\14\0\44\7\24\10\10\0"+
    "\12\10\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10\4\7"+
    "\1\10\4\7\1\10\15\0\300\7\47\10\25\0\4\10\u0116\7\2\0"+
    "\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\16\0\5\10\32\0\5\10\20\0"+
    "\2\7\23\0\1\7\13\0\5\10\5\0\6\10\1\0\1\7\15\0"+
    "\1\7\20\0\15\7\3\0\32\7\26\0\15\10\4\0\1\10\3\0"+
    "\14\10\21\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0"+
    "\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0"+
    "\13\7\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0"+
    "\57\7\1\0\57\7\1\0\205\7\6\0\4\7\3\10\16\0\46\7"+
    "\12\0\66\7\11\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0"+
    "\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10"+
    "\2\0\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7"+
    "\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7"+
    "\103\0\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7"+
    "\1\10\14\0\2\10\1\0\31\7\10\0\120\7\2\10\45\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\2\7\16\0\12\7\120\0\10\7"+
    "\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0"+
    "\64\7\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7"+
    "\3\0\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0"+
    "\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10"+
    "\5\7\2\10\1\7\1\10\1\7\30\0\3\7\43\0\6\7\2\0"+
    "\6\7\2\0\6\7\11\0\7\7\1\0\7\7\221\0\43\7\10\10"+
    "\1\0\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7"+
    "\u2104\0\u012e\7\2\0\76\7\2\0\152\7\46\0\7\7\14\0\5\7"+
    "\5\0\1\7\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7"+
    "\2\0\66\7\50\0\15\7\3\0\20\10\20\0\7\10\14\0\2\7"+
    "\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10"+
    "\4\0\1\7\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7"+
    "\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7"+
    "\3\0\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\1\1\3\2\4\1\3\1\5"+
    "\1\3\1\6\1\7\26\3\1\5\1\10\2\11\1\12"+
    "\1\1\1\10\1\12\1\0\1\13\1\0\1\4\2\0"+
    "\15\3\1\14\13\3\2\14\40\3\1\14\13\3\2\14"+
    "\20\3\1\15\2\0\2\13\2\0\2\3\1\14\12\3"+
    "\1\14\6\3\1\14\16\3\1\14\37\3\1\14\25\3"+
    "\1\14\7\3\1\14\1\0\4\3\1\14\22\3\1\14"+
    "\1\0\1\13\4\3\1\14\12\3\1\14\51\3\1\14"+
    "\17\3\1\0\16\3\1\14\43\3\1\14\5\3\1\0"+
    "\13\3\1\0\5\3\1\14\12\3\1\0\5\3\1\0"+
    "\5\3\1\14\2\3\1\0\1\3\1\0\1\14\1\3"+
    "\1\0\1\3\1\14\1\3\1\0\1\3\3\0\1\3"+
    "\16\0\1\14\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\215\0\215\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\215\0\u066d\0\u069c"+
    "\0\215\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u0178"+
    "\0\215\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0149\0\u0d09\0\u0d38"+
    "\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0"+
    "\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608"+
    "\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\215\0\u186b\0\u189a\0\u18c9"+
    "\0\215\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02"+
    "\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a"+
    "\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2"+
    "\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a"+
    "\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2"+
    "\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a"+
    "\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2"+
    "\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a"+
    "\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2"+
    "\0\u28f1\0\u2920\0\u294f\0\u297e\0\u180d\0\u29ad\0\u29dc\0\u2a0b"+
    "\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83"+
    "\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb"+
    "\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73"+
    "\0\u2ea2\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\u186b"+
    "\0\u2feb\0\u301a\0\u3049\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134"+
    "\0\u3163\0\u3192\0\u31c1\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac"+
    "\0\u32db\0\u330a\0\u3339\0\u3368\0\u3397\0\u33c6\0\u2f8d\0\u33f5"+
    "\0\u3424\0\u3453\0\u3482\0\u34b1\0\u34e0\0\u350f\0\u353e\0\u356d"+
    "\0\u359c\0\u35cb\0\u35fa\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5"+
    "\0\u3714\0\u3743\0\u3772\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d"+
    "\0\u388c\0\u38bb\0\u38ea\0\u3919\0\u3948\0\u3977\0\u39a6\0\u39d5"+
    "\0\u3a04\0\u3a33\0\u3a62\0\u0cda\0\u3a91\0\u3ac0\0\u3aef\0\u3b1e"+
    "\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09\0\u3c38\0\u3c67\0\u3c96"+
    "\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e"+
    "\0\u3e3d\0\u3e6c\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28\0\u3f57\0\u3f86"+
    "\0\u3fb5\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0\0\u40cf\0\u40fe"+
    "\0\u412d\0\u415c\0\u418b\0\u41ba\0\u41e9\0\u4218\0\u4247\0\u4276"+
    "\0\u42a5\0\u42d4\0\u4303\0\u4332\0\u4361\0\u4390\0\u43bf\0\u43ee"+
    "\0\u441d\0\u444c\0\u447b\0\u44aa\0\u44d9\0\u4508\0\u4537\0\u4566"+
    "\0\u4595\0\u45c4\0\u45f3\0\u4622\0\u4651\0\u4680\0\u46af\0\u46de"+
    "\0\u470d\0\u473c\0\u476b\0\u479a\0\u47c9\0\u47f8\0\u4827\0\u4856"+
    "\0\u4885\0\u48b4\0\u48e3\0\u4912\0\u4941\0\u4970\0\u499f\0\u49ce"+
    "\0\u49fd\0\u4a2c\0\u4a5b\0\u4a8a\0\u4ab9\0\u4ae8\0\u4b17\0\u4b46"+
    "\0\u4b75\0\u4ba4\0\u4bd3\0\u4c02\0\u0aa6\0\u4c31\0\u4c60\0\u4c8f"+
    "\0\u4cbe\0\u4ced\0\u4d1c\0\u4d4b\0\u4d7a\0\u4da9\0\u4dd8\0\u4e07"+
    "\0\u4e36\0\u4e65\0\u4e94\0\u4ec3\0\u4ef2\0\u4f21\0\u4f50\0\u4f7f"+
    "\0\u4fae\0\u4fdd\0\u500c\0\u503b\0\u506a\0\u5099\0\u50c8\0\u50f7"+
    "\0\u5126\0\u5155\0\u5184\0\u51b3\0\u51e2\0\u5211\0\u5240\0\u526f"+
    "\0\u529e\0\u52cd\0\u52fc\0\u532b\0\u535a\0\u5389\0\u53b8\0\u53e7"+
    "\0\u5416\0\u5445\0\u5474\0\215\0\u54a3\0\u54d2\0\u5501\0\u5530"+
    "\0\u555f\0\u558e\0\u55bd\0\u55ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\4\1\7\1\10\1\4\1\11"+
    "\1\12\1\13\1\14\1\15\1\4\1\16\1\17\1\4"+
    "\1\20\1\21\1\22\1\23\1\24\1\5\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\10\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\12"+
    "\1\45\2\10\1\12\1\46\1\47\1\50\1\51\14\47"+
    "\1\52\1\47\1\53\35\47\1\54\1\50\1\51\15\54"+
    "\1\55\1\53\35\54\60\0\3\5\23\0\1\5\34\0"+
    "\1\56\57\0\1\57\57\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\26\10\12\0\2\60\1\61\1\62\1\63"+
    "\33\0\1\60\3\0\1\60\12\0\2\12\1\61\1\62"+
    "\1\63\33\0\1\12\3\0\1\12\10\0\5\10\1\0"+
    "\1\64\4\0\1\65\1\10\1\66\1\67\1\10\1\0"+
    "\1\70\7\10\1\71\15\10\12\0\2\62\36\0\1\62"+
    "\3\0\1\62\10\0\5\10\1\0\1\10\4\0\1\72"+
    "\1\10\1\73\2\10\1\0\2\10\1\74\1\10\1\75"+
    "\13\10\1\76\5\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\10\1\77\1\100\2\10\1\0\2\10\1\101\1\10"+
    "\1\102\3\10\1\103\15\10\10\0\5\10\1\0\1\104"+
    "\4\0\1\105\2\10\1\106\1\10\1\0\1\107\7\10"+
    "\1\110\1\10\1\111\13\10\10\0\5\10\1\0\1\112"+
    "\4\0\3\10\1\113\1\10\1\0\12\10\1\114\13\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\115"+
    "\3\10\1\116\1\117\2\10\1\120\5\10\1\121\7\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\122"+
    "\11\10\1\123\2\10\1\124\10\10\10\0\5\10\1\0"+
    "\1\125\4\0\1\126\1\10\1\127\1\130\1\10\1\0"+
    "\12\10\1\131\13\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\132\4\10\1\0\26\10\10\0\5\10\1\0\1\133"+
    "\4\0\3\10\1\134\1\10\1\0\3\10\1\135\1\10"+
    "\1\136\1\137\2\10\1\140\1\141\2\10\1\142\1\143"+
    "\5\10\1\144\1\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\145\2\10\1\146\1\10\1\0\1\147\7\10\1\150"+
    "\4\10\1\151\10\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\152\2\10\1\153\1\10\1\0\10\10\1\154\15\10"+
    "\10\0\5\10\1\0\1\155\4\0\1\156\2\10\1\157"+
    "\1\10\1\0\1\160\5\10\1\161\6\10\1\162\10\10"+
    "\10\0\5\10\1\0\1\163\4\0\5\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\2\10"+
    "\1\164\1\10\1\165\11\10\1\166\7\10\10\0\5\10"+
    "\1\0\1\167\4\0\1\170\2\10\1\171\1\10\1\0"+
    "\12\10\1\172\13\10\10\0\4\10\1\116\1\0\1\10"+
    "\4\0\5\10\1\0\2\10\1\173\1\10\1\174\1\175"+
    "\6\10\1\176\11\10\10\0\5\10\1\0\1\177\4\0"+
    "\2\10\1\200\1\123\1\10\1\0\6\10\1\116\1\10"+
    "\1\201\1\10\1\202\13\10\10\0\5\10\1\0\1\10"+
    "\4\0\2\10\1\203\2\10\1\0\1\204\25\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\205\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\1\206\1\10\1\207"+
    "\2\10\1\0\1\210\7\10\1\167\15\10\10\0\5\10"+
    "\1\0\1\211\4\0\5\10\1\0\12\10\1\212\13\10"+
    "\10\0\5\10\1\0\1\10\4\0\3\10\1\213\1\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\3\10"+
    "\1\214\1\10\1\0\26\10\1\0\1\47\2\0\14\47"+
    "\1\0\1\47\1\0\35\47\2\0\1\51\73\0\1\215"+
    "\37\0\2\215\1\0\54\215\1\54\2\0\15\54\2\0"+
    "\35\54\20\0\1\215\36\0\5\216\1\217\51\216\1\57"+
    "\1\220\1\221\54\57\11\0\2\62\1\61\1\0\1\63"+
    "\33\0\1\62\3\0\1\62\7\0\1\222\2\0\2\223"+
    "\3\0\1\222\32\0\1\223\3\0\1\223\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\5\10\1\72\20\10"+
    "\10\0\5\10\1\0\1\10\4\0\2\10\1\224\2\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\3\10"+
    "\1\225\1\10\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\1\226\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\3\10\1\227\1\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\230\2\10\1\0"+
    "\4\10\1\231\21\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\3\10\1\232\22\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\2\10\1\233\23\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\3\10\1\234"+
    "\22\10\10\0\5\10\1\0\1\10\4\0\1\10\1\116"+
    "\3\10\1\0\3\10\1\235\22\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\3\10\1\236\6\10\1\237"+
    "\3\10\1\240\7\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\10\1\116\3\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\2\10\1\241\2\10\1\0\5\10\1\242"+
    "\20\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\3\10\1\116\22\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\243\1\116\3\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\5\10\1\244\20\10\10\0"+
    "\4\10\1\245\1\0\1\10\4\0\2\10\1\246\2\10"+
    "\1\0\2\10\1\247\1\250\1\10\1\251\20\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\5\10\1\252"+
    "\20\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\10\10\1\253\15\10\10\0\5\10\1\0\1\10\4\0"+
    "\3\10\1\254\1\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\1\255\4\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\1\10\1\116\1\256"+
    "\23\10\10\0\4\10\1\257\1\0\1\10\4\0\1\260"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\77\2\10\1\254\1\10\1\0\3\10\1\261\1\262"+
    "\21\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\4\10\1\263\4\10\1\264\5\10\1\265\6\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\10\1\242\3\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\15\10\1\266\10\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\5\10\1\267\20\10\10\0\5\10\1\0"+
    "\1\270\4\0\5\10\1\0\5\10\1\271\20\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\12\10\1\272"+
    "\13\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\5\10\1\232\20\10\10\0\5\10\1\0\1\273\4\0"+
    "\5\10\1\0\12\10\1\274\13\10\10\0\4\10\1\275"+
    "\1\0\1\10\4\0\1\276\1\10\1\277\2\10\1\0"+
    "\1\10\1\300\1\301\1\10\1\302\1\303\6\10\1\304"+
    "\1\10\1\305\5\10\1\306\1\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\12\10\1\224\13\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\12\10\1\307"+
    "\13\10\10\0\5\10\1\0\1\10\4\0\2\10\1\310"+
    "\1\10\1\311\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\14\10\1\312\11\10\10\0\5\10"+
    "\1\0\1\10\4\0\2\10\1\313\2\10\1\0\1\314"+
    "\25\10\10\0\5\10\1\0\1\10\4\0\2\10\1\315"+
    "\2\10\1\0\4\10\1\316\1\116\10\10\1\317\5\10"+
    "\1\320\1\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\4\10\1\302\21\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\15\10\1\321\10\10\10\0\5\10"+
    "\1\0\1\10\4\0\1\322\4\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\2\10\1\166"+
    "\23\10\10\0\5\10\1\0\1\10\4\0\1\323\4\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\7\10\1\265\16\10\10\0\5\10\1\0\1\10"+
    "\4\0\3\10\1\324\1\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\325\4\0\1\326\4\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\327\2\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\2\10\1\255"+
    "\2\10\1\0\2\10\1\330\1\331\22\10\10\0\5\10"+
    "\1\0\1\10\4\0\2\10\1\332\2\10\1\0\4\10"+
    "\1\333\4\10\1\334\14\10\10\0\5\10\1\0\1\335"+
    "\4\0\3\10\1\336\1\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\1\337\25\10\10\0"+
    "\5\10\1\0\1\340\4\0\1\341\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\342\20\10\10\0\5\10\1\0\1\10\4\0\3\10"+
    "\1\343\1\10\1\0\3\10\1\344\1\10\1\116\20\10"+
    "\10\0\5\10\1\0\1\10\4\0\2\10\1\255\2\10"+
    "\1\0\11\10\1\345\14\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\1\346\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\13\10\1\347\12\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\23\10\1\350"+
    "\2\10\10\0\5\10\1\0\1\10\4\0\1\351\4\10"+
    "\1\0\10\10\1\352\1\10\1\353\13\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\16\10\1\265\7\10"+
    "\10\0\5\10\1\0\1\270\4\0\5\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\354"+
    "\25\10\10\0\5\10\1\0\1\355\4\0\1\356\4\10"+
    "\1\0\12\10\1\357\13\10\10\0\5\10\1\0\1\10"+
    "\4\0\1\10\1\360\1\361\2\10\1\0\2\10\1\362"+
    "\7\10\1\363\13\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\10\1\335\3\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\1\356\25\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\5\10\1\72\12\10"+
    "\1\364\5\10\10\0\5\10\1\0\1\10\4\0\1\10"+
    "\1\365\3\10\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\4\10\1\364\21\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\366\26\10\10\0\4\10"+
    "\1\367\1\0\1\10\4\0\1\10\1\370\1\10\1\371"+
    "\1\10\1\0\2\10\1\372\1\10\1\242\1\373\20\10"+
    "\10\0\5\10\1\0\1\374\4\0\5\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\4\10"+
    "\1\375\21\10\10\0\4\10\1\375\1\0\1\10\4\0"+
    "\5\10\1\0\5\10\1\376\6\10\1\214\11\10\10\0"+
    "\5\10\1\0\1\10\4\0\3\10\1\377\1\10\1\0"+
    "\26\10\10\0\4\10\1\u0100\1\0\1\10\4\0\5\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\4\10\1\u0101\7\10\1\u0102\11\10\10\0\5\10"+
    "\1\0\1\10\4\0\3\10\1\u0103\1\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\1\u0104\2\10\1\u0105"+
    "\1\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\1\10\1\u0106\24\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\3\10\1\u0107\10\10\1\u0108"+
    "\11\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\2\10\1\u0109\23\10\10\0\5\10\1\0\1\u010a\4\0"+
    "\1\u010b\2\10\1\u010c\1\10\1\0\12\10\1\u010d\13\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\6\10"+
    "\1\u010e\17\10\10\0\5\10\1\0\1\10\4\0\2\10"+
    "\1\255\2\10\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\1\116\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\12\10\1\270\13\10\1\0"+
    "\5\216\1\u010f\55\216\1\u0110\1\u010f\51\216\2\0\1\221"+
    "\65\0\2\223\36\0\1\223\3\0\1\223\12\0\2\223"+
    "\1\61\35\0\1\223\3\0\1\223\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\2\10\1\265\23\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\u0111\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\u0112\4\0\5\10\1\0\3\10"+
    "\1\265\22\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\11\10\1\116\14\10\10\0\5\10\1\0\1\10"+
    "\4\0\2\10\1\u0113\2\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\3\10\1\u0114\22\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\15\10"+
    "\1\116\10\10\10\0\5\10\1\0\1\u0115\4\0\5\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\1\u0116"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\2\10\1\u0117\2\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\u0118\4\0\5\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\2\10\1\u0119\2\10\1\116"+
    "\20\10\10\0\5\10\1\0\1\10\4\0\2\10\1\u011a"+
    "\2\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\3\10\1\u011b\1\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\213\4\0\5\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\2\10\1\u011c\2\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\3\10\1\u011d\1\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\1\u011e\4\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\272\4\0\1\u011f"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\3\10\1\u0120\22\10\10\0\5\10\1\0"+
    "\1\10\4\0\2\10\1\u0121\1\u0122\1\10\1\0\12\10"+
    "\1\u0123\13\10\10\0\5\10\1\0\1\u0124\4\0\5\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\116\4\0\1\u0125"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\13\10\1\274\12\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\16\10\1\116\7\10\10\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\116\2\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\5\10\1\u0126\20\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\5\10\1\116\20\10\10\0\5\10\1\0"+
    "\1\10\4\0\1\10\1\u0106\3\10\1\0\1\10\1\265"+
    "\24\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\17\10\1\116\6\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\14\10\1\116\11\10\10\0\5\10\1\0"+
    "\1\u0127\4\0\5\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\12\10\1\257\13\10\10\0"+
    "\5\10\1\0\1\116\4\0\5\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\u0128\4\0\5\10\1\0\26\10\10\0"+
    "\4\10\1\367\1\0\1\213\4\0\5\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\4\10"+
    "\1\116\21\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\12\10\1\u0129\13\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\5\10\1\265\20\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\1\265\3\10\1\116"+
    "\21\10\10\0\5\10\1\0\1\10\4\0\2\10\1\265"+
    "\2\10\1\0\26\10\10\0\5\10\1\0\1\u012a\4\0"+
    "\5\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\10\1\u010e\1\116\2\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\u012b\4\0\5\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\3\10\1\307\1\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\u012c\20\10\10\0\5\10\1\0\1\10\4\0\1\u012d"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\10\10\1\u012e\15\10\10\0\5\10\1\0"+
    "\1\u012f\4\0\5\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\u0130\4\0\2\10\1\u0131\2\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\10\10\1\u0132"+
    "\15\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\17\10\1\265\6\10\10\0\5\10\1\0\1\10\4\0"+
    "\2\10\1\u0133\2\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\3\10\1\u0134\1\10\1\u0135"+
    "\20\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\15\10\1\257\10\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\10\10\1\263\15\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\3\10\1\u0136\2\10\1\u0106"+
    "\4\10\1\u0137\12\10\10\0\5\10\1\0\1\u0138\4\0"+
    "\5\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\2\10\1\u0139\23\10\10\0\5\10\1\0"+
    "\1\10\4\0\1\u013a\4\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\10\10\1\u013b\15\10"+
    "\10\0\5\10\1\0\1\u013c\4\0\5\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\u013d"+
    "\25\10\10\0\5\10\1\0\1\10\4\0\2\10\1\u013e"+
    "\2\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\4\10\1\116\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\3\10\1\u013f\22\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\5\10\1\u0140\20\10"+
    "\10\0\5\10\1\0\1\u0141\4\0\4\10\1\u0142\1\0"+
    "\2\10\1\u0143\23\10\10\0\5\10\1\0\1\116\4\0"+
    "\5\10\1\0\3\10\1\u0144\22\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\15\10\1\265\10\10\10\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\335\2\10\1\0"+
    "\10\10\1\u0145\15\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\10\1\u0146\3\10\1\0\1\10\1\u0147\1\u0148\2\10"+
    "\1\u0149\20\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\11\10\1\264\14\10\10\0\5\10\1\0\1\10"+
    "\4\0\1\272\4\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\2\10\1\u0127\23\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\2\10\1\44"+
    "\23\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\3\10\1\261\22\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\1\u014a\3\10\1\356\21\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\10\10\1\u014b\15\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\u014c"+
    "\25\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\6\10\1\u014d\17\10\10\0\5\10\1\0\1\u014e\4\0"+
    "\5\10\1\0\13\10\1\242\12\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\11\10\1\u014f\14\10\10\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\u0150\2\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\1\10\1\335"+
    "\3\10\1\0\3\10\1\u0151\22\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\12\10\1\u0152\13\10\10\0"+
    "\5\10\1\0\1\116\4\0\5\10\1\0\4\10\1\u0153"+
    "\21\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\14\10\1\u0154\11\10\10\0\5\10\1\0\1\10\4\0"+
    "\3\10\1\u0155\1\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\14\10\1\265\11\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\4\10\1\262"+
    "\21\10\10\0\5\10\1\0\1\10\4\0\3\10\1\116"+
    "\1\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\3\10\1\340\1\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\12\10\1\u0156\13\10\10\0"+
    "\5\10\1\0\1\10\4\0\3\10\1\270\1\10\1\0"+
    "\24\10\1\u0157\1\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\1\10\1\u0158\24\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\12\10\1\u0159\13\10\31\0"+
    "\1\u015a\35\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\12\10\1\274\13\10\10\0\5\10\1\0\1\u015b\4\0"+
    "\5\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\10\10\1\257\15\10\10\0\5\10\1\0"+
    "\1\u015c\4\0\5\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\u015d\4\0\3\10\1\116\1\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\1\335\25\10"+
    "\10\0\5\10\1\0\1\10\4\0\3\10\1\u015e\1\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\4\10"+
    "\1\u015f\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\13\10\1\116\12\10\10\0\4\10\1\u0160"+
    "\1\0\1\10\4\0\5\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\1\u0161\4\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\12\10\1\u0104"+
    "\13\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\13\10\1\u0162\12\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\4\10\1\257\21\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\10\10\1\254\15\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\12\10\1\357"+
    "\13\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\17\10\1\u0163\6\10\10\0\5\10\1\0\1\u0164\4\0"+
    "\5\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\23\10\1\u0165\2\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\3\10\1\u0166\22\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\14\10\1\u0167"+
    "\11\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\3\10\1\u0168\22\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\11\10\1\u0101\14\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\2\10\1\116\23\10\1\0"+
    "\4\216\1\221\1\u010f\51\216\7\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\5\10\1\u0169\20\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\12\10\1\u016a\13\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\u016b\20\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\5\10\1\u016c\20\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\12\10\1\u016d\13\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\16\10\1\u016e\7\10"+
    "\10\0\5\10\1\0\1\10\4\0\3\10\1\u016f\1\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\16\10\1\u0114\7\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\5\10\1\u0127\20\10\10\0\5\10"+
    "\1\0\1\10\4\0\1\214\4\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\4\10\1\u0170\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\6\10"+
    "\1\141\17\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\11\10\1\u0171\14\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\10\10\1\u0172\15\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\6\10\1\u016e\17\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\u0173"+
    "\25\10\10\0\5\10\1\0\1\10\4\0\1\u015e\4\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\1\10"+
    "\1\265\3\10\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\11\10\1\110\14\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\1\u0174\25\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\13\10\1\u0175"+
    "\12\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\12\10\1\u0176\13\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\1\u0127\25\10\10\0\5\10\1\0\1\10"+
    "\4\0\3\10\1\u0177\1\10\1\0\11\10\1\u0178\14\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\u0179"+
    "\25\10\10\0\5\10\1\0\1\10\4\0\1\224\4\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\1\u017a\25\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\11\10\1\265\14\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\1\270\25\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\20\10\1\254\5\10"+
    "\10\0\5\10\1\0\1\10\4\0\1\257\4\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\1\u017b\4\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\12\10\1\u015e\13\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\13\10\1\u017c\12\10\10\0\5\10"+
    "\1\0\1\10\4\0\3\10\1\u017d\1\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\6\10"+
    "\1\161\17\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\15\10\1\u017e\10\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\12\10\1\u017f\13\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\3\10\1\257\22\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\12\10"+
    "\1\u0180\13\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\1\u0181\25\10\10\0\5\10\1\0\1\u0182\4\0"+
    "\5\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\11\10\1\u0183\14\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\5\10\1\u0106\20\10\10\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\u0102\2\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\12\10\1\u0184\13\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\12\10\1\110\13\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\20\10\1\u0185\5\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\u0186\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\335\20\10\10\0\5\10\1\0\1\10\4\0\1\u0122"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\11\10\1\270\14\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\12\10\1\u0114\13\10\10\0"+
    "\5\10\1\0\1\u0187\4\0\5\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\5\10\1\u0188"+
    "\20\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\12\10\1\u0189\13\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\u018a\4\10\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\1\110\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\3\10\1\274\22\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\1\u018b\25\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\12\10"+
    "\1\u018c\13\10\10\0\5\10\1\0\1\u018d\4\0\5\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\15\10\1\u018e\10\10\10\0\5\10\1\0\1\10"+
    "\4\0\2\10\1\u0106\2\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\3\10\1\335\22\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\14\10"+
    "\1\242\11\10\10\0\4\10\1\u018f\1\0\1\10\4\0"+
    "\5\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\14\10\1\u0190\11\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\10\10\1\265\15\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\u0191\4\10\1\0\26\10"+
    "\10\0\4\10\1\u0192\1\0\1\10\4\0\5\10\1\0"+
    "\26\10\16\0\1\u0193\50\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\20\10\1\116\5\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\1\257\3\10\1\316\21\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\1\u0194"+
    "\13\10\1\242\11\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\1\265\25\10\10\0\5\10\1\0\1\162"+
    "\4\0\5\10\1\0\26\10\10\0\5\10\1\0\1\u0195"+
    "\4\0\5\10\1\0\26\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\1\u0196\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\1\u0197\4\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\1\u0198\4\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\2\10\1\u0178"+
    "\23\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\12\10\1\u0199\13\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\12\10\1\u019a\13\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\11\10\1\u019b\14\10\10\0"+
    "\5\10\1\0\1\u019c\4\0\5\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\21\10\1\116"+
    "\4\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\14\10\1\270\11\10\10\0\5\10\1\0\1\u019d\4\0"+
    "\5\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\12\10\1\u019e\13\10\10\0\4\10\1\116"+
    "\1\0\1\10\4\0\5\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\77\4\0\5\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\2\10\1\u016e\23\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\u019f\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\1\u01a0\4\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\2\10\1\257"+
    "\2\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\12\10\1\u01a1\13\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\11\10\1\u01a2\14\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\u01a3\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\4\10"+
    "\1\u01a4\21\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\4\10\1\u01a5\21\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\12\10\1\141\13\10\10\0\5\10"+
    "\1\0\1\u01a6\4\0\5\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\12\10\1\u0138\13\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\3\10"+
    "\1\265\22\10\10\0\5\10\1\0\1\10\4\0\1\340"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\10\10\1\u0104\15\10\10\0\5\10\1\0"+
    "\1\10\4\0\1\u01a7\4\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\4\10\1\u0101\21\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\u01a8\20\10\10\0\5\10\1\0\1\10\4\0\1\u01a9"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\4\10\1\u017b\21\10\10\0\5\10\1\0"+
    "\1\10\4\0\1\u010e\4\10\1\0\26\10\10\0\4\10"+
    "\1\u018b\1\0\1\10\4\0\5\10\1\0\26\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\3\10\1\236"+
    "\22\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\1\u01aa\25\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\1\257\25\10\10\0\5\10\1\0\1\10\4\0"+
    "\1\u0104\4\10\1\0\1\u01ab\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\4\10\1\u0157\21\10\10\0"+
    "\5\10\1\0\1\10\4\0\5\10\1\0\3\10\1\u01ac"+
    "\22\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\12\10\1\u01ad\13\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\4\10\1\u01ae\21\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\2\10\1\u01af\23\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\213\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\12\10"+
    "\1\212\13\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\4\10\1\u016e\21\10\10\0\5\10\1\0\1\10"+
    "\4\0\2\10\1\u0157\2\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\12\10\1\263\13\10"+
    "\14\0\1\u01b0\52\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\1\10\1\110\24\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\1\u01b1\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\6\10\1\116\17\10\10\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\u01b2\2\10\1\0"+
    "\26\10\10\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\14\10\1\u01b3\11\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\4\10\1\u01b4\21\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\2\10\1\u016c\23\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\116\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\1\10\1\u01b5\3\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\20\10\1\257\5\10\10\0\5\10\1\0\1\10"+
    "\4\0\3\10\1\270\1\10\1\0\26\10\31\0\1\u01b6"+
    "\35\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\u018b\20\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\13\10\1\265\12\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\12\10\1\u01b7\13\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\2\10\1\u01b8\23\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\3\10"+
    "\1\u01b9\22\10\10\0\5\10\1\0\1\10\4\0\1\u01ba"+
    "\4\10\1\0\26\10\10\0\5\10\1\0\1\10\4\0"+
    "\5\10\1\0\4\10\1\u01bb\21\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\1\u01bc\25\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\12\10\1\u01bd\13\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\44\20\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\4\10\1\u0106\21\10\10\0\5\10\1\0\1\10"+
    "\4\0\1\u0102\4\10\1\0\26\10\10\0\5\10\1\0"+
    "\1\10\4\0\5\10\1\0\5\10\1\242\20\10\10\0"+
    "\5\10\1\0\1\10\4\0\1\u01be\4\10\1\0\26\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\16\10"+
    "\1\u0131\7\10\30\0\1\u01bf\36\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\16\10\1\u01c0\7\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\u01c1\26\10\10\0\5\10"+
    "\1\0\1\u01c2\4\0\5\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\5\10\1\u01c3\20\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\10\10"+
    "\1\u015e\15\10\16\0\1\u01c4\50\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\4\10\1\u01c5\21\10\10\0\5\10"+
    "\1\0\1\u010e\4\0\5\10\1\0\26\10\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\5\10\1\u01c6\20\10"+
    "\10\0\5\10\1\0\1\10\4\0\2\10\1\u01c7\2\10"+
    "\1\0\26\10\10\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\3\10\1\263\22\10\10\0\5\10\1\0\1\10"+
    "\4\0\1\u018a\4\10\1\0\25\10\1\116\10\0\5\10"+
    "\1\0\1\10\4\0\5\10\1\0\1\10\1\265\24\10"+
    "\10\0\5\10\1\0\1\10\4\0\5\10\1\0\5\10"+
    "\1\u016e\20\10\34\0\1\u01c8\32\0\5\10\1\0\1\10"+
    "\4\0\3\10\1\u01c9\1\10\1\0\26\10\36\0\1\u01ca"+
    "\30\0\5\10\1\0\1\10\4\0\5\10\1\u01cb\26\10"+
    "\10\0\5\10\1\0\1\u0154\4\0\5\10\1\0\26\10"+
    "\32\0\1\u01cc\34\0\5\10\1\0\1\10\4\0\5\10"+
    "\1\0\12\10\1\u01cd\13\10\10\0\5\10\1\0\1\10"+
    "\4\0\5\10\1\0\1\142\25\10\10\0\5\10\1\0"+
    "\1\10\4\0\2\10\1\u0196\2\10\1\0\26\10\41\0"+
    "\1\u01ce\25\0\5\10\1\0\1\10\4\0\3\10\1\255"+
    "\1\10\1\0\26\10\16\0\1\u01cf\104\0\1\u01d0\30\0"+
    "\1\u01d1\50\0\5\10\1\0\1\10\4\0\5\10\1\0"+
    "\2\10\1\u01a0\23\10\31\0\1\u01d2\67\0\1\u01d3\42\0"+
    "\1\u01d4\61\0\1\u01d5\60\0\1\u01d6\72\0\1\u01d7\33\0"+
    "\1\u01d8\65\0\1\u01d9\51\0\1\u01da\56\0\1\u01db\67\0"+
    "\1\u01dc\35\0\1\u01dd\71\0\1\u01dc\56\0\1\u01de\55\0"+
    "\1\u01df\51\0\1\u01e0\66\0\1\u01e1\54\0\1\u01d8\61\0"+
    "\1\u01e2\45\0\1\u01e3\70\0\1\u01e4\54\0\1\u01dc\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22043];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\11\1\2\11\26\1\1\11\2\1\1\11"+
    "\4\1\1\0\1\1\1\0\1\11\2\0\131\1\1\11"+
    "\2\0\1\1\1\11\2\0\142\1\1\0\30\1\1\0"+
    "\112\1\1\0\70\1\1\0\13\1\1\0\20\1\1\0"+
    "\5\1\1\0\10\1\1\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\3\0\1\1\16\0\1\11\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Default constructor is needed as we will always call the yyreset
     */
    public SqlLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return token(TokenType.KEYWORD);
          }
        case 14: break;
        case 7: 
          { yybegin(SQ_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 15: break;
        case 5: 
          { return token(TokenType.OPERATOR);
          }
        case 16: break;
        case 13: 
          { tokenLength += 2;
          }
        case 17: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 18: break;
        case 11: 
          { return token(TokenType.COMMENT);
          }
        case 19: break;
        case 10: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 20: break;
        case 9: 
          { yybegin(YYINITIAL);
          }
        case 21: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 22: break;
        case 6: 
          { yybegin(DQ_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 23: break;
        case 2: 
          { /* skip */
          }
        case 24: break;
        case 1: 
          { 
          }
        case 25: break;
        case 8: 
          { tokenLength += yylength();
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
