/* The following code was generated by JFlex 1.4.3 on 14-3-27 ÏÂÎç10:25 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-27 ÏÂÎç10:25 from the specification file
 * <tt>F:/Workspace/r095/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/bash.flex</tt>
 */
public final class BashLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\2\0\1\1\22\0\1\54\1\6\1\7\1\5\1\24"+
    "\1\0\1\44\1\10\1\25\1\26\1\0\1\45\1\0\1\33\1\44"+
    "\1\44\2\4\1\57\1\60\6\4\1\66\1\44\1\40\1\41\1\40"+
    "\1\0\1\44\26\3\1\65\3\3\1\31\1\11\1\32\1\0\1\4"+
    "\1\12\1\22\1\52\1\21\1\15\1\20\1\14\1\37\1\46\1\13"+
    "\1\61\1\53\1\35\1\56\1\17\1\16\1\55\1\34\1\47\1\23"+
    "\1\36\1\50\1\62\1\51\1\63\1\64\1\42\1\27\1\0\1\30"+
    "\1\43\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\4\1\11\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\3\4\2\3\3"+
    "\11\2\1\12\3\2\1\1\3\13\1\14\3\0\1\15"+
    "\2\12\1\2\1\16\5\2\1\12\4\2\1\12\1\17"+
    "\3\2\1\12\42\2\1\12\2\2\1\0\1\20\1\3"+
    "\2\0\3\2\1\12\10\2\1\12\14\2\1\12\20\2"+
    "\1\12\15\2\1\21\2\14\2\22\1\23\6\2\1\12"+
    "\4\2\1\12\50\2\1\24\3\2\1\12\30\2\1\12"+
    "\27\2\1\12\3\2\1\25\3\2\1\26\3\2\1\12"+
    "\1\27\1\2\1\12\11\2\1\12\5\2\1\12\10\2"+
    "\1\12\23\2\1\12\23\2\1\12\10\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\67\0\u0415\0\67\0\67\0\67"+
    "\0\67\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\67"+
    "\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf"+
    "\0\u0906\0\67\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\245"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u0c08\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\67\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923"+
    "\0\u0e2e\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4"+
    "\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\67"+
    "\0\67\0\u09ab\0\67\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940"+
    "\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0"+
    "\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\67"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9"+
    "\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881"+
    "\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39"+
    "\0\245\0\u3a70\0\u3aa7\0\u3ade\0\245\0\u3b15\0\u3b4c\0\u3b83"+
    "\0\u3bba\0\245\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u2260\0\u3e4e\0\u3e85"+
    "\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d"+
    "\0\u4074\0\u40ab\0\u40e2\0\u4119\0\u38b8\0\u4150\0\u4187\0\u41be"+
    "\0\u41f5\0\u422c\0\u4263\0\u429a\0\u2486\0\u42d1\0\u4308\0\u433f"+
    "\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7"+
    "\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a\0\u4641\0\u3bba\0\u4678"+
    "\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b\0\u47c2\0\u47f9\0\u4830"+
    "\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8"+
    "\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\6\1\37\1\4\1\2\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\2\1\50\1\51\2\2"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\71\0\1\2"+
    "\67\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\1\0\1\60\1\61\1\62"+
    "\3\60\1\63\60\60\41\0\1\40\25\0\1\64\2\0"+
    "\4\64\1\0\1\64\1\0\55\64\1\65\2\0\5\65"+
    "\2\0\55\65\1\66\2\0\6\66\2\0\54\66\3\0"+
    "\2\4\6\0\1\4\1\67\1\70\1\4\1\71\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\4"+
    "\1\72\7\4\4\0\2\4\6\0\1\73\1\4\1\74"+
    "\1\75\3\4\1\76\1\77\10\0\2\4\1\100\1\101"+
    "\2\0\1\4\3\0\1\4\1\102\1\103\3\4\1\0"+
    "\1\4\1\104\7\4\4\0\2\4\6\0\1\105\1\70"+
    "\1\106\1\107\1\4\1\110\1\70\1\111\1\4\10\0"+
    "\4\4\2\0\1\4\3\0\2\4\1\70\3\4\1\0"+
    "\1\4\1\112\7\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\113\10\4"+
    "\4\0\2\4\6\0\1\114\2\4\1\115\1\4\1\116"+
    "\2\4\1\117\10\0\1\4\1\70\2\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\4\4"+
    "\1\120\1\4\1\121\1\4\1\122\10\0\1\4\1\123"+
    "\1\124\1\125\2\0\1\4\3\0\6\4\1\0\4\4"+
    "\1\126\1\127\1\130\2\4\4\0\2\4\6\0\1\4"+
    "\1\131\1\70\1\132\3\4\1\133\1\134\10\0\1\4"+
    "\1\135\2\4\2\0\1\4\3\0\1\136\1\137\1\104"+
    "\2\4\1\140\1\0\1\70\1\100\7\4\4\0\2\4"+
    "\6\0\10\4\1\141\10\0\1\4\1\142\2\4\2\0"+
    "\1\4\3\0\3\4\1\143\2\4\1\0\1\144\10\4"+
    "\4\0\2\4\6\0\1\4\1\145\1\146\1\147\1\4"+
    "\1\150\1\151\1\4\1\152\10\0\1\4\1\153\1\154"+
    "\1\4\2\0\1\4\3\0\1\155\1\4\1\156\3\4"+
    "\1\0\1\157\6\4\1\160\1\4\26\0\1\161\67\0"+
    "\1\162\57\0\1\163\1\164\14\0\1\165\1\0\1\165"+
    "\2\0\1\40\27\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\2\4\1\166\3\4\1\0\11\4"+
    "\4\0\2\4\6\0\3\4\1\167\1\70\1\170\2\4"+
    "\1\171\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\172\10\4\4\0\2\4\6\0\1\173\2\4\1\174"+
    "\1\4\1\175\1\4\1\176\1\177\10\0\2\4\1\200"+
    "\1\4\2\0\1\4\3\0\1\201\1\202\4\4\1\0"+
    "\7\4\1\203\1\4\4\0\2\4\6\0\5\4\1\204"+
    "\1\4\1\205\1\4\10\0\4\4\2\0\1\206\3\0"+
    "\1\4\1\207\4\4\1\0\11\4\42\0\1\40\1\0"+
    "\1\40\70\0\1\40\24\0\2\4\6\0\1\210\2\4"+
    "\1\211\1\4\1\212\1\4\1\213\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\5\4\1\214\1\100\1\215\1\216\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\1\4\1\217\7\4"+
    "\4\0\2\4\6\0\4\4\1\220\3\4\1\221\10\0"+
    "\1\4\1\222\2\4\2\0\1\4\3\0\2\4\1\223"+
    "\3\4\1\0\1\4\1\224\7\4\4\0\2\4\6\0"+
    "\6\4\1\70\1\225\1\4\10\0\4\4\2\0\1\4"+
    "\3\0\1\226\1\227\4\4\1\0\11\4\4\0\2\4"+
    "\6\0\6\4\1\70\1\230\1\4\10\0\3\4\1\70"+
    "\2\0\1\231\3\0\1\4\1\232\1\233\3\4\1\0"+
    "\11\4\4\0\2\4\6\0\1\234\10\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\1\235\2\4\1\236\3\4\1\237\1\70\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\240\1\241\1\242"+
    "\2\4\1\0\11\4\4\0\2\4\6\0\3\4\1\243"+
    "\3\4\1\244\1\4\10\0\2\4\1\245\1\4\2\0"+
    "\1\4\3\0\5\4\1\246\1\0\1\4\1\247\3\4"+
    "\1\70\3\4\4\0\2\4\6\0\3\4\1\250\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\1\70\1\4\1\251\6\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\252"+
    "\7\4\4\0\2\4\6\0\7\4\1\253\1\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\5\4\1\254\3\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\3\4\1\255\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\1\256\7\0\11\256\10\0\4\256"+
    "\2\0\1\256\3\0\6\256\1\0\2\256\2\0\5\256"+
    "\1\0\1\60\1\61\1\62\64\60\2\0\1\62\64\0"+
    "\1\63\1\257\1\260\64\63\1\64\2\0\4\64\1\261"+
    "\1\64\1\0\55\64\1\65\2\0\5\65\2\0\42\65"+
    "\1\262\12\65\1\66\2\0\6\66\1\0\1\263\54\66"+
    "\3\0\2\4\6\0\2\4\1\264\3\4\1\265\2\4"+
    "\10\0\4\4\2\0\1\4\3\0\2\4\1\100\3\4"+
    "\1\0\11\4\4\0\2\4\6\0\10\4\1\266\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\177\10\4\4\0\2\4\6\0\4\4"+
    "\1\242\4\4\10\0\1\4\1\267\2\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\1\270"+
    "\1\271\7\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\1\4"+
    "\1\242\2\4\2\0\1\4\3\0\1\4\1\272\4\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\1\4"+
    "\1\273\2\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\6\4\1\143\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\1\70\10\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\274\4\4\1\0"+
    "\11\4\4\0\2\4\6\0\5\4\1\267\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\4\4\1\275\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\2\4\1\70\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\1\4\1\276"+
    "\7\4\10\0\3\4\1\70\2\0\1\4\3\0\1\4"+
    "\1\277\4\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\1\4\1\300\4\4"+
    "\1\0\11\4\4\0\2\4\6\0\4\4\1\301\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\6\4\1\302\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\267\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\5\4"+
    "\1\303\3\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\5\4\1\244\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\6\4\1\267\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\304"+
    "\5\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\2\4\1\252\1\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\1\4\1\305"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\7\4\1\306\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\5\4\1\70\3\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\1\307\5\4\1\0\11\4\4\0\2\4\6\0\7\4"+
    "\1\310\1\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\1\311\7\4\1\267"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\1\312\5\4\1\0\11\4\4\0\2\4\6\0"+
    "\5\4\1\313\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\7\4\1\314"+
    "\1\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\1\104\4\4\1\315\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\316"+
    "\10\4\4\0\2\4\6\0\2\4\1\317\6\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\4\4\1\320\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\4\1\321\7\4\4\0"+
    "\2\4\6\0\10\4\1\322\10\0\1\4\2\70\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\1\157\10\4\4\0\2\4\6\0\5\4\1\323"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\3\4\1\324\5\4\10\0"+
    "\3\4\1\325\2\0\1\4\3\0\1\4\1\326\3\4"+
    "\1\327\1\0\1\4\1\330\7\4\4\0\2\4\6\0"+
    "\3\4\1\331\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\10\4\1\332"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\333\10\4\4\0\2\4\6\0"+
    "\1\334\10\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\5\4\1\70\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\70\1\4\2\0"+
    "\1\4\3\0\1\4\1\335\4\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\100\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\1\336\10\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\1\4\1\104\1\337\3\4\1\0"+
    "\11\4\4\0\2\4\6\0\2\4\1\70\6\4\10\0"+
    "\1\70\1\126\1\70\1\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\1\4\1\340\4\4\1\0\1\70"+
    "\10\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\1\70\5\4\1\0\11\4\4\0\2\4"+
    "\6\0\3\4\1\341\1\4\1\274\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\342\4\4\1\0\11\4\4\0\2\4\6\0\1\343"+
    "\2\4\1\344\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\2\4\1\345\3\4\1\0\11\4\4\0\2\4\6\0"+
    "\2\4\1\307\6\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\4\1\70\7\4\4\0\2\4\6\0"+
    "\11\4\10\0\1\4\1\346\2\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\4\4\1\315"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\4\1\347\7\4\26\0\1\350\61\0\1\40\102\0"+
    "\1\40\52\0\1\40\15\0\1\40\33\0\2\4\6\0"+
    "\3\4\1\351\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\3\4\1\143"+
    "\2\4\1\352\2\4\10\0\3\4\1\353\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\10\4"+
    "\1\254\10\0\2\4\1\70\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\3\4\1\311"+
    "\5\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\6\4\1\70\2\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\354\4\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\4\1\355\7\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\2\4\1\356\3\4\1\0\1\70\10\4\4\0\2\4"+
    "\6\0\5\4\1\70\2\4\1\104\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\1\314\10\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\70\4\4\1\0\11\4\4\0\2\4\6\0\3\4"+
    "\1\357\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\7\4\1\70\1\4"+
    "\4\0\2\4\6\0\7\4\1\360\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\2\4\1\267\3\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\267\10\4\4\0\2\4\6\0"+
    "\11\4\10\0\2\4\1\361\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\3\4\1\143\2\4\1\0"+
    "\11\4\4\0\2\4\6\0\1\100\10\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\3\4\1\362\1\4\1\100\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\10\4\1\363\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\10\4\1\364"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\7\4\1\242\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\10\4\1\152\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\4\4\1\365"+
    "\2\4\1\366\1\4\10\0\2\4\1\367\1\4\2\0"+
    "\1\4\3\0\4\4\1\326\1\4\1\0\1\4\1\370"+
    "\3\4\1\70\3\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\70"+
    "\7\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\7\4\1\371\1\4\4\0"+
    "\2\4\6\0\2\4\1\251\6\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\1\372\4\4\1\373\1\4\1\374\1\375\10\0\2\4"+
    "\1\376\1\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\5\4\1\377\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\1\u0100\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\2\4\1\u0101"+
    "\2\4\1\u0102\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\3\4\1\u0103"+
    "\3\4\1\270\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\2\4\1\356\1\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\1\u0104\2\4\1\u0105\1\4"+
    "\1\u0106\3\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\1\111\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\10\4\1\u0107\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\1\u0108"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\5\4\1\u0109\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\1\u010a\10\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\1\4\1\u010b\2\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\4\4\1\u010c\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\242\10\4\4\0\2\4\6\0"+
    "\10\4\1\u010d\10\0\2\4\1\u010e\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\1\u010f"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\10\4\1\u0110\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\2\4\1\70\6\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\1\4\1\267\1\u0111"+
    "\3\4\1\0\11\4\4\0\2\4\6\0\4\4\1\70"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\3\4\1\u0112\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\1\u0113\1\u0114\1\251\1\4\1\330\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\5\4\1\70\3\4\4\0\2\4"+
    "\6\0\1\244\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\1\u0115\10\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\10\4\1\u0116\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\u0117"+
    "\4\4\1\0\11\4\4\0\2\4\6\0\10\4\1\70"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\5\4\1\104\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\256"+
    "\6\0\11\256\10\0\4\256\2\0\1\256\3\0\6\256"+
    "\1\0\11\256\3\0\1\260\67\0\2\4\6\0\3\4"+
    "\1\324\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\3\4\1\u0118\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\2\4\1\u0119\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\5\4\1\70\3\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\10\4"+
    "\1\143\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\3\4\1\u011a\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\4\1\u011b\7\4\4\0\2\4\6\0"+
    "\10\4\1\267\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\5\4\1\100\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\6\4\1\u011c\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\1\4\1\u011d\7\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\4\4"+
    "\1\u011e\1\4\1\u011f\1\4\1\70\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\5\4\1\u0120\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\5\4\1\u0121"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\1\4\1\u0122"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\10\4\1\u010c\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\2\4\1\100\3\4"+
    "\1\0\11\4\4\0\2\4\6\0\3\4\1\u0123\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\4\4\1\u0124\1\4\1\0\11\4\4\0\2\4"+
    "\6\0\3\4\1\70\5\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\6\4"+
    "\1\u0125\2\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\1\4\1\70\7\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\2\4\1\u0126\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\6\4\1\104\2\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\1\4\1\70\2\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\6\4\1\70\2\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\3\4\1\357\1\4\1\313\1\4"+
    "\1\u0127\1\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\70\4\4\1\0\11\4\4\0\2\4\6\0\1\270"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\2\4\1\u0128"+
    "\1\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\4\1\u0129\7\4\4\0\2\4\6\0"+
    "\5\4\1\u012a\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\7\4\1\u0115"+
    "\1\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\3\4\1\244\2\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\1\4\1\100\4\4\1\0\11\4\4\0\2\4\6\0"+
    "\3\4\1\u012b\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\6\4\1\265"+
    "\2\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\3\4\1\242\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\4\4\1\u012c\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\215"+
    "\3\4\1\0\11\4\4\0\2\4\6\0\5\4\1\u012d"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\7\4\1\254\1\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\3\4\1\u012e\5\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\1\4\1\311\7\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\114\4\4\1\0"+
    "\11\4\4\0\2\4\6\0\5\4\1\201\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\6\4\1\u012f\2\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\7\4\1\114\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\1\4\1\104"+
    "\7\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\104\10\4\4\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\u0130\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\1\104"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\1\4\1\u0131"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\u0132\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\7\4\1\u0133\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\3\4\1\u0134"+
    "\1\u011e\4\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\1\u0135\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\70"+
    "\7\4\4\0\2\4\6\0\5\4\1\u0136\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\6\4\1\152\2\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\104"+
    "\4\4\1\0\11\4\4\0\2\4\6\0\6\4\1\u0137"+
    "\2\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\70\10\4\4\0\2\4\6\0\3\4\1\u0138\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\2\4\1\u0139\3\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\u013a\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\2\4\1\u013b\1\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\1\114\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\2\4\1\u013c\6\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\u013d"+
    "\3\4\1\0\11\4\4\0\2\4\6\0\10\4\1\216"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\4\4\1\315\4\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\1\70\1\4\1\254\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\6\4\1\u013e\2\4\4\0\2\4\6\0\11\4\10\0"+
    "\1\4\1\142\2\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\4\1\267\7\4\4\0\2\4\6\0\5\4\1\104"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\1\323\5\4"+
    "\1\0\11\4\4\0\2\4\6\0\1\314\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\1\4\1\u013f\4\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\4\1\346\7\4\4\0\2\4\6\0\5\4\1\u0140"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\4\4\1\u0140\4\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\2\4\1\u0111\3\4\1\0\11\4\4\0\2\4\6\0"+
    "\6\4\1\152\2\4\10\0\1\4\1\267\2\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\7\4\1\u0141\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\u0142\4\4\1\0"+
    "\11\4\4\0\2\4\6\0\5\4\1\u013b\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\70\5\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\u0143\10\4\4\0\2\4\6\0"+
    "\7\4\1\143\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\1\4\1\u0144\2\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\1\4\1\u0145"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\3\4\1\70\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\10\4"+
    "\1\u0146\10\0\2\4\1\267\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\u0147\5\4\1\0\11\4"+
    "\4\0\2\4\6\0\4\4\1\u0148\4\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\242"+
    "\5\4\1\0\11\4\4\0\2\4\6\0\4\4\1\104"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\3\4\1\u0149\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\10\4\1\u014a\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\1\u014b"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\1\4\1\70\4\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\u011b\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\3\4\1\254\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\4\4\1\u014c\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\7\4\1\u012d\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\u014d\4\4\1\0\11\4\4\0\2\4\6\0\7\4"+
    "\1\104\1\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\2\4"+
    "\1\u014e\1\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\3\4\1\70\5\4\4\0\2\4"+
    "\6\0\7\4\1\u014f\1\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\3\4"+
    "\1\u0150\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\10\4\1\u0151\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\7\4\1\u0152\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\3\4\1\u0153\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\1\4\1\267\2\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\3\4\1\u0154\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\4\4\1\242\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\1\u0155\10\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\7\4\1\u0127\1\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\3\4\1\104\5\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\u0156\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\1\4\1\314\2\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\1\u0157\10\4\4\0"+
    "\2\4\6\0\7\4\1\111\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\2\4\1\264\6\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\1\u0158\10\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\7\4\1\u0159\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\1\4\1\70\1\267\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\104"+
    "\3\4\1\0\11\4\4\0\2\4\6\0\4\4\1\u015a"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\5\4\1\u015b\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\u015c\10\4\4\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\254"+
    "\10\4\4\0\2\4\6\0\3\4\1\u015d\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\4\4\1\u011e\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\3\4\1\u015e\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\244\4\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\u015f\10\4\4\0\2\4"+
    "\6\0\7\4\1\u0160\1\70\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\4\1\330\7\4\4\0\2\4"+
    "\6\0\6\4\1\u0161\2\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\4"+
    "\1\u0162\7\4\4\0\2\4\6\0\5\4\1\u0163\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\2\4\1\70\6\4\4\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\250\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\3\4\1\242\2\4"+
    "\1\0\11\4\4\0\2\4\6\0\6\4\1\u0164\2\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\2\4\1\u0165\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\1\4\1\254\2\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\3\4"+
    "\1\u0166\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\1\4\1\307\7\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\1\4\1\u0167\7\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\1\u0168\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\267"+
    "\7\4\4\0\2\4\6\0\11\4\10\0\1\4\1\u0169"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\6\4\1\u016a\2\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\267"+
    "\4\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\5\4\1\304\1\0\11\4"+
    "\4\0\2\4\6\0\3\4\1\314\5\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\4\4\1\u016a\4\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\7\4"+
    "\1\u016b\1\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\3\4\1\254\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\4\4\1\143\4\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\6\4\1\u016c\2\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\11\4"+
    "\10\0\2\4\1\u016d\1\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\1\4\1\u016e\4\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\2\4\1\254\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\200\4\4\1\0\11\4\4\0\2\4\6\0\4\4"+
    "\1\u016f\4\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\4\0\2\4\6\0\2\4\1\242\6\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\3\4\1\u0170\5\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\1\70\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\1\254\10\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\4\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\1\143\5\4\1\0\11\4\4\0\2\4\6\0"+
    "\1\4\1\70\3\4\1\u0171\1\u0172\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\4\0\2\4"+
    "\6\0\1\4\1\254\7\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\4\0\2\4\6\0\1\u010c"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\3\4\1\244\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\3\4\1\u0173\5\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\267"+
    "\3\4\1\0\11\4\4\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\4\4\1\70\1\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\2\4\1\314"+
    "\1\4\2\0\1\4\3\0\1\u0174\5\4\1\0\11\4"+
    "\4\0\2\4\6\0\2\4\1\70\6\4\10\0\1\70"+
    "\3\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\3\4\1\u0175\5\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\1\4\1\200\2\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\4\0\2\4\6\0\2\4\1\267"+
    "\6\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\4\4\1\247\4\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\4\0"+
    "\2\4\6\0\7\4\1\100\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\4\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\254"+
    "\4\4\1\0\11\4\4\0\2\4\6\0\5\4\1\77"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\4\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\2\4\1\111\3\4\1\0\11\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\1\1\4\11\6\1\1\11"+
    "\21\1\1\11\1\1\3\0\72\1\1\0\1\11\1\1"+
    "\2\0\72\1\2\11\1\1\1\11\64\1\1\11\215\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public BashLexer() {
        super();
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;
    private static final byte DO        = 4;
    private static final byte CASE      = 5;
    private static final byte IF        = 5;
    private static final byte INT_EXPR  = 6;

    @Override
    public int yychar() {
        return yychar;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BashLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BashLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 24: break;
        case 10: 
          { return token(TokenType.KEYWORD);
          }
        case 25: break;
        case 3: 
          { return token(TokenType.OPERATOR);
          }
        case 26: break;
        case 6: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 27: break;
        case 7: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 28: break;
        case 20: 
          { return token(TokenType.KEYWORD,  INT_EXPR);
          }
        case 29: break;
        case 18: 
          { return token(TokenType.STRING);
          }
        case 30: break;
        case 17: 
          { return token(TokenType.TYPE);
          }
        case 31: break;
        case 12: 
          { return token(TokenType.COMMENT2);
          }
        case 32: break;
        case 1: 
          { /* skip */
          }
        case 33: break;
        case 9: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 34: break;
        case 4: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 35: break;
        case 13: 
          { return token(TokenType.KEYWORD,  IF);
          }
        case 36: break;
        case 2: 
          { return token(TokenType.IDENTIFIER);
          }
        case 37: break;
        case 14: 
          { return token(TokenType.KEYWORD, -IF);
          }
        case 38: break;
        case 16: 
          { return token(TokenType.KEYWORD, -INT_EXPR);
          }
        case 39: break;
        case 23: 
          { return token(TokenType.KEYWORD,  CASE);
          }
        case 40: break;
        case 8: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 41: break;
        case 22: 
          { return token(TokenType.KEYWORD, -CASE);
          }
        case 42: break;
        case 11: 
          { return token(TokenType.COMMENT);
          }
        case 43: break;
        case 15: 
          { return token(TokenType.KEYWORD,  DO);
          }
        case 44: break;
        case 21: 
          { return token(TokenType.KEYWORD, -DO);
          }
        case 45: break;
        case 19: 
          { return token(TokenType.STRING2);
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
