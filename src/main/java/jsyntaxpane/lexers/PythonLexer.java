/* The following code was generated by JFlex 1.4.3 on 14-3-27 ÏÂÎç10:25 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-3-27 ÏÂÎç10:25 from the specification file
 * <tt>F:/Workspace/r095/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/python.flex</tt>
 */
public final class PythonLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SQSTRING = 6;
  public static final int ML_STRING = 4;
  public static final int STRING = 2;
  public static final int SQML_STRING = 8;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\77\1\23"+
    "\1\4\1\101\1\72\1\72\1\24\1\62\1\63\1\70\1\22\1\75"+
    "\1\22\1\20\1\71\1\7\1\15\2\14\4\16\2\10\1\75\1\75"+
    "\1\73\1\76\1\74\1\101\1\75\4\13\1\21\1\17\2\5\1\55"+
    "\1\100\1\5\1\11\1\5\1\54\5\5\1\56\3\5\1\12\2\5"+
    "\1\66\1\25\1\67\1\72\1\6\1\75\1\26\1\35\1\37\1\30"+
    "\1\32\1\44\1\51\1\53\1\42\1\61\1\36\1\40\1\50\1\27"+
    "\1\41\1\46\1\5\1\33\1\31\1\34\1\43\1\57\1\52\1\45"+
    "\1\47\1\60\1\64\1\72\1\65\1\75\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\3\1\1\2\1\3\1\1\2\4\1\3\1\5"+
    "\1\3\1\5\1\6\1\7\31\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\5\5\1\1\1\16\1\17\2\20"+
    "\1\21\1\1\3\22\1\17\1\23\1\22\2\2\1\0"+
    "\3\4\1\0\4\4\1\0\2\3\2\0\1\3\1\24"+
    "\40\3\1\24\3\3\1\24\1\25\1\24\1\3\1\24"+
    "\25\3\1\26\2\17\4\0\4\4\1\0\2\3\1\27"+
    "\1\30\2\3\1\24\1\3\1\25\36\3\1\25\24\3"+
    "\1\17\1\31\2\0\2\4\10\3\1\24\27\3\2\0"+
    "\2\4\11\3\1\24\13\3\2\0\2\4\13\3\1\24"+
    "\1\3\2\0\2\4\6\3\1\25\2\4\3\3\2\4"+
    "\1\3\2\4\1\3\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u014a\0\u0420"+
    "\0\u014a\0\u0c60\0\u0ca2\0\u014a\0\u014a\0\u0ce4\0\u0d26\0\u014a"+
    "\0\u0d68\0\u0daa\0\u014a\0\u0dec\0\u0e2e\0\u014a\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u014a\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u0252\0\u1bd8\0\u1c1a\0\u0252\0\u1c5c"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c"+
    "\0\u20be\0\u2100\0\u2142\0\u2184\0\u014a\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u014a\0\u014a\0\u2520\0\u2562\0\u25a4\0\u25e6"+
    "\0\u25a4\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4"+
    "\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4"+
    "\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u25a4\0\u31c2"+
    "\0\u3204\0\u3246\0\u3288\0\u32ca\0\u014a\0\u014a\0\u330c\0\u334e"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e"+
    "\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\u1a8e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c"+
    "\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c"+
    "\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c"+
    "\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c"+
    "\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c"+
    "\0\u3f6c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a"+
    "\0\u459c\0\u45de\0\u124e\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728"+
    "\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u014a\0\u48f6"+
    "\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06"+
    "\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26"+
    "\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\3\12\3\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\6\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\12\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\12\1\52\1\53\1\54\1\12\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\21\1\65"+
    "\1\66\1\67\1\21\1\70\1\12\1\71\1\72\1\73"+
    "\1\74\20\72\1\75\1\72\1\76\55\72\1\77\1\100"+
    "\20\72\1\101\1\72\1\76\54\72\1\102\1\73\1\74"+
    "\21\102\1\103\1\76\55\102\1\77\1\100\21\102\1\104"+
    "\1\76\54\102\104\0\1\6\102\0\1\10\76\0\1\11"+
    "\1\105\1\106\77\11\5\0\13\12\1\0\1\12\4\0"+
    "\34\12\16\0\1\12\7\0\1\107\102\0\1\110\1\111"+
    "\1\112\1\113\1\0\1\114\1\115\1\114\1\116\1\117"+
    "\1\120\10\0\1\120\5\0\1\112\3\0\1\116\1\113"+
    "\43\0\2\15\1\112\2\0\3\15\1\116\1\117\1\120"+
    "\10\0\1\120\5\0\1\112\3\0\1\116\42\0\13\12"+
    "\1\0\1\12\4\0\1\121\33\12\16\0\1\12\10\0"+
    "\2\117\3\0\3\117\70\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\122\21\12\16\0\1\12\77\0\1\67\26\0"+
    "\1\123\102\0\1\124\62\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\125\1\12\1\126\3\12\1\127\10\12\1\130"+
    "\13\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\13\12\1\131\20\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\132\7\12\1\133\17\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\4\12\1\134"+
    "\1\12\1\135\3\12\1\136\1\137\1\12\1\140\16\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\141\10\12\1\142\4\12\1\143\11\12\1\144\2\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\1\145"+
    "\3\12\1\146\6\12\1\147\20\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\150\7\12\1\151"+
    "\3\12\1\152\12\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\153\5\12\1\154\1\12\1\155"+
    "\16\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\156\11\12\1\157\1\160\6\12\1\161\2\12\1\162"+
    "\6\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\163\3\12\1\164\6\12\1\165\1\166\17\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\5\12\1\167"+
    "\1\12\1\170\1\12\1\171\6\12\1\172\13\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\12\1\173"+
    "\1\174\1\175\2\12\1\176\7\12\1\177\3\12\1\200"+
    "\11\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\201\32\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\202\4\12\1\203\1\204\1\205"+
    "\17\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\206\26\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\207\4\12\1\210\5\12\1\211\20\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\14\12"+
    "\1\212\17\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\213\13\12\1\164\17\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\214\5\12\1\215"+
    "\21\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\14\12\1\216\10\12\1\217\6\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\220\3\12\1\221\27\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\13\12"+
    "\1\222\20\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\223\26\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\1\224\33\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\14\12\1\161\17\12\16\0"+
    "\1\12\71\0\1\21\5\0\1\67\74\0\1\21\4\0"+
    "\1\67\76\0\1\21\1\67\1\0\1\67\77\0\1\21"+
    "\1\0\1\67\3\0\1\72\2\0\20\72\1\0\1\72"+
    "\1\0\54\72\2\0\1\74\77\0\2\225\1\0\4\225"+
    "\1\226\4\225\2\226\1\227\63\225\2\0\1\100\122\0"+
    "\1\230\56\0\1\102\2\0\21\102\2\0\54\102\24\0"+
    "\1\231\57\0\1\106\126\0\1\232\12\0\1\233\46\0"+
    "\1\110\1\111\1\112\2\0\1\114\1\115\1\114\1\116"+
    "\1\117\1\120\10\0\1\120\5\0\1\112\3\0\1\116"+
    "\44\0\2\111\3\0\3\111\1\116\1\117\1\120\10\0"+
    "\1\120\11\0\1\116\44\0\1\234\1\235\2\0\5\235"+
    "\1\0\1\235\4\0\1\235\1\0\1\235\1\0\1\235"+
    "\2\0\1\235\1\0\1\235\4\0\1\235\44\0\1\236"+
    "\1\111\1\112\2\0\3\236\1\116\1\117\1\120\10\0"+
    "\1\120\5\0\1\112\3\0\1\116\44\0\1\114\1\111"+
    "\1\112\2\0\3\114\1\116\1\117\1\120\10\0\1\120"+
    "\5\0\1\112\3\0\1\116\116\0\1\112\16\0\1\112"+
    "\10\0\2\117\3\0\3\117\1\116\1\0\1\120\10\0"+
    "\1\120\11\0\1\116\44\0\2\237\3\0\3\237\3\0"+
    "\1\240\64\0\13\12\1\0\1\12\4\0\12\12\1\241"+
    "\21\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\242\21\12\16\0\1\12\24\0\1\243\102\0"+
    "\1\244\62\0\13\12\1\0\1\12\4\0\2\12\1\177"+
    "\31\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\3\12\1\245\30\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\3\12\1\174\30\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\20\12\1\246\13\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\6\12\1\177"+
    "\25\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\247\3\12\1\177\15\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\174\3\12\1\171"+
    "\17\12\1\250\2\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\251\3\12\1\252\21\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\253\4\12"+
    "\1\174\26\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\14\12\1\254\17\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\5\12\1\255\26\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\20\12\1\176\1\12"+
    "\1\174\11\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\256\16\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\3\12\1\257\10\12\1\252\17\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\260\4\12\1\261\22\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\1\262\33\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\12\1\263\12\12\1\264"+
    "\7\12\1\265\7\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\266\3\12\1\267\3\12\1\270"+
    "\5\12\1\162\10\12\1\271\2\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\272\16\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\21\12\1\177"+
    "\12\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\20\12\1\273\13\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\20\12\1\274\13\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\275\27\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\13\12\1\262"+
    "\20\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\276\15\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\277\21\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\300\33\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\1\12\1\301\2\12"+
    "\1\302\15\12\1\303\11\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\20\12\1\174\13\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\5\12\1\174\26\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\22\12"+
    "\1\304\11\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\174\32\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\1\12\1\305\7\12\1\306\22\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\3\12"+
    "\1\171\30\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\174\31\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\33\12\1\307\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\174\25\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\4\12\1\164"+
    "\27\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\310\11\12\1\311\13\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\312\10\12\1\313"+
    "\17\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\162\27\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\20\12\1\314\13\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\14\12\1\315\17\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\13\12\1\316"+
    "\20\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\13\12\1\317\20\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\177\26\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\12\1\320\10\12\1\321"+
    "\21\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\322\33\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\3\12\1\323\30\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\13\12\1\324\1\325\17\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\24\12\1\174"+
    "\7\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\326\27\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\17\12\2\174\13\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\327\25\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\13\12\1\330"+
    "\20\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\331\25\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\14\12\1\332\17\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\333\30\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\12\12\1\161"+
    "\4\12\1\174\14\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\274\4\12\1\334\25\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\15\12\1\274"+
    "\16\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\127\26\12\16\0\1\12\10\0\1\227\4\0"+
    "\3\227\72\0\1\335\4\0\3\335\106\0\1\336\102\0"+
    "\1\336\103\0\1\337\123\0\1\340\40\0\1\234\1\235"+
    "\1\112\1\0\5\235\1\0\1\235\4\0\1\235\1\0"+
    "\1\235\1\0\1\235\2\0\1\235\1\0\1\235\1\112"+
    "\3\0\1\235\44\0\2\341\1\112\1\0\5\341\1\0"+
    "\1\341\4\0\1\341\1\0\1\341\1\0\1\341\2\0"+
    "\1\341\1\0\1\341\1\112\3\0\1\341\44\0\1\342"+
    "\1\111\1\112\2\0\3\342\1\116\1\117\1\120\10\0"+
    "\1\120\5\0\1\112\3\0\1\116\44\0\2\237\3\0"+
    "\3\237\1\116\24\0\1\116\44\0\2\237\3\0\3\237"+
    "\70\0\13\12\1\0\1\12\4\0\3\12\1\274\30\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\14\12"+
    "\1\343\17\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\4\12\1\344\27\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\345\21\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\1\346\33\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\22\12\1\347"+
    "\11\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\177\15\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\350\25\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\274\22\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\6\12\1\351"+
    "\25\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\22\12\1\352\11\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\177\27\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\353\22\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\4\12\1\354"+
    "\27\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\174\21\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\23\12\1\274\10\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\257\30\12\16\0"+
    "\1\12\6\0\1\12\1\355\11\12\1\0\1\12\4\0"+
    "\34\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\15\12\1\254\16\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\15\12\1\356\16\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\13\12\1\357\20\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\4\12\1\360"+
    "\27\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\361\32\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\274\21\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\174\27\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\362\33\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\16\12"+
    "\1\176\15\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\363\21\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\3\12\1\364\30\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\6\12\1\365\25\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\254\26\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\20\12\1\366\13\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\7\12\1\367\24\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\23\12\1\174\10\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\1\370"+
    "\33\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\371\27\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\372\27\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\171\16\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\15\12\1\373"+
    "\16\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\374\32\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\13\12\1\344\20\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\375\22\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\22\12\1\177"+
    "\7\12\1\376\1\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\171\33\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\1\377\33\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\174\1\12\1\176"+
    "\25\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\263\32\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\3\12\1\177\30\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\20\12\1\u0100\13\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\12\1\131"+
    "\32\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\125\21\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\u0101\24\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\25\12\1\177\6\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\12\12\1\257"+
    "\21\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\346\24\12\1\174\6\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\27\12\1\u0102\4\12\16\0\1\12"+
    "\51\0\1\u0103\77\0\1\u0104\42\0\2\u0105\1\112\1\0"+
    "\5\u0105\1\0\1\u0105\4\0\1\u0105\1\0\1\u0105\1\0"+
    "\1\u0105\2\0\1\u0105\1\0\1\u0105\1\112\3\0\1\u0105"+
    "\44\0\1\u0106\1\111\1\112\2\0\3\u0106\1\116\1\117"+
    "\1\120\10\0\1\120\5\0\1\112\3\0\1\116\42\0"+
    "\13\12\1\0\1\12\4\0\20\12\1\u0107\13\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\5\12\1\131"+
    "\26\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\21\12\1\174\12\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\u0108\25\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\13\12\1\361\20\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\14\12\1\u0109"+
    "\17\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\361\27\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\u010a\27\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\16\12\1\u010b\15\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\20\12\1\131"+
    "\13\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\14\12\1\u010c\17\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\u010d\26\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\361\33\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\5\12\1\u010e\26\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\10\12"+
    "\1\177\23\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\u010f\33\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\3\12\1\u0110\30\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\14\12\1\u0111\17\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\12\12\1\u0112"+
    "\1\12\1\273\17\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\u0113\31\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\127\21\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\11\12\1\171"+
    "\22\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\164\26\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\u0114\24\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\u0115\30\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\13\12\1\u0116"+
    "\11\12\1\162\6\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\u0117\27\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u0118\21\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\4\12\1\u0119"+
    "\27\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\u011a\33\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\22\12\1\u011b\11\12\16\0\1\12\33\0\1\u011c"+
    "\110\0\1\u011d\47\0\2\u011e\1\112\1\0\5\u011e\1\0"+
    "\1\u011e\4\0\1\u011e\1\0\1\u011e\1\0\1\u011e\2\0"+
    "\1\u011e\1\0\1\u011e\1\112\3\0\1\u011e\44\0\1\u011f"+
    "\1\111\1\112\2\0\3\u011f\1\116\1\117\1\120\10\0"+
    "\1\120\5\0\1\112\3\0\1\116\42\0\13\12\1\0"+
    "\1\12\4\0\3\12\1\u0120\30\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\162\25\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\11\12\1\u0121"+
    "\22\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\u0122\26\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\14\12\1\273\17\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\12\1\u0123\32\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\12\1\177"+
    "\32\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\3\12\1\351\30\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\273\24\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\22\12\1\u0124\11\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\12\1\u0125"+
    "\32\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\u0126\27\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\177\33\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\u0127\22\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\6\12\1\u0128\25\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\274\31\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\u0129\32\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\150\21\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\5\12\1\u012a\26\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u012b\21\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\20\12\1\u012c\13\12\16\0\1\12\7\0\1\u012d"+
    "\126\0\1\u012e\55\0\2\u012f\1\112\1\0\5\u012f\1\0"+
    "\1\u012f\4\0\1\u012f\1\0\1\u012f\1\0\1\u012f\2\0"+
    "\1\u012f\1\0\1\u012f\1\112\3\0\1\u012f\44\0\1\u0130"+
    "\1\111\1\112\2\0\3\u0130\1\116\1\117\1\120\10\0"+
    "\1\120\5\0\1\112\3\0\1\116\42\0\13\12\1\0"+
    "\1\12\4\0\14\12\1\127\17\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\u0131\33\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\20\12\1\311\13\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u0132\27\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\257\16\12\16\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\17\12\1\174\14\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\12\12\1\u0133\21\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\1\u0134"+
    "\33\12\16\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\3\12\1\u0135\30\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\345\25\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u0136\21\12\16\0"+
    "\1\12\7\0\1\u0137\127\0\1\u011c\54\0\2\u0138\1\112"+
    "\1\0\5\u0138\1\0\1\u0138\4\0\1\u0138\1\0\1\u0138"+
    "\1\0\1\u0138\2\0\1\u0138\1\0\1\u0138\1\112\3\0"+
    "\1\u0138\44\0\1\u0139\1\111\1\112\2\0\3\u0139\1\116"+
    "\1\117\1\120\10\0\1\120\5\0\1\112\3\0\1\116"+
    "\42\0\13\12\1\0\1\12\4\0\6\12\1\274\25\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\u013a\25\12\16\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\u013b\33\12\16\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\254\32\12\16\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\171\27\12\16\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\4\12\1\u013c"+
    "\27\12\16\0\1\12\10\0\2\u013d\1\112\1\0\5\u013d"+
    "\1\0\1\u013d\4\0\1\u013d\1\0\1\u013d\1\0\1\u013d"+
    "\2\0\1\u013d\1\0\1\u013d\1\112\3\0\1\u013d\44\0"+
    "\1\u013e\1\111\1\112\2\0\3\u013e\1\116\1\117\1\120"+
    "\10\0\1\120\5\0\1\112\3\0\1\116\42\0\13\12"+
    "\1\0\1\12\4\0\25\12\1\347\6\12\16\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\3\12\1\127\30\12"+
    "\16\0\1\12\6\0\13\12\1\0\1\12\4\0\22\12"+
    "\1\u013f\11\12\16\0\1\12\10\0\2\u0140\1\112\1\0"+
    "\5\u0140\1\0\1\u0140\4\0\1\u0140\1\0\1\u0140\1\0"+
    "\1\u0140\2\0\1\u0140\1\0\1\u0140\1\112\3\0\1\u0140"+
    "\44\0\1\u0141\1\111\1\112\2\0\3\u0141\1\116\1\117"+
    "\1\120\10\0\1\120\5\0\1\112\3\0\1\116\42\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\u0142\27\12\16\0"+
    "\1\12\10\0\2\u0143\1\112\1\0\5\u0143\1\0\1\u0143"+
    "\4\0\1\u0143\1\0\1\u0143\1\0\1\u0143\2\0\1\u0143"+
    "\1\0\1\u0143\1\112\3\0\1\u0143\44\0\1\u0144\1\111"+
    "\1\112\2\0\3\u0144\1\116\1\117\1\120\10\0\1\120"+
    "\5\0\1\112\3\0\1\116\42\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\255\32\12\16\0\1\12\10\0\2\u0145"+
    "\1\112\1\0\5\u0145\1\0\1\u0145\4\0\1\u0145\1\0"+
    "\1\u0145\1\0\1\u0145\2\0\1\u0145\1\0\1\u0145\1\112"+
    "\3\0\1\u0145\44\0\1\u0146\1\111\1\112\2\0\3\u0146"+
    "\1\116\1\117\1\120\10\0\1\120\5\0\1\112\3\0"+
    "\1\116\44\0\2\u0147\1\112\1\0\5\u0147\1\0\1\u0147"+
    "\4\0\1\u0147\1\0\1\u0147\1\0\1\u0147\2\0\1\u0147"+
    "\1\0\1\u0147\1\112\3\0\1\u0147\44\0\1\u0148\1\111"+
    "\1\112\2\0\3\u0148\1\116\1\117\1\120\10\0\1\120"+
    "\5\0\1\112\3\0\1\116\44\0\2\u0149\1\112\1\0"+
    "\5\u0149\1\0\1\u0149\4\0\1\u0149\1\0\1\u0149\1\0"+
    "\1\u0149\2\0\1\u0149\1\0\1\u0149\1\112\3\0\1\u0149"+
    "\44\0\1\u014a\1\111\1\112\2\0\3\u014a\1\116\1\117"+
    "\1\120\10\0\1\120\5\0\1\112\3\0\1\116\44\0"+
    "\2\u014b\1\112\1\0\5\u014b\1\0\1\u014b\4\0\1\u014b"+
    "\1\0\1\u014b\1\0\1\u014b\2\0\1\u014b\1\0\1\u014b"+
    "\1\112\3\0\1\u014b\44\0\1\u014c\1\111\1\112\2\0"+
    "\3\u014c\1\116\1\117\1\120\10\0\1\120\5\0\1\112"+
    "\3\0\1\116\44\0\2\u014d\1\112\1\0\5\u014d\1\0"+
    "\1\u014d\4\0\1\u014d\1\0\1\u014d\1\0\1\u014d\2\0"+
    "\1\u014d\1\0\1\u014d\1\112\3\0\1\u014d\44\0\1\u014e"+
    "\1\111\1\112\2\0\3\u014e\1\116\1\117\1\120\10\0"+
    "\1\120\5\0\1\112\3\0\1\116\44\0\2\u014f\1\112"+
    "\1\0\5\u014f\1\0\1\u014f\4\0\1\u014f\1\0\1\u014f"+
    "\1\0\1\u014f\2\0\1\u014f\1\0\1\u014f\1\112\3\0"+
    "\1\u014f\44\0\1\u0150\1\111\1\112\2\0\3\u0150\1\116"+
    "\1\117\1\120\10\0\1\120\5\0\1\112\3\0\1\116"+
    "\44\0\2\u0151\1\112\1\0\5\u0151\1\0\1\u0151\4\0"+
    "\1\u0151\1\0\1\u0151\1\0\1\u0151\2\0\1\u0151\1\0"+
    "\1\u0151\1\112\3\0\1\u0151\44\0\1\u0152\1\111\1\112"+
    "\2\0\3\u0152\1\116\1\117\1\120\10\0\1\120\5\0"+
    "\1\112\3\0\1\116\46\0\1\112\26\0\1\112\50\0"+
    "\1\u0153\1\111\1\112\2\0\3\u0153\1\116\1\117\1\120"+
    "\10\0\1\120\5\0\1\112\3\0\1\116\44\0\1\u0154"+
    "\1\111\1\112\2\0\3\u0154\1\116\1\117\1\120\10\0"+
    "\1\120\5\0\1\112\3\0\1\116\44\0\1\u0155\1\111"+
    "\1\112\2\0\3\u0155\1\116\1\117\1\120\10\0\1\120"+
    "\5\0\1\112\3\0\1\116\44\0\1\u0156\1\111\1\112"+
    "\2\0\3\u0156\1\116\1\117\1\120\10\0\1\120\5\0"+
    "\1\112\3\0\1\116\44\0\2\111\1\112\2\0\3\111"+
    "\1\116\1\117\1\120\10\0\1\120\5\0\1\112\3\0"+
    "\1\116\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20724];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\46\1\6\11\4\1\1\11\1\1\1\11"+
    "\2\1\2\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\0\2\1\1\11\1\0\4\1\1\0\2\1\2\0"+
    "\100\1\1\11\2\1\4\0\4\1\1\0\2\1\2\11"+
    "\70\1\2\11\2\0\42\1\2\0\27\1\2\0\17\1"+
    "\2\0\10\1\1\11\13\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public PythonLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PythonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 26: break;
        case 20: 
          { return token(TokenType.KEYWORD);
          }
        case 27: break;
        case 19: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 28: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 29: break;
        case 5: 
          { return token(TokenType.OPERATOR);
          }
        case 30: break;
        case 10: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 31: break;
        case 11: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 32: break;
        case 25: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 3);
          }
        case 33: break;
        case 23: 
          { yybegin(ML_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 3;
          }
        case 34: break;
        case 15: 
          { tokenLength += yylength();
          }
        case 35: break;
        case 16: 
          { yybegin(YYINITIAL);
          }
        case 36: break;
        case 6: 
          { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 37: break;
        case 17: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 38: break;
        case 21: 
          { return token(TokenType.TYPE);
          }
        case 39: break;
        case 13: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 40: break;
        case 8: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 41: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 42: break;
        case 22: 
          { tokenLength += 2;
          }
        case 43: break;
        case 14: 
          { return token(TokenType.ERROR);
          }
        case 44: break;
        case 24: 
          { yybegin(SQML_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 3;
          }
        case 45: break;
        case 18: 
          { tokenLength ++;
          }
        case 46: break;
        case 12: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 47: break;
        case 7: 
          { yybegin(SQSTRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 48: break;
        case 2: 
          { return token(TokenType.COMMENT);
          }
        case 49: break;
        case 1: 
          { 
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
